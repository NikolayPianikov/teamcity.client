/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TeamCity.Client;
using TeamCity.Api;
using TeamCity.Model;

namespace TeamCity.Test
{
    /// <summary>
    ///  Class for testing InvestigationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class InvestigationApiTests
    {
        private InvestigationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InvestigationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InvestigationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InvestigationApi
            //Assert.IsInstanceOfType(typeof(InvestigationApi), instance, "instance is a InvestigationApi");
        }

        
        /// <summary>
        /// Test CreateInstance
        /// </summary>
        [Test]
        public void CreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InvestigationDto body = null;
            //string fields = null;
            //var response = instance.CreateInstance(body, fields);
            //Assert.IsInstanceOf<InvestigationDto> (response, "response is InvestigationDto");
        }
        
        /// <summary>
        /// Test CreateInstances
        /// </summary>
        [Test]
        public void CreateInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InvestigationsDto body = null;
            //string fields = null;
            //var response = instance.CreateInstances(body, fields);
            //Assert.IsInstanceOf<InvestigationsDto> (response, "response is InvestigationsDto");
        }
        
        /// <summary>
        /// Test DeleteInstance
        /// </summary>
        [Test]
        public void DeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string investigationLocator = null;
            //instance.DeleteInstance(investigationLocator);
            
        }
        
        /// <summary>
        /// Test GetInvestigations1
        /// </summary>
        [Test]
        public void GetInvestigations1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locator = null;
            //string fields = null;
            //var response = instance.GetInvestigations1(locator, fields);
            //Assert.IsInstanceOf<InvestigationsDto> (response, "response is InvestigationsDto");
        }
        
        /// <summary>
        /// Test ReplaceInstance
        /// </summary>
        [Test]
        public void ReplaceInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string investigationLocator = null;
            //InvestigationDto body = null;
            //string fields = null;
            //var response = instance.ReplaceInstance(investigationLocator, body, fields);
            //Assert.IsInstanceOf<InvestigationDto> (response, "response is InvestigationDto");
        }
        
        /// <summary>
        /// Test ServeInvestigationInstance
        /// </summary>
        [Test]
        public void ServeInvestigationInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string investigationLocator = null;
            //string fields = null;
            //var response = instance.ServeInvestigationInstance(investigationLocator, fields);
            //Assert.IsInstanceOf<InvestigationDto> (response, "response is InvestigationDto");
        }
        
    }

}
