/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TeamCity.Client;
using TeamCity.Api;
using TeamCity.Model;

namespace TeamCity.Test
{
    /// <summary>
    ///  Class for testing BuildApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BuildApiTests
    {
        private BuildApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BuildApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BuildApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BuildApi
            //Assert.IsInstanceOfType(typeof(BuildApi), instance, "instance is a BuildApi");
        }

        
        /// <summary>
        /// Test AddLogMessage
        /// </summary>
        [Test]
        public void AddLogMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string body = null;
            //string fields = null;
            //instance.AddLogMessage(buildLocator, body, fields);
            
        }
        
        /// <summary>
        /// Test AddProblemToBuild
        /// </summary>
        [Test]
        public void AddProblemToBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string body = null;
            //string fields = null;
            //var response = instance.AddProblemToBuild(buildLocator, body, fields);
            //Assert.IsInstanceOf<ProblemOccurrenceDto> (response, "response is ProblemOccurrenceDto");
        }
        
        /// <summary>
        /// Test AddTagsMultipleToBuild
        /// </summary>
        [Test]
        public void AddTagsMultipleToBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //TagsDto body = null;
            //string fields = null;
            //var response = instance.AddTagsMultipleToBuild(buildLocator, body, fields);
            //Assert.IsInstanceOf<MultipleOperationResultDto> (response, "response is MultipleOperationResultDto");
        }
        
        /// <summary>
        /// Test AddTagsToBuild
        /// </summary>
        [Test]
        public void AddTagsToBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //TagsDto body = null;
            //string fields = null;
            //var response = instance.AddTagsToBuild(buildLocator, body, fields);
            //Assert.IsInstanceOf<TagsDto> (response, "response is TagsDto");
        }
        
        /// <summary>
        /// Test CancelBuild1
        /// </summary>
        [Test]
        public void CancelBuild1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //BuildCancelRequestDto body = null;
            //string fields = null;
            //var response = instance.CancelBuild1(buildLocator, body, fields);
            //Assert.IsInstanceOf<BuildDto> (response, "response is BuildDto");
        }
        
        /// <summary>
        /// Test CancelMultiple
        /// </summary>
        [Test]
        public void CancelMultipleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //BuildCancelRequestDto body = null;
            //string fields = null;
            //var response = instance.CancelMultiple(buildLocator, body, fields);
            //Assert.IsInstanceOf<MultipleOperationResultDto> (response, "response is MultipleOperationResultDto");
        }
        
        /// <summary>
        /// Test DeleteBuild
        /// </summary>
        [Test]
        public void DeleteBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //instance.DeleteBuild(buildLocator);
            
        }
        
        /// <summary>
        /// Test DeleteComment
        /// </summary>
        [Test]
        public void DeleteCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //instance.DeleteComment(buildLocator);
            
        }
        
        /// <summary>
        /// Test DeleteCommentMultiple
        /// </summary>
        [Test]
        public void DeleteCommentMultipleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.DeleteCommentMultiple(buildLocator, fields);
            //Assert.IsInstanceOf<MultipleOperationResultDto> (response, "response is MultipleOperationResultDto");
        }
        
        /// <summary>
        /// Test DeleteMultiple
        /// </summary>
        [Test]
        public void DeleteMultipleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.DeleteMultiple(buildLocator, fields);
            //Assert.IsInstanceOf<MultipleOperationResultDto> (response, "response is MultipleOperationResultDto");
        }
        
        /// <summary>
        /// Test GetArtifactDependencyChanges
        /// </summary>
        [Test]
        public void GetArtifactDependencyChangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.GetArtifactDependencyChanges(buildLocator, fields);
            //Assert.IsInstanceOf<BuildChangesDto> (response, "response is BuildChangesDto");
        }
        
        /// <summary>
        /// Test GetArtifactsDirectory
        /// </summary>
        [Test]
        public void GetArtifactsDirectoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //var response = instance.GetArtifactsDirectory(buildLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetBuildFinishDate
        /// </summary>
        [Test]
        public void GetBuildFinishDateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //var response = instance.GetBuildFinishDate(buildLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetBuildNumber
        /// </summary>
        [Test]
        public void GetBuildNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //var response = instance.GetBuildNumber(buildLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetBuildStatusText
        /// </summary>
        [Test]
        public void GetBuildStatusTextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //var response = instance.GetBuildStatusText(buildLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetCanceledInfo
        /// </summary>
        [Test]
        public void GetCanceledInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.GetCanceledInfo(buildLocator, fields);
            //Assert.IsInstanceOf<CommentDto> (response, "response is CommentDto");
        }
        
        /// <summary>
        /// Test GetChildren
        /// </summary>
        [Test]
        public void GetChildrenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string buildLocator = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //bool? logBuildUsage = null;
            //var response = instance.GetChildren(path, buildLocator, basePath, locator, fields, logBuildUsage);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetChildren1
        /// </summary>
        [Test]
        public void GetChildren1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string buildLocator = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //bool? resolveParameters = null;
            //bool? logBuildUsage = null;
            //var response = instance.GetChildren1(path, buildLocator, basePath, locator, fields, resolveParameters, logBuildUsage);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetChildrenAlias
        /// </summary>
        [Test]
        public void GetChildrenAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string buildLocator = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //bool? logBuildUsage = null;
            //var response = instance.GetChildrenAlias(path, buildLocator, basePath, locator, fields, logBuildUsage);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetChildrenAlias1
        /// </summary>
        [Test]
        public void GetChildrenAlias1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string buildLocator = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //bool? resolveParameters = null;
            //bool? logBuildUsage = null;
            //var response = instance.GetChildrenAlias1(path, buildLocator, basePath, locator, fields, resolveParameters, logBuildUsage);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetContent
        /// </summary>
        [Test]
        public void GetContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string buildLocator = null;
            //string responseBuilder = null;
            //bool? logBuildUsage = null;
            //instance.GetContent(path, buildLocator, responseBuilder, logBuildUsage);
            
        }
        
        /// <summary>
        /// Test GetContent1
        /// </summary>
        [Test]
        public void GetContent1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string buildLocator = null;
            //string responseBuilder = null;
            //bool? resolveParameters = null;
            //bool? logBuildUsage = null;
            //instance.GetContent1(path, buildLocator, responseBuilder, resolveParameters, logBuildUsage);
            
        }
        
        /// <summary>
        /// Test GetContentAlias
        /// </summary>
        [Test]
        public void GetContentAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string buildLocator = null;
            //bool? logBuildUsage = null;
            //instance.GetContentAlias(path, buildLocator, logBuildUsage);
            
        }
        
        /// <summary>
        /// Test GetContentAlias1
        /// </summary>
        [Test]
        public void GetContentAlias1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string buildLocator = null;
            //bool? resolveParameters = null;
            //bool? logBuildUsage = null;
            //instance.GetContentAlias1(path, buildLocator, resolveParameters, logBuildUsage);
            
        }
        
        /// <summary>
        /// Test GetMetadata
        /// </summary>
        [Test]
        public void GetMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string buildLocator = null;
            //string fields = null;
            //bool? logBuildUsage = null;
            //var response = instance.GetMetadata(path, buildLocator, fields, logBuildUsage);
            //Assert.IsInstanceOf<FileDto> (response, "response is FileDto");
        }
        
        /// <summary>
        /// Test GetMetadata1
        /// </summary>
        [Test]
        public void GetMetadata1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string buildLocator = null;
            //string fields = null;
            //bool? resolveParameters = null;
            //bool? logBuildUsage = null;
            //var response = instance.GetMetadata1(path, buildLocator, fields, resolveParameters, logBuildUsage);
            //Assert.IsInstanceOf<FileDto> (response, "response is FileDto");
        }
        
        /// <summary>
        /// Test GetMultiple
        /// </summary>
        [Test]
        public void GetMultipleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.GetMultiple(buildLocator, fields);
            //Assert.IsInstanceOf<BuildsDto> (response, "response is BuildsDto");
        }
        
        /// <summary>
        /// Test GetParameter
        /// </summary>
        [Test]
        public void GetParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string propertyName = null;
            //var response = instance.GetParameter(buildLocator, propertyName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetPinData
        /// </summary>
        [Test]
        public void GetPinDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.GetPinData(buildLocator, fields);
            //Assert.IsInstanceOf<PinInfoDto> (response, "response is PinInfoDto");
        }
        
        /// <summary>
        /// Test GetProblems
        /// </summary>
        [Test]
        public void GetProblemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.GetProblems(buildLocator, fields);
            //Assert.IsInstanceOf<ProblemOccurrencesDto> (response, "response is ProblemOccurrencesDto");
        }
        
        /// <summary>
        /// Test GetResolvedParameter
        /// </summary>
        [Test]
        public void GetResolvedParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string value = null;
            //var response = instance.GetResolvedParameter(buildLocator, value);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetRoot
        /// </summary>
        [Test]
        public void GetRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //bool? logBuildUsage = null;
            //var response = instance.GetRoot(buildLocator, basePath, locator, fields, logBuildUsage);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetRoot1
        /// </summary>
        [Test]
        public void GetRoot1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //bool? resolveParameters = null;
            //bool? logBuildUsage = null;
            //var response = instance.GetRoot1(buildLocator, basePath, locator, fields, resolveParameters, logBuildUsage);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetTests
        /// </summary>
        [Test]
        public void GetTestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.GetTests(buildLocator, fields);
            //Assert.IsInstanceOf<TestOccurrencesDto> (response, "response is TestOccurrencesDto");
        }
        
        /// <summary>
        /// Test GetVcsLabels
        /// </summary>
        [Test]
        public void GetVcsLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.GetVcsLabels(buildLocator, fields);
            //Assert.IsInstanceOf<VcsLabelsDto> (response, "response is VcsLabelsDto");
        }
        
        /// <summary>
        /// Test GetZipped
        /// </summary>
        [Test]
        public void GetZippedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string buildLocator = null;
            //string basePath = null;
            //string locator = null;
            //string name = null;
            //bool? logBuildUsage = null;
            //instance.GetZipped(path, buildLocator, basePath, locator, name, logBuildUsage);
            
        }
        
        /// <summary>
        /// Test GetZipped1
        /// </summary>
        [Test]
        public void GetZipped1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string buildLocator = null;
            //string basePath = null;
            //string locator = null;
            //string name = null;
            //bool? resolveParameters = null;
            //bool? logBuildUsage = null;
            //instance.GetZipped1(path, buildLocator, basePath, locator, name, resolveParameters, logBuildUsage);
            
        }
        
        /// <summary>
        /// Test MarkBuildAsRunning
        /// </summary>
        [Test]
        public void MarkBuildAsRunningTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string body = null;
            //string fields = null;
            //var response = instance.MarkBuildAsRunning(buildLocator, body, fields);
            //Assert.IsInstanceOf<BuildDto> (response, "response is BuildDto");
        }
        
        /// <summary>
        /// Test PinMultiple
        /// </summary>
        [Test]
        public void PinMultipleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //PinInfoDto body = null;
            //string fields = null;
            //var response = instance.PinMultiple(buildLocator, body, fields);
            //Assert.IsInstanceOf<MultipleOperationResultDto> (response, "response is MultipleOperationResultDto");
        }
        
        /// <summary>
        /// Test RemoveTagsMultiple
        /// </summary>
        [Test]
        public void RemoveTagsMultipleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //TagsDto body = null;
            //string fields = null;
            //var response = instance.RemoveTagsMultiple(buildLocator, body, fields);
            //Assert.IsInstanceOf<MultipleOperationResultDto> (response, "response is MultipleOperationResultDto");
        }
        
        /// <summary>
        /// Test ReplaceComment
        /// </summary>
        [Test]
        public void ReplaceCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string body = null;
            //instance.ReplaceComment(buildLocator, body);
            
        }
        
        /// <summary>
        /// Test ReplaceCommentMultiple
        /// </summary>
        [Test]
        public void ReplaceCommentMultipleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string body = null;
            //string fields = null;
            //var response = instance.ReplaceCommentMultiple(buildLocator, body, fields);
            //Assert.IsInstanceOf<MultipleOperationResultDto> (response, "response is MultipleOperationResultDto");
        }
        
        /// <summary>
        /// Test ReplaceTagsOnBuild
        /// </summary>
        [Test]
        public void ReplaceTagsOnBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string locator = null;
            //TagsDto body = null;
            //string fields = null;
            //var response = instance.ReplaceTagsOnBuild(buildLocator, locator, body, fields);
            //Assert.IsInstanceOf<TagsDto> (response, "response is TagsDto");
        }
        
        /// <summary>
        /// Test ResetBuildFinishParameters
        /// </summary>
        [Test]
        public void ResetBuildFinishParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //instance.ResetBuildFinishParameters(buildLocator);
            
        }
        
        /// <summary>
        /// Test ServeAggregatedBuildStatus
        /// </summary>
        [Test]
        public void ServeAggregatedBuildStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //var response = instance.ServeAggregatedBuildStatus(buildLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServeAggregatedBuildStatusIcon
        /// </summary>
        [Test]
        public void ServeAggregatedBuildStatusIconTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string suffix = null;
            //instance.ServeAggregatedBuildStatusIcon(buildLocator, suffix);
            
        }
        
        /// <summary>
        /// Test ServeAllBuilds
        /// </summary>
        [Test]
        public void ServeAllBuildsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locator = null;
            //string fields = null;
            //var response = instance.ServeAllBuilds(locator, fields);
            //Assert.IsInstanceOf<BuildsDto> (response, "response is BuildsDto");
        }
        
        /// <summary>
        /// Test ServeBuild
        /// </summary>
        [Test]
        public void ServeBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.ServeBuild(buildLocator, fields);
            //Assert.IsInstanceOf<BuildDto> (response, "response is BuildDto");
        }
        
        /// <summary>
        /// Test ServeBuildActualParameters
        /// </summary>
        [Test]
        public void ServeBuildActualParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.ServeBuildActualParameters(buildLocator, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test ServeBuildFieldFromBuildOnly
        /// </summary>
        [Test]
        public void ServeBuildFieldFromBuildOnlyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string field = null;
            //var response = instance.ServeBuildFieldFromBuildOnly(buildLocator, field);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServeBuildRelatedIssues
        /// </summary>
        [Test]
        public void ServeBuildRelatedIssuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.ServeBuildRelatedIssues(buildLocator, fields);
            //Assert.IsInstanceOf<IssuesUsagesDto> (response, "response is IssuesUsagesDto");
        }
        
        /// <summary>
        /// Test ServeBuildStatisticValue
        /// </summary>
        [Test]
        public void ServeBuildStatisticValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string name = null;
            //var response = instance.ServeBuildStatisticValue(buildLocator, name);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServeBuildStatisticValues
        /// </summary>
        [Test]
        public void ServeBuildStatisticValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.ServeBuildStatisticValues(buildLocator, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test ServeBuildStatusIcon
        /// </summary>
        [Test]
        public void ServeBuildStatusIconTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string suffix = null;
            //instance.ServeBuildStatusIcon(buildLocator, suffix);
            
        }
        
        /// <summary>
        /// Test ServeSourceFile
        /// </summary>
        [Test]
        public void ServeSourceFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string fileName = null;
            //instance.ServeSourceFile(buildLocator, fileName);
            
        }
        
        /// <summary>
        /// Test ServeTagsFromBuild
        /// </summary>
        [Test]
        public void ServeTagsFromBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string locator = null;
            //string fields = null;
            //var response = instance.ServeTagsFromBuild(buildLocator, locator, fields);
            //Assert.IsInstanceOf<TagsDto> (response, "response is TagsDto");
        }
        
        /// <summary>
        /// Test SetBuildNumber
        /// </summary>
        [Test]
        public void SetBuildNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string body = null;
            //var response = instance.SetBuildNumber(buildLocator, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SetBuildPinData
        /// </summary>
        [Test]
        public void SetBuildPinDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //PinInfoDto body = null;
            //string fields = null;
            //var response = instance.SetBuildPinData(buildLocator, body, fields);
            //Assert.IsInstanceOf<PinInfoDto> (response, "response is PinInfoDto");
        }
        
        /// <summary>
        /// Test SetBuildStatusText
        /// </summary>
        [Test]
        public void SetBuildStatusTextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string body = null;
            //var response = instance.SetBuildStatusText(buildLocator, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SetFinishedTime
        /// </summary>
        [Test]
        public void SetFinishedTimeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string body = null;
            //var response = instance.SetFinishedTime(buildLocator, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SetFinishedTime1
        /// </summary>
        [Test]
        public void SetFinishedTime1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //var response = instance.SetFinishedTime1(buildLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SetVcsLabel
        /// </summary>
        [Test]
        public void SetVcsLabelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string locator = null;
            //string fields = null;
            //string body = null;
            //var response = instance.SetVcsLabel(buildLocator, locator, fields, body);
            //Assert.IsInstanceOf<VcsLabelsDto> (response, "response is VcsLabelsDto");
        }
        
    }

}
