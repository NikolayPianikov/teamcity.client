/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TeamCity.Client;
using TeamCity.Api;
using TeamCity.Model;

namespace TeamCity.Test
{
    /// <summary>
    ///  Class for testing AgentPoolApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AgentPoolApiTests
    {
        private AgentPoolApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AgentPoolApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AgentPoolApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AgentPoolApi
            //Assert.IsInstanceOfType(typeof(AgentPoolApi), instance, "instance is a AgentPoolApi");
        }

        
        /// <summary>
        /// Test AddAgent
        /// </summary>
        [Test]
        public void AddAgentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentPoolLocator = null;
            //AgentDto body = null;
            //string fields = null;
            //var response = instance.AddAgent(agentPoolLocator, body, fields);
            //Assert.IsInstanceOf<AgentDto> (response, "response is AgentDto");
        }
        
        /// <summary>
        /// Test AddProject
        /// </summary>
        [Test]
        public void AddProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentPoolLocator = null;
            //ProjectDto body = null;
            //var response = instance.AddProject(agentPoolLocator, body);
            //Assert.IsInstanceOf<ProjectDto> (response, "response is ProjectDto");
        }
        
        /// <summary>
        /// Test CreatePool
        /// </summary>
        [Test]
        public void CreatePoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AgentPoolDto body = null;
            //var response = instance.CreatePool(body);
            //Assert.IsInstanceOf<AgentPoolDto> (response, "response is AgentPoolDto");
        }
        
        /// <summary>
        /// Test DeletePool
        /// </summary>
        [Test]
        public void DeletePoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentPoolLocator = null;
            //instance.DeletePool(agentPoolLocator);
            
        }
        
        /// <summary>
        /// Test DeletePoolProject
        /// </summary>
        [Test]
        public void DeletePoolProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentPoolLocator = null;
            //string projectLocator = null;
            //instance.DeletePoolProject(agentPoolLocator, projectLocator);
            
        }
        
        /// <summary>
        /// Test DeleteProjects
        /// </summary>
        [Test]
        public void DeleteProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentPoolLocator = null;
            //instance.DeleteProjects(agentPoolLocator);
            
        }
        
        /// <summary>
        /// Test GetField
        /// </summary>
        [Test]
        public void GetFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentPoolLocator = null;
            //string field = null;
            //var response = instance.GetField(agentPoolLocator, field);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetPool
        /// </summary>
        [Test]
        public void GetPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentPoolLocator = null;
            //string fields = null;
            //var response = instance.GetPool(agentPoolLocator, fields);
            //Assert.IsInstanceOf<AgentPoolDto> (response, "response is AgentPoolDto");
        }
        
        /// <summary>
        /// Test GetPoolAgents
        /// </summary>
        [Test]
        public void GetPoolAgentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentPoolLocator = null;
            //string locator = null;
            //string fields = null;
            //var response = instance.GetPoolAgents(agentPoolLocator, locator, fields);
            //Assert.IsInstanceOf<AgentsDto> (response, "response is AgentsDto");
        }
        
        /// <summary>
        /// Test GetPoolProject
        /// </summary>
        [Test]
        public void GetPoolProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentPoolLocator = null;
            //string projectLocator = null;
            //string fields = null;
            //var response = instance.GetPoolProject(agentPoolLocator, projectLocator, fields);
            //Assert.IsInstanceOf<ProjectDto> (response, "response is ProjectDto");
        }
        
        /// <summary>
        /// Test GetPoolProjects
        /// </summary>
        [Test]
        public void GetPoolProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentPoolLocator = null;
            //string fields = null;
            //var response = instance.GetPoolProjects(agentPoolLocator, fields);
            //Assert.IsInstanceOf<ProjectsDto> (response, "response is ProjectsDto");
        }
        
        /// <summary>
        /// Test GetPools
        /// </summary>
        [Test]
        public void GetPoolsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locator = null;
            //string fields = null;
            //var response = instance.GetPools(locator, fields);
            //Assert.IsInstanceOf<AgentPoolsDto> (response, "response is AgentPoolsDto");
        }
        
        /// <summary>
        /// Test ReplaceProjects
        /// </summary>
        [Test]
        public void ReplaceProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentPoolLocator = null;
            //ProjectsDto body = null;
            //var response = instance.ReplaceProjects(agentPoolLocator, body);
            //Assert.IsInstanceOf<ProjectsDto> (response, "response is ProjectsDto");
        }
        
        /// <summary>
        /// Test SetField
        /// </summary>
        [Test]
        public void SetFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string agentPoolLocator = null;
            //string field = null;
            //string body = null;
            //var response = instance.SetField(agentPoolLocator, field, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
