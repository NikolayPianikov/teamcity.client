/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TeamCity.Client;
using TeamCity.Api;
using TeamCity.Model;

namespace TeamCity.Test
{
    /// <summary>
    ///  Class for testing GroupApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GroupApiTests
    {
        private GroupApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GroupApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GroupApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GroupApi
            //Assert.IsInstanceOfType(typeof(GroupApi), instance, "instance is a GroupApi");
        }

        
        /// <summary>
        /// Test AddGroup
        /// </summary>
        [Test]
        public void AddGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupDto body = null;
            //string fields = null;
            //var response = instance.AddGroup(body, fields);
            //Assert.IsInstanceOf<GroupDto> (response, "response is GroupDto");
        }
        
        /// <summary>
        /// Test AddRole
        /// </summary>
        [Test]
        public void AddRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //RoleDto body = null;
            //var response = instance.AddRole(groupLocator, body);
            //Assert.IsInstanceOf<RoleDto> (response, "response is RoleDto");
        }
        
        /// <summary>
        /// Test AddRoleSimple
        /// </summary>
        [Test]
        public void AddRoleSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //string roleId = null;
            //string scope = null;
            //var response = instance.AddRoleSimple(groupLocator, roleId, scope);
            //Assert.IsInstanceOf<RoleDto> (response, "response is RoleDto");
        }
        
        /// <summary>
        /// Test DeleteGroup
        /// </summary>
        [Test]
        public void DeleteGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //instance.DeleteGroup(groupLocator);
            
        }
        
        /// <summary>
        /// Test DeleteRole
        /// </summary>
        [Test]
        public void DeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //string roleId = null;
            //string scope = null;
            //instance.DeleteRole(groupLocator, roleId, scope);
            
        }
        
        /// <summary>
        /// Test GetParentGroups
        /// </summary>
        [Test]
        public void GetParentGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //string fields = null;
            //var response = instance.GetParentGroups(groupLocator, fields);
            //Assert.IsInstanceOf<GroupsDto> (response, "response is GroupsDto");
        }
        
        /// <summary>
        /// Test GetPermissions
        /// </summary>
        [Test]
        public void GetPermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //var response = instance.GetPermissions(groupLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetProperties
        /// </summary>
        [Test]
        public void GetPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //string fields = null;
            //var response = instance.GetProperties(groupLocator, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test ListRole
        /// </summary>
        [Test]
        public void ListRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //string roleId = null;
            //string scope = null;
            //var response = instance.ListRole(groupLocator, roleId, scope);
            //Assert.IsInstanceOf<RoleDto> (response, "response is RoleDto");
        }
        
        /// <summary>
        /// Test ListRoles
        /// </summary>
        [Test]
        public void ListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //var response = instance.ListRoles(groupLocator);
            //Assert.IsInstanceOf<RolesDto> (response, "response is RolesDto");
        }
        
        /// <summary>
        /// Test PutUserProperty
        /// </summary>
        [Test]
        public void PutUserPropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //string name = null;
            //string body = null;
            //var response = instance.PutUserProperty(groupLocator, name, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test RemoveUserProperty
        /// </summary>
        [Test]
        public void RemoveUserPropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //string name = null;
            //instance.RemoveUserProperty(groupLocator, name);
            
        }
        
        /// <summary>
        /// Test ServeGroup
        /// </summary>
        [Test]
        public void ServeGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //string fields = null;
            //var response = instance.ServeGroup(groupLocator, fields);
            //Assert.IsInstanceOf<GroupDto> (response, "response is GroupDto");
        }
        
        /// <summary>
        /// Test ServeGroups
        /// </summary>
        [Test]
        public void ServeGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fields = null;
            //var response = instance.ServeGroups(fields);
            //Assert.IsInstanceOf<GroupsDto> (response, "response is GroupsDto");
        }
        
        /// <summary>
        /// Test ServeUserProperties
        /// </summary>
        [Test]
        public void ServeUserPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //string name = null;
            //var response = instance.ServeUserProperties(groupLocator, name);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SetParentGroups
        /// </summary>
        [Test]
        public void SetParentGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //GroupsDto body = null;
            //string fields = null;
            //var response = instance.SetParentGroups(groupLocator, body, fields);
            //Assert.IsInstanceOf<GroupsDto> (response, "response is GroupsDto");
        }
        
        /// <summary>
        /// Test SetRoles
        /// </summary>
        [Test]
        public void SetRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupLocator = null;
            //RolesDto body = null;
            //var response = instance.SetRoles(groupLocator, body);
            //Assert.IsInstanceOf<RolesDto> (response, "response is RolesDto");
        }
        
    }

}
