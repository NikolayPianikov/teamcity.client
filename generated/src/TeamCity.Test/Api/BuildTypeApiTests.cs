/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TeamCity.Client;
using TeamCity.Api;
using TeamCity.Model;

namespace TeamCity.Test
{
    /// <summary>
    ///  Class for testing BuildTypeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BuildTypeApiTests
    {
        private BuildTypeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BuildTypeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BuildTypeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BuildTypeApi
            //Assert.IsInstanceOfType(typeof(BuildTypeApi), instance, "instance is a BuildTypeApi");
        }

        
        /// <summary>
        /// Test AddAgentRequirement
        /// </summary>
        [Test]
        public void AddAgentRequirementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //AgentRequirementDto body = null;
            //var response = instance.AddAgentRequirement(btLocator, fields, body);
            //Assert.IsInstanceOf<AgentRequirementDto> (response, "response is AgentRequirementDto");
        }
        
        /// <summary>
        /// Test AddArtifactDep
        /// </summary>
        [Test]
        public void AddArtifactDepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //ArtifactDependencyDto body = null;
            //var response = instance.AddArtifactDep(btLocator, fields, body);
            //Assert.IsInstanceOf<ArtifactDependencyDto> (response, "response is ArtifactDependencyDto");
        }
        
        /// <summary>
        /// Test AddBuildType
        /// </summary>
        [Test]
        public void AddBuildTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BuildTypeDto body = null;
            //string fields = null;
            //var response = instance.AddBuildType(body, fields);
            //Assert.IsInstanceOf<BuildTypeDto> (response, "response is BuildTypeDto");
        }
        
        /// <summary>
        /// Test AddFeature
        /// </summary>
        [Test]
        public void AddFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //FeatureDto body = null;
            //var response = instance.AddFeature(btLocator, fields, body);
            //Assert.IsInstanceOf<FeatureDto> (response, "response is FeatureDto");
        }
        
        /// <summary>
        /// Test AddFeatureParameter
        /// </summary>
        [Test]
        public void AddFeatureParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string featureId = null;
            //string parameterName = null;
            //string body = null;
            //var response = instance.AddFeatureParameter(btLocator, featureId, parameterName, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AddSnapshotDep
        /// </summary>
        [Test]
        public void AddSnapshotDepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //SnapshotDependencyDto body = null;
            //var response = instance.AddSnapshotDep(btLocator, fields, body);
            //Assert.IsInstanceOf<SnapshotDependencyDto> (response, "response is SnapshotDependencyDto");
        }
        
        /// <summary>
        /// Test AddStep
        /// </summary>
        [Test]
        public void AddStepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //StepDto body = null;
            //var response = instance.AddStep(btLocator, fields, body);
            //Assert.IsInstanceOf<StepDto> (response, "response is StepDto");
        }
        
        /// <summary>
        /// Test AddStepParameter
        /// </summary>
        [Test]
        public void AddStepParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string stepId = null;
            //string parameterName = null;
            //string body = null;
            //var response = instance.AddStepParameter(btLocator, stepId, parameterName, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AddTemplate
        /// </summary>
        [Test]
        public void AddTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //BuildTypeDto body = null;
            //bool? optimizeSettings = null;
            //string fields = null;
            //var response = instance.AddTemplate(btLocator, body, optimizeSettings, fields);
            //Assert.IsInstanceOf<BuildTypeDto> (response, "response is BuildTypeDto");
        }
        
        /// <summary>
        /// Test AddTrigger
        /// </summary>
        [Test]
        public void AddTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //TriggerDto body = null;
            //var response = instance.AddTrigger(btLocator, fields, body);
            //Assert.IsInstanceOf<TriggerDto> (response, "response is TriggerDto");
        }
        
        /// <summary>
        /// Test AddVcsRootEntry
        /// </summary>
        [Test]
        public void AddVcsRootEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //VcsRootEntryDto body = null;
            //string fields = null;
            //var response = instance.AddVcsRootEntry(btLocator, body, fields);
            //Assert.IsInstanceOf<VcsRootEntryDto> (response, "response is VcsRootEntryDto");
        }
        
        /// <summary>
        /// Test ChangeArtifactDepSetting
        /// </summary>
        [Test]
        public void ChangeArtifactDepSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string artifactDepLocator = null;
            //string fieldName = null;
            //string body = null;
            //var response = instance.ChangeArtifactDepSetting(btLocator, artifactDepLocator, fieldName, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ChangeFeatureSetting
        /// </summary>
        [Test]
        public void ChangeFeatureSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string featureId = null;
            //string name = null;
            //string body = null;
            //var response = instance.ChangeFeatureSetting(btLocator, featureId, name, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ChangeRequirementSetting
        /// </summary>
        [Test]
        public void ChangeRequirementSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string agentRequirementLocator = null;
            //string fieldName = null;
            //string body = null;
            //var response = instance.ChangeRequirementSetting(btLocator, agentRequirementLocator, fieldName, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ChangeStepSetting
        /// </summary>
        [Test]
        public void ChangeStepSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string stepId = null;
            //string fieldName = null;
            //string body = null;
            //var response = instance.ChangeStepSetting(btLocator, stepId, fieldName, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ChangeTriggerSetting
        /// </summary>
        [Test]
        public void ChangeTriggerSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string triggerLocator = null;
            //string fieldName = null;
            //string body = null;
            //var response = instance.ChangeTriggerSetting(btLocator, triggerLocator, fieldName, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteAgentRequirement
        /// </summary>
        [Test]
        public void DeleteAgentRequirementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string agentRequirementLocator = null;
            //instance.DeleteAgentRequirement(btLocator, agentRequirementLocator);
            
        }
        
        /// <summary>
        /// Test DeleteAllParameters
        /// </summary>
        [Test]
        public void DeleteAllParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //instance.DeleteAllParameters(btLocator);
            
        }
        
        /// <summary>
        /// Test DeleteArtifactDep
        /// </summary>
        [Test]
        public void DeleteArtifactDepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string artifactDepLocator = null;
            //instance.DeleteArtifactDep(btLocator, artifactDepLocator);
            
        }
        
        /// <summary>
        /// Test DeleteBuildType
        /// </summary>
        [Test]
        public void DeleteBuildTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //instance.DeleteBuildType(btLocator);
            
        }
        
        /// <summary>
        /// Test DeleteFeature
        /// </summary>
        [Test]
        public void DeleteFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string featureId = null;
            //instance.DeleteFeature(btLocator, featureId);
            
        }
        
        /// <summary>
        /// Test DeleteParameter
        /// </summary>
        [Test]
        public void DeleteParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string btLocator = null;
            //instance.DeleteParameter(name, btLocator);
            
        }
        
        /// <summary>
        /// Test DeleteSnapshotDep
        /// </summary>
        [Test]
        public void DeleteSnapshotDepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string snapshotDepLocator = null;
            //instance.DeleteSnapshotDep(btLocator, snapshotDepLocator);
            
        }
        
        /// <summary>
        /// Test DeleteStep
        /// </summary>
        [Test]
        public void DeleteStepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string stepId = null;
            //instance.DeleteStep(btLocator, stepId);
            
        }
        
        /// <summary>
        /// Test DeleteTrigger
        /// </summary>
        [Test]
        public void DeleteTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string triggerLocator = null;
            //instance.DeleteTrigger(btLocator, triggerLocator);
            
        }
        
        /// <summary>
        /// Test DeleteVcsRootEntry
        /// </summary>
        [Test]
        public void DeleteVcsRootEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string vcsRootLocator = null;
            //instance.DeleteVcsRootEntry(btLocator, vcsRootLocator);
            
        }
        
        /// <summary>
        /// Test GetAgentRequirement
        /// </summary>
        [Test]
        public void GetAgentRequirementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string agentRequirementLocator = null;
            //string fields = null;
            //var response = instance.GetAgentRequirement(btLocator, agentRequirementLocator, fields);
            //Assert.IsInstanceOf<AgentRequirementDto> (response, "response is AgentRequirementDto");
        }
        
        /// <summary>
        /// Test GetAgentRequirements
        /// </summary>
        [Test]
        public void GetAgentRequirementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.GetAgentRequirements(btLocator, fields);
            //Assert.IsInstanceOf<AgentRequirementsDto> (response, "response is AgentRequirementsDto");
        }
        
        /// <summary>
        /// Test GetAliases
        /// </summary>
        [Test]
        public void GetAliasesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string field = null;
            //var response = instance.GetAliases(btLocator, field);
            //Assert.IsInstanceOf<ItemsDto> (response, "response is ItemsDto");
        }
        
        /// <summary>
        /// Test GetArtifactDep
        /// </summary>
        [Test]
        public void GetArtifactDepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string artifactDepLocator = null;
            //string fields = null;
            //var response = instance.GetArtifactDep(btLocator, artifactDepLocator, fields);
            //Assert.IsInstanceOf<ArtifactDependencyDto> (response, "response is ArtifactDependencyDto");
        }
        
        /// <summary>
        /// Test GetArtifactDepSetting
        /// </summary>
        [Test]
        public void GetArtifactDepSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string artifactDepLocator = null;
            //string fieldName = null;
            //var response = instance.GetArtifactDepSetting(btLocator, artifactDepLocator, fieldName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetArtifactDeps
        /// </summary>
        [Test]
        public void GetArtifactDepsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.GetArtifactDeps(btLocator, fields);
            //Assert.IsInstanceOf<ArtifactDependenciesDto> (response, "response is ArtifactDependenciesDto");
        }
        
        /// <summary>
        /// Test GetBuildTypes
        /// </summary>
        [Test]
        public void GetBuildTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locator = null;
            //string fields = null;
            //var response = instance.GetBuildTypes(locator, fields);
            //Assert.IsInstanceOf<BuildTypesDto> (response, "response is BuildTypesDto");
        }
        
        /// <summary>
        /// Test GetChildren2
        /// </summary>
        [Test]
        public void GetChildren2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string btLocator = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //bool? resolveParameters = null;
            //var response = instance.GetChildren2(path, btLocator, basePath, locator, fields, resolveParameters);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetChildrenAlias2
        /// </summary>
        [Test]
        public void GetChildrenAlias2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string btLocator = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //bool? resolveParameters = null;
            //var response = instance.GetChildrenAlias2(path, btLocator, basePath, locator, fields, resolveParameters);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetContent2
        /// </summary>
        [Test]
        public void GetContent2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string btLocator = null;
            //string responseBuilder = null;
            //bool? resolveParameters = null;
            //instance.GetContent2(path, btLocator, responseBuilder, resolveParameters);
            
        }
        
        /// <summary>
        /// Test GetContentAlias2
        /// </summary>
        [Test]
        public void GetContentAlias2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string btLocator = null;
            //bool? resolveParameters = null;
            //instance.GetContentAlias2(path, btLocator, resolveParameters);
            
        }
        
        /// <summary>
        /// Test GetCurrentVcsInstances
        /// </summary>
        [Test]
        public void GetCurrentVcsInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.GetCurrentVcsInstances(btLocator, fields);
            //Assert.IsInstanceOf<VcsRootInstancesDto> (response, "response is VcsRootInstancesDto");
        }
        
        /// <summary>
        /// Test GetCurrentVcsInstancesObsolete
        /// </summary>
        [Test]
        public void GetCurrentVcsInstancesObsoleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.GetCurrentVcsInstancesObsolete(btLocator, fields);
            //Assert.IsInstanceOf<VcsRootInstancesDto> (response, "response is VcsRootInstancesDto");
        }
        
        /// <summary>
        /// Test GetFeature
        /// </summary>
        [Test]
        public void GetFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string featureId = null;
            //string fields = null;
            //var response = instance.GetFeature(btLocator, featureId, fields);
            //Assert.IsInstanceOf<FeatureDto> (response, "response is FeatureDto");
        }
        
        /// <summary>
        /// Test GetFeatureParameter
        /// </summary>
        [Test]
        public void GetFeatureParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string featureId = null;
            //string parameterName = null;
            //var response = instance.GetFeatureParameter(btLocator, featureId, parameterName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetFeatureParameters
        /// </summary>
        [Test]
        public void GetFeatureParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string featureId = null;
            //string fields = null;
            //var response = instance.GetFeatureParameters(btLocator, featureId, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test GetFeatureSetting
        /// </summary>
        [Test]
        public void GetFeatureSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string featureId = null;
            //string name = null;
            //var response = instance.GetFeatureSetting(btLocator, featureId, name);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetFeatures
        /// </summary>
        [Test]
        public void GetFeaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.GetFeatures(btLocator, fields);
            //Assert.IsInstanceOf<FeaturesDto> (response, "response is FeaturesDto");
        }
        
        /// <summary>
        /// Test GetInvestigations
        /// </summary>
        [Test]
        public void GetInvestigationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.GetInvestigations(btLocator, fields);
            //Assert.IsInstanceOf<InvestigationsDto> (response, "response is InvestigationsDto");
        }
        
        /// <summary>
        /// Test GetMetadata2
        /// </summary>
        [Test]
        public void GetMetadata2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string btLocator = null;
            //string fields = null;
            //bool? resolveParameters = null;
            //var response = instance.GetMetadata2(path, btLocator, fields, resolveParameters);
            //Assert.IsInstanceOf<FileDto> (response, "response is FileDto");
        }
        
        /// <summary>
        /// Test GetParameter1
        /// </summary>
        [Test]
        public void GetParameter1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string btLocator = null;
            //string fields = null;
            //var response = instance.GetParameter1(name, btLocator, fields);
            //Assert.IsInstanceOf<PropertyDto> (response, "response is PropertyDto");
        }
        
        /// <summary>
        /// Test GetParameterType
        /// </summary>
        [Test]
        public void GetParameterTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string btLocator = null;
            //var response = instance.GetParameterType(name, btLocator);
            //Assert.IsInstanceOf<TypeDto> (response, "response is TypeDto");
        }
        
        /// <summary>
        /// Test GetParameterTypeRawValue
        /// </summary>
        [Test]
        public void GetParameterTypeRawValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string btLocator = null;
            //var response = instance.GetParameterTypeRawValue(name, btLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetParameterValueLong
        /// </summary>
        [Test]
        public void GetParameterValueLongTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string btLocator = null;
            //var response = instance.GetParameterValueLong(name, btLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetParameters
        /// </summary>
        [Test]
        public void GetParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string locator = null;
            //string fields = null;
            //var response = instance.GetParameters(btLocator, locator, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test GetRequirementSetting
        /// </summary>
        [Test]
        public void GetRequirementSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string agentRequirementLocator = null;
            //string fieldName = null;
            //var response = instance.GetRequirementSetting(btLocator, agentRequirementLocator, fieldName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetRoot2
        /// </summary>
        [Test]
        public void GetRoot2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //bool? resolveParameters = null;
            //var response = instance.GetRoot2(btLocator, basePath, locator, fields, resolveParameters);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetSettingsFile
        /// </summary>
        [Test]
        public void GetSettingsFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //var response = instance.GetSettingsFile(btLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetSnapshotDep
        /// </summary>
        [Test]
        public void GetSnapshotDepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string snapshotDepLocator = null;
            //string fields = null;
            //var response = instance.GetSnapshotDep(btLocator, snapshotDepLocator, fields);
            //Assert.IsInstanceOf<SnapshotDependencyDto> (response, "response is SnapshotDependencyDto");
        }
        
        /// <summary>
        /// Test GetSnapshotDeps
        /// </summary>
        [Test]
        public void GetSnapshotDepsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.GetSnapshotDeps(btLocator, fields);
            //Assert.IsInstanceOf<SnapshotDependenciesDto> (response, "response is SnapshotDependenciesDto");
        }
        
        /// <summary>
        /// Test GetStep
        /// </summary>
        [Test]
        public void GetStepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string stepId = null;
            //string fields = null;
            //var response = instance.GetStep(btLocator, stepId, fields);
            //Assert.IsInstanceOf<StepDto> (response, "response is StepDto");
        }
        
        /// <summary>
        /// Test GetStepParameter
        /// </summary>
        [Test]
        public void GetStepParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string stepId = null;
            //string parameterName = null;
            //var response = instance.GetStepParameter(btLocator, stepId, parameterName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetStepParameters
        /// </summary>
        [Test]
        public void GetStepParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string stepId = null;
            //string fields = null;
            //var response = instance.GetStepParameters(btLocator, stepId, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test GetStepSetting
        /// </summary>
        [Test]
        public void GetStepSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string stepId = null;
            //string fieldName = null;
            //var response = instance.GetStepSetting(btLocator, stepId, fieldName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetSteps
        /// </summary>
        [Test]
        public void GetStepsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.GetSteps(btLocator, fields);
            //Assert.IsInstanceOf<StepsDto> (response, "response is StepsDto");
        }
        
        /// <summary>
        /// Test GetTemplate
        /// </summary>
        [Test]
        public void GetTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string templateLocator = null;
            //string fields = null;
            //var response = instance.GetTemplate(btLocator, templateLocator, fields);
            //Assert.IsInstanceOf<BuildTypeDto> (response, "response is BuildTypeDto");
        }
        
        /// <summary>
        /// Test GetTemplates
        /// </summary>
        [Test]
        public void GetTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.GetTemplates(btLocator, fields);
            //Assert.IsInstanceOf<BuildTypesDto> (response, "response is BuildTypesDto");
        }
        
        /// <summary>
        /// Test GetTrigger
        /// </summary>
        [Test]
        public void GetTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string triggerLocator = null;
            //string fields = null;
            //var response = instance.GetTrigger(btLocator, triggerLocator, fields);
            //Assert.IsInstanceOf<TriggerDto> (response, "response is TriggerDto");
        }
        
        /// <summary>
        /// Test GetTriggerSetting
        /// </summary>
        [Test]
        public void GetTriggerSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string triggerLocator = null;
            //string fieldName = null;
            //var response = instance.GetTriggerSetting(btLocator, triggerLocator, fieldName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetTriggers
        /// </summary>
        [Test]
        public void GetTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.GetTriggers(btLocator, fields);
            //Assert.IsInstanceOf<TriggersDto> (response, "response is TriggersDto");
        }
        
        /// <summary>
        /// Test GetVcsRootEntries
        /// </summary>
        [Test]
        public void GetVcsRootEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.GetVcsRootEntries(btLocator, fields);
            //Assert.IsInstanceOf<VcsRootEntriesDto> (response, "response is VcsRootEntriesDto");
        }
        
        /// <summary>
        /// Test GetVcsRootEntry
        /// </summary>
        [Test]
        public void GetVcsRootEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string vcsRootLocator = null;
            //string fields = null;
            //var response = instance.GetVcsRootEntry(btLocator, vcsRootLocator, fields);
            //Assert.IsInstanceOf<VcsRootEntryDto> (response, "response is VcsRootEntryDto");
        }
        
        /// <summary>
        /// Test GetVcsRootEntryCheckoutRules
        /// </summary>
        [Test]
        public void GetVcsRootEntryCheckoutRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string vcsRootLocator = null;
            //var response = instance.GetVcsRootEntryCheckoutRules(btLocator, vcsRootLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetZipped2
        /// </summary>
        [Test]
        public void GetZipped2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string btLocator = null;
            //string basePath = null;
            //string locator = null;
            //string name = null;
            //bool? resolveParameters = null;
            //instance.GetZipped2(path, btLocator, basePath, locator, name, resolveParameters);
            
        }
        
        /// <summary>
        /// Test RemoveAllTemplates
        /// </summary>
        [Test]
        public void RemoveAllTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //bool? inlineSettings = null;
            //instance.RemoveAllTemplates(btLocator, inlineSettings);
            
        }
        
        /// <summary>
        /// Test RemoveTemplate
        /// </summary>
        [Test]
        public void RemoveTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string templateLocator = null;
            //bool? inlineSettings = null;
            //instance.RemoveTemplate(btLocator, templateLocator, inlineSettings);
            
        }
        
        /// <summary>
        /// Test ReplaceAgentRequirement
        /// </summary>
        [Test]
        public void ReplaceAgentRequirementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string agentRequirementLocator = null;
            //string fields = null;
            //AgentRequirementDto body = null;
            //var response = instance.ReplaceAgentRequirement(btLocator, agentRequirementLocator, fields, body);
            //Assert.IsInstanceOf<AgentRequirementDto> (response, "response is AgentRequirementDto");
        }
        
        /// <summary>
        /// Test ReplaceAgentRequirements
        /// </summary>
        [Test]
        public void ReplaceAgentRequirementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //AgentRequirementsDto body = null;
            //var response = instance.ReplaceAgentRequirements(btLocator, fields, body);
            //Assert.IsInstanceOf<AgentRequirementsDto> (response, "response is AgentRequirementsDto");
        }
        
        /// <summary>
        /// Test ReplaceArtifactDep
        /// </summary>
        [Test]
        public void ReplaceArtifactDepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string artifactDepLocator = null;
            //string fields = null;
            //ArtifactDependencyDto body = null;
            //var response = instance.ReplaceArtifactDep(btLocator, artifactDepLocator, fields, body);
            //Assert.IsInstanceOf<ArtifactDependencyDto> (response, "response is ArtifactDependencyDto");
        }
        
        /// <summary>
        /// Test ReplaceArtifactDeps
        /// </summary>
        [Test]
        public void ReplaceArtifactDepsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //ArtifactDependenciesDto body = null;
            //var response = instance.ReplaceArtifactDeps(btLocator, fields, body);
            //Assert.IsInstanceOf<ArtifactDependenciesDto> (response, "response is ArtifactDependenciesDto");
        }
        
        /// <summary>
        /// Test ReplaceFeature
        /// </summary>
        [Test]
        public void ReplaceFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string featureId = null;
            //string fields = null;
            //FeatureDto body = null;
            //var response = instance.ReplaceFeature(btLocator, featureId, fields, body);
            //Assert.IsInstanceOf<FeatureDto> (response, "response is FeatureDto");
        }
        
        /// <summary>
        /// Test ReplaceFeatureParameters
        /// </summary>
        [Test]
        public void ReplaceFeatureParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string featureId = null;
            //PropertiesDto body = null;
            //string fields = null;
            //var response = instance.ReplaceFeatureParameters(btLocator, featureId, body, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test ReplaceFeatures
        /// </summary>
        [Test]
        public void ReplaceFeaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //FeaturesDto body = null;
            //var response = instance.ReplaceFeatures(btLocator, fields, body);
            //Assert.IsInstanceOf<FeaturesDto> (response, "response is FeaturesDto");
        }
        
        /// <summary>
        /// Test ReplaceSnapshotDep
        /// </summary>
        [Test]
        public void ReplaceSnapshotDepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string snapshotDepLocator = null;
            //string fields = null;
            //SnapshotDependencyDto body = null;
            //var response = instance.ReplaceSnapshotDep(btLocator, snapshotDepLocator, fields, body);
            //Assert.IsInstanceOf<SnapshotDependencyDto> (response, "response is SnapshotDependencyDto");
        }
        
        /// <summary>
        /// Test ReplaceSnapshotDeps
        /// </summary>
        [Test]
        public void ReplaceSnapshotDepsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //SnapshotDependenciesDto body = null;
            //var response = instance.ReplaceSnapshotDeps(btLocator, fields, body);
            //Assert.IsInstanceOf<SnapshotDependenciesDto> (response, "response is SnapshotDependenciesDto");
        }
        
        /// <summary>
        /// Test ReplaceStep
        /// </summary>
        [Test]
        public void ReplaceStepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string stepId = null;
            //string fields = null;
            //StepDto body = null;
            //var response = instance.ReplaceStep(btLocator, stepId, fields, body);
            //Assert.IsInstanceOf<StepDto> (response, "response is StepDto");
        }
        
        /// <summary>
        /// Test ReplaceStepParameters
        /// </summary>
        [Test]
        public void ReplaceStepParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string stepId = null;
            //PropertiesDto body = null;
            //string fields = null;
            //var response = instance.ReplaceStepParameters(btLocator, stepId, body, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test ReplaceSteps
        /// </summary>
        [Test]
        public void ReplaceStepsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //StepsDto body = null;
            //var response = instance.ReplaceSteps(btLocator, fields, body);
            //Assert.IsInstanceOf<StepsDto> (response, "response is StepsDto");
        }
        
        /// <summary>
        /// Test ReplaceTrigger
        /// </summary>
        [Test]
        public void ReplaceTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string triggerLocator = null;
            //string fields = null;
            //TriggerDto body = null;
            //var response = instance.ReplaceTrigger(btLocator, triggerLocator, fields, body);
            //Assert.IsInstanceOf<TriggerDto> (response, "response is TriggerDto");
        }
        
        /// <summary>
        /// Test ReplaceTriggers
        /// </summary>
        [Test]
        public void ReplaceTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //TriggersDto body = null;
            //var response = instance.ReplaceTriggers(btLocator, fields, body);
            //Assert.IsInstanceOf<TriggersDto> (response, "response is TriggersDto");
        }
        
        /// <summary>
        /// Test ReplaceVcsRootEntries
        /// </summary>
        [Test]
        public void ReplaceVcsRootEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //VcsRootEntriesDto body = null;
            //string fields = null;
            //var response = instance.ReplaceVcsRootEntries(btLocator, body, fields);
            //Assert.IsInstanceOf<VcsRootEntriesDto> (response, "response is VcsRootEntriesDto");
        }
        
        /// <summary>
        /// Test ServeBranches
        /// </summary>
        [Test]
        public void ServeBranchesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string locator = null;
            //string fields = null;
            //var response = instance.ServeBranches(btLocator, locator, fields);
            //Assert.IsInstanceOf<BranchesDto> (response, "response is BranchesDto");
        }
        
        /// <summary>
        /// Test ServeBuildField
        /// </summary>
        [Test]
        public void ServeBuildFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string buildLocator = null;
            //string field = null;
            //var response = instance.ServeBuildField(btLocator, buildLocator, field);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServeBuildTypeBuildsTags
        /// </summary>
        [Test]
        public void ServeBuildTypeBuildsTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string field = null;
            //var response = instance.ServeBuildTypeBuildsTags(btLocator, field);
            //Assert.IsInstanceOf<TagsDto> (response, "response is TagsDto");
        }
        
        /// <summary>
        /// Test ServeBuildTypeField
        /// </summary>
        [Test]
        public void ServeBuildTypeFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string field = null;
            //var response = instance.ServeBuildTypeField(btLocator, field);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServeBuildTypeXML
        /// </summary>
        [Test]
        public void ServeBuildTypeXMLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.ServeBuildTypeXML(btLocator, fields);
            //Assert.IsInstanceOf<BuildTypeDto> (response, "response is BuildTypeDto");
        }
        
        /// <summary>
        /// Test ServeBuildWithProject
        /// </summary>
        [Test]
        public void ServeBuildWithProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string buildLocator = null;
            //string fields = null;
            //var response = instance.ServeBuildWithProject(btLocator, buildLocator, fields);
            //Assert.IsInstanceOf<BuildDto> (response, "response is BuildDto");
        }
        
        /// <summary>
        /// Test ServeBuilds
        /// </summary>
        [Test]
        public void ServeBuildsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string fields = null;
            //var response = instance.ServeBuilds(btLocator, fields);
            //Assert.IsInstanceOf<BuildsDto> (response, "response is BuildsDto");
        }
        
        /// <summary>
        /// Test SetBuildTypeField
        /// </summary>
        [Test]
        public void SetBuildTypeFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string field = null;
            //string body = null;
            //var response = instance.SetBuildTypeField(btLocator, field, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SetParameter
        /// </summary>
        [Test]
        public void SetParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string btLocator = null;
            //PropertyDto body = null;
            //string fields = null;
            //var response = instance.SetParameter(name, btLocator, body, fields);
            //Assert.IsInstanceOf<PropertyDto> (response, "response is PropertyDto");
        }
        
        /// <summary>
        /// Test SetParameter1
        /// </summary>
        [Test]
        public void SetParameter1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //PropertyDto body = null;
            //string fields = null;
            //var response = instance.SetParameter1(btLocator, body, fields);
            //Assert.IsInstanceOf<PropertyDto> (response, "response is PropertyDto");
        }
        
        /// <summary>
        /// Test SetParameterType
        /// </summary>
        [Test]
        public void SetParameterTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string btLocator = null;
            //TypeDto body = null;
            //var response = instance.SetParameterType(name, btLocator, body);
            //Assert.IsInstanceOf<TypeDto> (response, "response is TypeDto");
        }
        
        /// <summary>
        /// Test SetParameterTypeRawValue
        /// </summary>
        [Test]
        public void SetParameterTypeRawValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string btLocator = null;
            //string body = null;
            //var response = instance.SetParameterTypeRawValue(name, btLocator, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SetParameterValueLong
        /// </summary>
        [Test]
        public void SetParameterValueLongTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string btLocator = null;
            //string body = null;
            //var response = instance.SetParameterValueLong(name, btLocator, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SetParameters
        /// </summary>
        [Test]
        public void SetParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //PropertiesDto body = null;
            //string fields = null;
            //var response = instance.SetParameters(btLocator, body, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test SetTemplates
        /// </summary>
        [Test]
        public void SetTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //BuildTypesDto body = null;
            //bool? optimizeSettings = null;
            //string fields = null;
            //var response = instance.SetTemplates(btLocator, body, optimizeSettings, fields);
            //Assert.IsInstanceOf<BuildTypesDto> (response, "response is BuildTypesDto");
        }
        
        /// <summary>
        /// Test UpdateVcsRootEntry
        /// </summary>
        [Test]
        public void UpdateVcsRootEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string vcsRootLocator = null;
            //VcsRootEntryDto body = null;
            //string fields = null;
            //var response = instance.UpdateVcsRootEntry(btLocator, vcsRootLocator, body, fields);
            //Assert.IsInstanceOf<VcsRootEntryDto> (response, "response is VcsRootEntryDto");
        }
        
        /// <summary>
        /// Test UpdateVcsRootEntryCheckoutRules
        /// </summary>
        [Test]
        public void UpdateVcsRootEntryCheckoutRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string btLocator = null;
            //string vcsRootLocator = null;
            //string body = null;
            //var response = instance.UpdateVcsRootEntryCheckoutRules(btLocator, vcsRootLocator, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
