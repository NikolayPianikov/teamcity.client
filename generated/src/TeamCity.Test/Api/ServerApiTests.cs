/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TeamCity.Client;
using TeamCity.Api;
using TeamCity.Model;

namespace TeamCity.Test
{
    /// <summary>
    ///  Class for testing ServerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ServerApiTests
    {
        private ServerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ServerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ServerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ServerApi
            //Assert.IsInstanceOfType(typeof(ServerApi), instance, "instance is a ServerApi");
        }

        
        /// <summary>
        /// Test AddLicenseKeys
        /// </summary>
        [Test]
        public void AddLicenseKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //string fields = null;
            //var response = instance.AddLicenseKeys(body, fields);
            //Assert.IsInstanceOf<LicenseKeysDto> (response, "response is LicenseKeysDto");
        }
        
        /// <summary>
        /// Test DeleteLicenseKey
        /// </summary>
        [Test]
        public void DeleteLicenseKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string licenseKey = null;
            //instance.DeleteLicenseKey(licenseKey);
            
        }
        
        /// <summary>
        /// Test GetBackupStatus
        /// </summary>
        [Test]
        public void GetBackupStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BackupProcessManagerDto body = null;
            //var response = instance.GetBackupStatus(body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetChildren3
        /// </summary>
        [Test]
        public void GetChildren3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string areaId = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //var response = instance.GetChildren3(path, areaId, basePath, locator, fields);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetChildrenAlias3
        /// </summary>
        [Test]
        public void GetChildrenAlias3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string areaId = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //var response = instance.GetChildrenAlias3(path, areaId, basePath, locator, fields);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetContent3
        /// </summary>
        [Test]
        public void GetContent3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string areaId = null;
            //string responseBuilder = null;
            //instance.GetContent3(path, areaId, responseBuilder);
            
        }
        
        /// <summary>
        /// Test GetContentAlias3
        /// </summary>
        [Test]
        public void GetContentAlias3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string areaId = null;
            //instance.GetContentAlias3(path, areaId);
            
        }
        
        /// <summary>
        /// Test GetLicenseKey
        /// </summary>
        [Test]
        public void GetLicenseKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string licenseKey = null;
            //string fields = null;
            //var response = instance.GetLicenseKey(licenseKey, fields);
            //Assert.IsInstanceOf<LicenseKeyDto> (response, "response is LicenseKeyDto");
        }
        
        /// <summary>
        /// Test GetLicenseKeys
        /// </summary>
        [Test]
        public void GetLicenseKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fields = null;
            //var response = instance.GetLicenseKeys(fields);
            //Assert.IsInstanceOf<LicenseKeysDto> (response, "response is LicenseKeysDto");
        }
        
        /// <summary>
        /// Test GetLicensingData
        /// </summary>
        [Test]
        public void GetLicensingDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fields = null;
            //var response = instance.GetLicensingData(fields);
            //Assert.IsInstanceOf<LicensingDataDto> (response, "response is LicensingDataDto");
        }
        
        /// <summary>
        /// Test GetMetadata3
        /// </summary>
        [Test]
        public void GetMetadata3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string areaId = null;
            //string fields = null;
            //var response = instance.GetMetadata3(path, areaId, fields);
            //Assert.IsInstanceOf<FileDto> (response, "response is FileDto");
        }
        
        /// <summary>
        /// Test GetRoot3
        /// </summary>
        [Test]
        public void GetRoot3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string areaId = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //var response = instance.GetRoot3(areaId, basePath, locator, fields);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetZipped3
        /// </summary>
        [Test]
        public void GetZipped3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string areaId = null;
            //string basePath = null;
            //string locator = null;
            //string name = null;
            //instance.GetZipped3(path, areaId, basePath, locator, name);
            
        }
        
        /// <summary>
        /// Test ServeMetrics
        /// </summary>
        [Test]
        public void ServeMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fields = null;
            //var response = instance.ServeMetrics(fields);
            //Assert.IsInstanceOf<MetricsDto> (response, "response is MetricsDto");
        }
        
        /// <summary>
        /// Test ServePlugins
        /// </summary>
        [Test]
        public void ServePluginsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fields = null;
            //var response = instance.ServePlugins(fields);
            //Assert.IsInstanceOf<PluginsDto> (response, "response is PluginsDto");
        }
        
        /// <summary>
        /// Test ServeServerInfo
        /// </summary>
        [Test]
        public void ServeServerInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fields = null;
            //var response = instance.ServeServerInfo(fields);
            //Assert.IsInstanceOf<ServerDto> (response, "response is ServerDto");
        }
        
        /// <summary>
        /// Test ServeServerVersion
        /// </summary>
        [Test]
        public void ServeServerVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string field = null;
            //var response = instance.ServeServerVersion(field);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test StartBackup
        /// </summary>
        [Test]
        public void StartBackupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileName = null;
            //bool? addTimestamp = null;
            //bool? includeConfigs = null;
            //bool? includeDatabase = null;
            //bool? includeBuildLogs = null;
            //bool? includePersonalChanges = null;
            //bool? includeRunningBuilds = null;
            //bool? includeSupplimentaryData = null;
            //BackupProcessManagerDto body = null;
            //var response = instance.StartBackup(fileName, addTimestamp, includeConfigs, includeDatabase, includeBuildLogs, includePersonalChanges, includeRunningBuilds, includeSupplimentaryData, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
