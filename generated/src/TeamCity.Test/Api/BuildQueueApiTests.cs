/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TeamCity.Client;
using TeamCity.Api;
using TeamCity.Model;

namespace TeamCity.Test
{
    /// <summary>
    ///  Class for testing BuildQueueApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BuildQueueApiTests
    {
        private BuildQueueApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BuildQueueApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BuildQueueApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BuildQueueApi
            //Assert.IsInstanceOfType(typeof(BuildQueueApi), instance, "instance is a BuildQueueApi");
        }

        
        /// <summary>
        /// Test AddTags
        /// </summary>
        [Test]
        public void AddTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //TagsDto body = null;
            //instance.AddTags(buildLocator, body);
            
        }
        
        /// <summary>
        /// Test CancelBuild
        /// </summary>
        [Test]
        public void CancelBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queuedBuildLocator = null;
            //BuildCancelRequestDto body = null;
            //var response = instance.CancelBuild(queuedBuildLocator, body);
            //Assert.IsInstanceOf<BuildDto> (response, "response is BuildDto");
        }
        
        /// <summary>
        /// Test DeleteBuildsExperimental
        /// </summary>
        [Test]
        public void DeleteBuildsExperimentalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locator = null;
            //string fields = null;
            //instance.DeleteBuildsExperimental(locator, fields);
            
        }
        
        /// <summary>
        /// Test DeleteQueuedBuild
        /// </summary>
        [Test]
        public void DeleteQueuedBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queuedBuildLocator = null;
            //instance.DeleteQueuedBuild(queuedBuildLocator);
            
        }
        
        /// <summary>
        /// Test GetBuild
        /// </summary>
        [Test]
        public void GetBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queuedBuildLocator = null;
            //string fields = null;
            //var response = instance.GetBuild(queuedBuildLocator, fields);
            //Assert.IsInstanceOf<BuildDto> (response, "response is BuildDto");
        }
        
        /// <summary>
        /// Test GetBuildQueuePosition
        /// </summary>
        [Test]
        public void GetBuildQueuePositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queuePosition = null;
            //string fields = null;
            //var response = instance.GetBuildQueuePosition(queuePosition, fields);
            //Assert.IsInstanceOf<BuildDto> (response, "response is BuildDto");
        }
        
        /// <summary>
        /// Test GetBuilds
        /// </summary>
        [Test]
        public void GetBuildsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locator = null;
            //string fields = null;
            //var response = instance.GetBuilds(locator, fields);
            //Assert.IsInstanceOf<BuildsDto> (response, "response is BuildsDto");
        }
        
        /// <summary>
        /// Test QueueNewBuild
        /// </summary>
        [Test]
        public void QueueNewBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BuildDto body = null;
            //bool? moveToTop = null;
            //var response = instance.QueueNewBuild(body, moveToTop);
            //Assert.IsInstanceOf<BuildDto> (response, "response is BuildDto");
        }
        
        /// <summary>
        /// Test ReplaceBuilds
        /// </summary>
        [Test]
        public void ReplaceBuildsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BuildsDto body = null;
            //string fields = null;
            //var response = instance.ReplaceBuilds(body, fields);
            //Assert.IsInstanceOf<BuildsDto> (response, "response is BuildsDto");
        }
        
        /// <summary>
        /// Test ReplaceTags
        /// </summary>
        [Test]
        public void ReplaceTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string locator = null;
            //TagsDto body = null;
            //string fields = null;
            //var response = instance.ReplaceTags(buildLocator, locator, body, fields);
            //Assert.IsInstanceOf<TagsDto> (response, "response is TagsDto");
        }
        
        /// <summary>
        /// Test ServeBuildFieldByBuildOnly
        /// </summary>
        [Test]
        public void ServeBuildFieldByBuildOnlyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string field = null;
            //var response = instance.ServeBuildFieldByBuildOnly(buildLocator, field);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServeCompatibleAgents
        /// </summary>
        [Test]
        public void ServeCompatibleAgentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queuedBuildLocator = null;
            //string fields = null;
            //var response = instance.ServeCompatibleAgents(queuedBuildLocator, fields);
            //Assert.IsInstanceOf<AgentsDto> (response, "response is AgentsDto");
        }
        
        /// <summary>
        /// Test ServeTags
        /// </summary>
        [Test]
        public void ServeTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string buildLocator = null;
            //string locator = null;
            //string fields = null;
            //var response = instance.ServeTags(buildLocator, locator, fields);
            //Assert.IsInstanceOf<TagsDto> (response, "response is TagsDto");
        }
        
        /// <summary>
        /// Test SetBuildQueueOrder
        /// </summary>
        [Test]
        public void SetBuildQueueOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BuildsDto body = null;
            //string fields = null;
            //var response = instance.SetBuildQueueOrder(body, fields);
            //Assert.IsInstanceOf<BuildsDto> (response, "response is BuildsDto");
        }
        
        /// <summary>
        /// Test SetBuildQueuePosition
        /// </summary>
        [Test]
        public void SetBuildQueuePositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queuePosition = null;
            //BuildDto body = null;
            //string fields = null;
            //var response = instance.SetBuildQueuePosition(queuePosition, body, fields);
            //Assert.IsInstanceOf<BuildDto> (response, "response is BuildDto");
        }
        
    }

}
