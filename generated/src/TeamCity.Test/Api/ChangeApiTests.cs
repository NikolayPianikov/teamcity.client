/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TeamCity.Client;
using TeamCity.Api;
using TeamCity.Model;

namespace TeamCity.Test
{
    /// <summary>
    ///  Class for testing ChangeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ChangeApiTests
    {
        private ChangeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ChangeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ChangeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ChangeApi
            //Assert.IsInstanceOfType(typeof(ChangeApi), instance, "instance is a ChangeApi");
        }

        
        /// <summary>
        /// Test GetChangeAttributes
        /// </summary>
        [Test]
        public void GetChangeAttributesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string changeLocator = null;
            //string fields = null;
            //var response = instance.GetChangeAttributes(changeLocator, fields);
            //Assert.IsInstanceOf<EntriesDto> (response, "response is EntriesDto");
        }
        
        /// <summary>
        /// Test GetChangeDuplicates
        /// </summary>
        [Test]
        public void GetChangeDuplicatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string changeLocator = null;
            //string fields = null;
            //var response = instance.GetChangeDuplicates(changeLocator, fields);
            //Assert.IsInstanceOf<ChangesDto> (response, "response is ChangesDto");
        }
        
        /// <summary>
        /// Test GetChangeField
        /// </summary>
        [Test]
        public void GetChangeFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string changeLocator = null;
            //string field = null;
            //var response = instance.GetChangeField(changeLocator, field);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetChangeFirstBuilds
        /// </summary>
        [Test]
        public void GetChangeFirstBuildsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string changeLocator = null;
            //string fields = null;
            //var response = instance.GetChangeFirstBuilds(changeLocator, fields);
            //Assert.IsInstanceOf<BuildsDto> (response, "response is BuildsDto");
        }
        
        /// <summary>
        /// Test GetChangeIssue
        /// </summary>
        [Test]
        public void GetChangeIssueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string changeLocator = null;
            //var response = instance.GetChangeIssue(changeLocator);
            //Assert.IsInstanceOf<IssuesDto> (response, "response is IssuesDto");
        }
        
        /// <summary>
        /// Test GetChangeParentRevisions
        /// </summary>
        [Test]
        public void GetChangeParentRevisionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string changeLocator = null;
            //var response = instance.GetChangeParentRevisions(changeLocator);
            //Assert.IsInstanceOf<ItemsDto> (response, "response is ItemsDto");
        }
        
        /// <summary>
        /// Test GetChangeVCSRootInstance
        /// </summary>
        [Test]
        public void GetChangeVCSRootInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string changeLocator = null;
            //string fields = null;
            //var response = instance.GetChangeVCSRootInstance(changeLocator, fields);
            //Assert.IsInstanceOf<VcsRootInstanceDto> (response, "response is VcsRootInstanceDto");
        }
        
        /// <summary>
        /// Test GetParentChanges
        /// </summary>
        [Test]
        public void GetParentChangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string changeLocator = null;
            //string fields = null;
            //var response = instance.GetParentChanges(changeLocator, fields);
            //Assert.IsInstanceOf<ChangesDto> (response, "response is ChangesDto");
        }
        
        /// <summary>
        /// Test GetRelatedBuildTypes
        /// </summary>
        [Test]
        public void GetRelatedBuildTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string changeLocator = null;
            //string fields = null;
            //var response = instance.GetRelatedBuildTypes(changeLocator, fields);
            //Assert.IsInstanceOf<BuildTypesDto> (response, "response is BuildTypesDto");
        }
        
        /// <summary>
        /// Test ServeChange
        /// </summary>
        [Test]
        public void ServeChangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string changeLocator = null;
            //string fields = null;
            //var response = instance.ServeChange(changeLocator, fields);
            //Assert.IsInstanceOf<ChangeDto> (response, "response is ChangeDto");
        }
        
        /// <summary>
        /// Test ServeChanges
        /// </summary>
        [Test]
        public void ServeChangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locator = null;
            //string fields = null;
            //var response = instance.ServeChanges(locator, fields);
            //Assert.IsInstanceOf<ChangesDto> (response, "response is ChangesDto");
        }
        
    }

}
