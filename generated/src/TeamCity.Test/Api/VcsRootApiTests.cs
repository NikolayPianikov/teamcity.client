/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TeamCity.Client;
using TeamCity.Api;
using TeamCity.Model;

namespace TeamCity.Test
{
    /// <summary>
    ///  Class for testing VcsRootApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class VcsRootApiTests
    {
        private VcsRootApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new VcsRootApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of VcsRootApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' VcsRootApi
            //Assert.IsInstanceOfType(typeof(VcsRootApi), instance, "instance is a VcsRootApi");
        }

        
        /// <summary>
        /// Test AddRoot
        /// </summary>
        [Test]
        public void AddRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //VcsRootDto body = null;
            //string fields = null;
            //var response = instance.AddRoot(body, fields);
            //Assert.IsInstanceOf<VcsRootDto> (response, "response is VcsRootDto");
        }
        
        /// <summary>
        /// Test ChangeProperties
        /// </summary>
        [Test]
        public void ChangePropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //PropertiesDto body = null;
            //string fields = null;
            //var response = instance.ChangeProperties(vcsRootLocator, body, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test DeleteAllProperties
        /// </summary>
        [Test]
        public void DeleteAllPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //instance.DeleteAllProperties(vcsRootLocator);
            
        }
        
        /// <summary>
        /// Test DeleteParameter2
        /// </summary>
        [Test]
        public void DeleteParameter2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //string name = null;
            //instance.DeleteParameter2(vcsRootLocator, name);
            
        }
        
        /// <summary>
        /// Test DeleteRoot
        /// </summary>
        [Test]
        public void DeleteRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //instance.DeleteRoot(vcsRootLocator);
            
        }
        
        /// <summary>
        /// Test GetSettingsFile2
        /// </summary>
        [Test]
        public void GetSettingsFile2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //var response = instance.GetSettingsFile2(vcsRootLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PutParameter
        /// </summary>
        [Test]
        public void PutParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //string name = null;
            //string body = null;
            //var response = instance.PutParameter(vcsRootLocator, name, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServeField
        /// </summary>
        [Test]
        public void ServeFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //string field = null;
            //var response = instance.ServeField(vcsRootLocator, field);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServeInstanceField1
        /// </summary>
        [Test]
        public void ServeInstanceField1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //string vcsRootInstanceLocator = null;
            //string field = null;
            //var response = instance.ServeInstanceField1(vcsRootLocator, vcsRootInstanceLocator, field);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServeProperties
        /// </summary>
        [Test]
        public void ServePropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //string fields = null;
            //var response = instance.ServeProperties(vcsRootLocator, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test ServeProperty
        /// </summary>
        [Test]
        public void ServePropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //string name = null;
            //var response = instance.ServeProperty(vcsRootLocator, name);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServeRoot1
        /// </summary>
        [Test]
        public void ServeRoot1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //string fields = null;
            //var response = instance.ServeRoot1(vcsRootLocator, fields);
            //Assert.IsInstanceOf<VcsRootDto> (response, "response is VcsRootDto");
        }
        
        /// <summary>
        /// Test ServeRootInstance
        /// </summary>
        [Test]
        public void ServeRootInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //string vcsRootInstanceLocator = null;
            //string fields = null;
            //var response = instance.ServeRootInstance(vcsRootLocator, vcsRootInstanceLocator, fields);
            //Assert.IsInstanceOf<VcsRootInstanceDto> (response, "response is VcsRootInstanceDto");
        }
        
        /// <summary>
        /// Test ServeRootInstanceProperties1
        /// </summary>
        [Test]
        public void ServeRootInstanceProperties1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //string vcsRootInstanceLocator = null;
            //string fields = null;
            //var response = instance.ServeRootInstanceProperties1(vcsRootLocator, vcsRootInstanceLocator, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test ServeRootInstances
        /// </summary>
        [Test]
        public void ServeRootInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //string fields = null;
            //var response = instance.ServeRootInstances(vcsRootLocator, fields);
            //Assert.IsInstanceOf<VcsRootInstancesDto> (response, "response is VcsRootInstancesDto");
        }
        
        /// <summary>
        /// Test ServeRoots
        /// </summary>
        [Test]
        public void ServeRootsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locator = null;
            //string fields = null;
            //var response = instance.ServeRoots(locator, fields);
            //Assert.IsInstanceOf<VcsRootsDto> (response, "response is VcsRootsDto");
        }
        
        /// <summary>
        /// Test SetField1
        /// </summary>
        [Test]
        public void SetField1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //string field = null;
            //string body = null;
            //var response = instance.SetField1(vcsRootLocator, field, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SetInstanceField1
        /// </summary>
        [Test]
        public void SetInstanceField1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootLocator = null;
            //string vcsRootInstanceLocator = null;
            //string field = null;
            //string body = null;
            //var response = instance.SetInstanceField1(vcsRootLocator, vcsRootInstanceLocator, field, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
