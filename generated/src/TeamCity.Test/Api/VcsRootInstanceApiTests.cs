/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TeamCity.Client;
using TeamCity.Api;
using TeamCity.Model;

namespace TeamCity.Test
{
    /// <summary>
    ///  Class for testing VcsRootInstanceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class VcsRootInstanceApiTests
    {
        private VcsRootInstanceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new VcsRootInstanceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of VcsRootInstanceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' VcsRootInstanceApi
            //Assert.IsInstanceOfType(typeof(VcsRootInstanceApi), instance, "instance is a VcsRootInstanceApi");
        }

        
        /// <summary>
        /// Test DeleteInstanceField
        /// </summary>
        [Test]
        public void DeleteInstanceFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootInstanceLocator = null;
            //string field = null;
            //instance.DeleteInstanceField(vcsRootInstanceLocator, field);
            
        }
        
        /// <summary>
        /// Test DeleteRepositoryState
        /// </summary>
        [Test]
        public void DeleteRepositoryStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootInstanceLocator = null;
            //instance.DeleteRepositoryState(vcsRootInstanceLocator);
            
        }
        
        /// <summary>
        /// Test GetChildren4
        /// </summary>
        [Test]
        public void GetChildren4Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string vcsRootInstanceLocator = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //var response = instance.GetChildren4(path, vcsRootInstanceLocator, basePath, locator, fields);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetChildrenAlias4
        /// </summary>
        [Test]
        public void GetChildrenAlias4Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string vcsRootInstanceLocator = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //var response = instance.GetChildrenAlias4(path, vcsRootInstanceLocator, basePath, locator, fields);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetContent4
        /// </summary>
        [Test]
        public void GetContent4Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string vcsRootInstanceLocator = null;
            //string responseBuilder = null;
            //instance.GetContent4(path, vcsRootInstanceLocator, responseBuilder);
            
        }
        
        /// <summary>
        /// Test GetContentAlias4
        /// </summary>
        [Test]
        public void GetContentAlias4Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string vcsRootInstanceLocator = null;
            //instance.GetContentAlias4(path, vcsRootInstanceLocator);
            
        }
        
        /// <summary>
        /// Test GetMetadata4
        /// </summary>
        [Test]
        public void GetMetadata4Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string vcsRootInstanceLocator = null;
            //string fields = null;
            //var response = instance.GetMetadata4(path, vcsRootInstanceLocator, fields);
            //Assert.IsInstanceOf<FileDto> (response, "response is FileDto");
        }
        
        /// <summary>
        /// Test GetRepositoryState
        /// </summary>
        [Test]
        public void GetRepositoryStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootInstanceLocator = null;
            //string fields = null;
            //var response = instance.GetRepositoryState(vcsRootInstanceLocator, fields);
            //Assert.IsInstanceOf<EntriesDto> (response, "response is EntriesDto");
        }
        
        /// <summary>
        /// Test GetRepositoryStateCreationDate
        /// </summary>
        [Test]
        public void GetRepositoryStateCreationDateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootInstanceLocator = null;
            //var response = instance.GetRepositoryStateCreationDate(vcsRootInstanceLocator);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetRoot4
        /// </summary>
        [Test]
        public void GetRoot4Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootInstanceLocator = null;
            //string basePath = null;
            //string locator = null;
            //string fields = null;
            //var response = instance.GetRoot4(vcsRootInstanceLocator, basePath, locator, fields);
            //Assert.IsInstanceOf<FilesDto> (response, "response is FilesDto");
        }
        
        /// <summary>
        /// Test GetZipped4
        /// </summary>
        [Test]
        public void GetZipped4Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string vcsRootInstanceLocator = null;
            //string basePath = null;
            //string locator = null;
            //string name = null;
            //instance.GetZipped4(path, vcsRootInstanceLocator, basePath, locator, name);
            
        }
        
        /// <summary>
        /// Test ScheduleCheckingForChanges
        /// </summary>
        [Test]
        public void ScheduleCheckingForChangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locator = null;
            //string requestor = null;
            //string fields = null;
            //var response = instance.ScheduleCheckingForChanges(locator, requestor, fields);
            //Assert.IsInstanceOf<VcsRootInstancesDto> (response, "response is VcsRootInstancesDto");
        }
        
        /// <summary>
        /// Test ScheduleCheckingForChanges1
        /// </summary>
        [Test]
        public void ScheduleCheckingForChanges1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locator = null;
            //bool? okOnNothingFound = null;
            //instance.ScheduleCheckingForChanges1(locator, okOnNothingFound);
            
        }
        
        /// <summary>
        /// Test ServeInstance6
        /// </summary>
        [Test]
        public void ServeInstance6Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootInstanceLocator = null;
            //string fields = null;
            //var response = instance.ServeInstance6(vcsRootInstanceLocator, fields);
            //Assert.IsInstanceOf<VcsRootInstanceDto> (response, "response is VcsRootInstanceDto");
        }
        
        /// <summary>
        /// Test ServeInstanceField
        /// </summary>
        [Test]
        public void ServeInstanceFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootInstanceLocator = null;
            //string field = null;
            //var response = instance.ServeInstanceField(vcsRootInstanceLocator, field);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServeInstances1
        /// </summary>
        [Test]
        public void ServeInstances1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locator = null;
            //string fields = null;
            //var response = instance.ServeInstances1(locator, fields);
            //Assert.IsInstanceOf<VcsRootInstancesDto> (response, "response is VcsRootInstancesDto");
        }
        
        /// <summary>
        /// Test ServeRootInstanceProperties
        /// </summary>
        [Test]
        public void ServeRootInstancePropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootInstanceLocator = null;
            //string fields = null;
            //var response = instance.ServeRootInstanceProperties(vcsRootInstanceLocator, fields);
            //Assert.IsInstanceOf<PropertiesDto> (response, "response is PropertiesDto");
        }
        
        /// <summary>
        /// Test SetInstanceField
        /// </summary>
        [Test]
        public void SetInstanceFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootInstanceLocator = null;
            //string field = null;
            //string body = null;
            //var response = instance.SetInstanceField(vcsRootInstanceLocator, field, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SetRepositoryState
        /// </summary>
        [Test]
        public void SetRepositoryStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vcsRootInstanceLocator = null;
            //EntriesDto body = null;
            //string fields = null;
            //var response = instance.SetRepositoryState(vcsRootInstanceLocator, body, fields);
            //Assert.IsInstanceOf<EntriesDto> (response, "response is EntriesDto");
        }
        
    }

}
