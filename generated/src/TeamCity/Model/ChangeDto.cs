/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// ChangeDto
    /// </summary>
    [DataContract]
    public partial class ChangeDto :  IEquatable<ChangeDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="version">version.</param>
        /// <param name="internalVersion">internalVersion.</param>
        /// <param name="username">username.</param>
        /// <param name="date">date.</param>
        /// <param name="registrationDate">registrationDate.</param>
        /// <param name="personal">personal.</param>
        /// <param name="href">href.</param>
        /// <param name="webUrl">webUrl.</param>
        /// <param name="comment">comment.</param>
        /// <param name="user">user.</param>
        /// <param name="files">files.</param>
        /// <param name="vcsRootInstance">vcsRootInstance.</param>
        /// <param name="parentChanges">parentChanges.</param>
        /// <param name="parentRevisions">parentRevisions.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="storesProjectSettings">storesProjectSettings.</param>
        /// <param name="locator">locator.</param>
        public ChangeDto(long? id = default(long?), string version = default(string), string internalVersion = default(string), string username = default(string), string date = default(string), string registrationDate = default(string), bool? personal = default(bool?), string href = default(string), string webUrl = default(string), string comment = default(string), UserDto user = default(UserDto), FileChangesDto files = default(FileChangesDto), VcsRootInstanceDto vcsRootInstance = default(VcsRootInstanceDto), ChangesDto parentChanges = default(ChangesDto), ItemsDto parentRevisions = default(ItemsDto), PropertiesDto attributes = default(PropertiesDto), bool? storesProjectSettings = default(bool?), string locator = default(string))
        {
            this.Id = id;
            this.Version = version;
            this.InternalVersion = internalVersion;
            this.Username = username;
            this.Date = date;
            this.RegistrationDate = registrationDate;
            this.Personal = personal;
            this.Href = href;
            this.WebUrl = webUrl;
            this.Comment = comment;
            this.User = user;
            this.Files = files;
            this.VcsRootInstance = vcsRootInstance;
            this.ParentChanges = parentChanges;
            this.ParentRevisions = parentRevisions;
            this.Attributes = attributes;
            this.StoresProjectSettings = storesProjectSettings;
            this.Locator = locator;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets InternalVersion
        /// </summary>
        [DataMember(Name="internalVersion", EmitDefaultValue=false)]
        public string InternalVersion { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationDate
        /// </summary>
        [DataMember(Name="registrationDate", EmitDefaultValue=false)]
        public string RegistrationDate { get; set; }

        /// <summary>
        /// Gets or Sets Personal
        /// </summary>
        [DataMember(Name="personal", EmitDefaultValue=false)]
        public bool? Personal { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets WebUrl
        /// </summary>
        [DataMember(Name="webUrl", EmitDefaultValue=false)]
        public string WebUrl { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserDto User { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public FileChangesDto Files { get; set; }

        /// <summary>
        /// Gets or Sets VcsRootInstance
        /// </summary>
        [DataMember(Name="vcsRootInstance", EmitDefaultValue=false)]
        public VcsRootInstanceDto VcsRootInstance { get; set; }

        /// <summary>
        /// Gets or Sets ParentChanges
        /// </summary>
        [DataMember(Name="parentChanges", EmitDefaultValue=false)]
        public ChangesDto ParentChanges { get; set; }

        /// <summary>
        /// Gets or Sets ParentRevisions
        /// </summary>
        [DataMember(Name="parentRevisions", EmitDefaultValue=false)]
        public ItemsDto ParentRevisions { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public PropertiesDto Attributes { get; set; }

        /// <summary>
        /// Gets or Sets StoresProjectSettings
        /// </summary>
        [DataMember(Name="storesProjectSettings", EmitDefaultValue=false)]
        public bool? StoresProjectSettings { get; set; }

        /// <summary>
        /// Gets or Sets Locator
        /// </summary>
        [DataMember(Name="locator", EmitDefaultValue=false)]
        public string Locator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  InternalVersion: ").Append(InternalVersion).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  Personal: ").Append(Personal).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  VcsRootInstance: ").Append(VcsRootInstance).Append("\n");
            sb.Append("  ParentChanges: ").Append(ParentChanges).Append("\n");
            sb.Append("  ParentRevisions: ").Append(ParentRevisions).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  StoresProjectSettings: ").Append(StoresProjectSettings).Append("\n");
            sb.Append("  Locator: ").Append(Locator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeDto);
        }

        /// <summary>
        /// Returns true if ChangeDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.InternalVersion == input.InternalVersion ||
                    (this.InternalVersion != null &&
                    this.InternalVersion.Equals(input.InternalVersion))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.RegistrationDate == input.RegistrationDate ||
                    (this.RegistrationDate != null &&
                    this.RegistrationDate.Equals(input.RegistrationDate))
                ) && 
                (
                    this.Personal == input.Personal ||
                    (this.Personal != null &&
                    this.Personal.Equals(input.Personal))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.WebUrl == input.WebUrl ||
                    (this.WebUrl != null &&
                    this.WebUrl.Equals(input.WebUrl))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Files == input.Files ||
                    (this.Files != null &&
                    this.Files.Equals(input.Files))
                ) && 
                (
                    this.VcsRootInstance == input.VcsRootInstance ||
                    (this.VcsRootInstance != null &&
                    this.VcsRootInstance.Equals(input.VcsRootInstance))
                ) && 
                (
                    this.ParentChanges == input.ParentChanges ||
                    (this.ParentChanges != null &&
                    this.ParentChanges.Equals(input.ParentChanges))
                ) && 
                (
                    this.ParentRevisions == input.ParentRevisions ||
                    (this.ParentRevisions != null &&
                    this.ParentRevisions.Equals(input.ParentRevisions))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.StoresProjectSettings == input.StoresProjectSettings ||
                    (this.StoresProjectSettings != null &&
                    this.StoresProjectSettings.Equals(input.StoresProjectSettings))
                ) && 
                (
                    this.Locator == input.Locator ||
                    (this.Locator != null &&
                    this.Locator.Equals(input.Locator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.InternalVersion != null)
                    hashCode = hashCode * 59 + this.InternalVersion.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.RegistrationDate != null)
                    hashCode = hashCode * 59 + this.RegistrationDate.GetHashCode();
                if (this.Personal != null)
                    hashCode = hashCode * 59 + this.Personal.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.WebUrl != null)
                    hashCode = hashCode * 59 + this.WebUrl.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                if (this.VcsRootInstance != null)
                    hashCode = hashCode * 59 + this.VcsRootInstance.GetHashCode();
                if (this.ParentChanges != null)
                    hashCode = hashCode * 59 + this.ParentChanges.GetHashCode();
                if (this.ParentRevisions != null)
                    hashCode = hashCode * 59 + this.ParentRevisions.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.StoresProjectSettings != null)
                    hashCode = hashCode * 59 + this.StoresProjectSettings.GetHashCode();
                if (this.Locator != null)
                    hashCode = hashCode * 59 + this.Locator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
