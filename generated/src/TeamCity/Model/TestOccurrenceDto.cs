/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// TestOccurrenceDto
    /// </summary>
    [DataContract]
    public partial class TestOccurrenceDto :  IEquatable<TestOccurrenceDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestOccurrenceDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="status">status.</param>
        /// <param name="ignored">ignored.</param>
        /// <param name="duration">duration.</param>
        /// <param name="runOrder">runOrder.</param>
        /// <param name="newFailure">newFailure.</param>
        /// <param name="muted">muted.</param>
        /// <param name="currentlyMuted">currentlyMuted.</param>
        /// <param name="currentlyInvestigated">currentlyInvestigated.</param>
        /// <param name="href">href.</param>
        /// <param name="ignoreDetails">ignoreDetails.</param>
        /// <param name="details">details.</param>
        /// <param name="test">test.</param>
        /// <param name="mute">mute.</param>
        /// <param name="build">build.</param>
        /// <param name="firstFailed">firstFailed.</param>
        /// <param name="nextFixed">nextFixed.</param>
        /// <param name="invocations">invocations.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="logAnchor">logAnchor.</param>
        public TestOccurrenceDto(string id = default(string), string name = default(string), string status = default(string), bool? ignored = default(bool?), int? duration = default(int?), string runOrder = default(string), bool? newFailure = default(bool?), bool? muted = default(bool?), bool? currentlyMuted = default(bool?), bool? currentlyInvestigated = default(bool?), string href = default(string), string ignoreDetails = default(string), string details = default(string), TestDto test = default(TestDto), MuteDto mute = default(MuteDto), BuildDto build = default(BuildDto), TestOccurrenceDto firstFailed = default(TestOccurrenceDto), TestOccurrenceDto nextFixed = default(TestOccurrenceDto), TestOccurrencesDto invocations = default(TestOccurrencesDto), TestRunMetadataDto metadata = default(TestRunMetadataDto), string logAnchor = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Status = status;
            this.Ignored = ignored;
            this.Duration = duration;
            this.RunOrder = runOrder;
            this.NewFailure = newFailure;
            this.Muted = muted;
            this.CurrentlyMuted = currentlyMuted;
            this.CurrentlyInvestigated = currentlyInvestigated;
            this.Href = href;
            this.IgnoreDetails = ignoreDetails;
            this.Details = details;
            this.Test = test;
            this.Mute = mute;
            this.Build = build;
            this.FirstFailed = firstFailed;
            this.NextFixed = nextFixed;
            this.Invocations = invocations;
            this.Metadata = metadata;
            this.LogAnchor = logAnchor;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Ignored
        /// </summary>
        [DataMember(Name="ignored", EmitDefaultValue=false)]
        public bool? Ignored { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// Gets or Sets RunOrder
        /// </summary>
        [DataMember(Name="runOrder", EmitDefaultValue=false)]
        public string RunOrder { get; set; }

        /// <summary>
        /// Gets or Sets NewFailure
        /// </summary>
        [DataMember(Name="newFailure", EmitDefaultValue=false)]
        public bool? NewFailure { get; set; }

        /// <summary>
        /// Gets or Sets Muted
        /// </summary>
        [DataMember(Name="muted", EmitDefaultValue=false)]
        public bool? Muted { get; set; }

        /// <summary>
        /// Gets or Sets CurrentlyMuted
        /// </summary>
        [DataMember(Name="currentlyMuted", EmitDefaultValue=false)]
        public bool? CurrentlyMuted { get; set; }

        /// <summary>
        /// Gets or Sets CurrentlyInvestigated
        /// </summary>
        [DataMember(Name="currentlyInvestigated", EmitDefaultValue=false)]
        public bool? CurrentlyInvestigated { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreDetails
        /// </summary>
        [DataMember(Name="ignoreDetails", EmitDefaultValue=false)]
        public string IgnoreDetails { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public string Details { get; set; }

        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public TestDto Test { get; set; }

        /// <summary>
        /// Gets or Sets Mute
        /// </summary>
        [DataMember(Name="mute", EmitDefaultValue=false)]
        public MuteDto Mute { get; set; }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name="build", EmitDefaultValue=false)]
        public BuildDto Build { get; set; }

        /// <summary>
        /// Gets or Sets FirstFailed
        /// </summary>
        [DataMember(Name="firstFailed", EmitDefaultValue=false)]
        public TestOccurrenceDto FirstFailed { get; set; }

        /// <summary>
        /// Gets or Sets NextFixed
        /// </summary>
        [DataMember(Name="nextFixed", EmitDefaultValue=false)]
        public TestOccurrenceDto NextFixed { get; set; }

        /// <summary>
        /// Gets or Sets Invocations
        /// </summary>
        [DataMember(Name="invocations", EmitDefaultValue=false)]
        public TestOccurrencesDto Invocations { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public TestRunMetadataDto Metadata { get; set; }

        /// <summary>
        /// Gets or Sets LogAnchor
        /// </summary>
        [DataMember(Name="logAnchor", EmitDefaultValue=false)]
        public string LogAnchor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestOccurrenceDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Ignored: ").Append(Ignored).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  RunOrder: ").Append(RunOrder).Append("\n");
            sb.Append("  NewFailure: ").Append(NewFailure).Append("\n");
            sb.Append("  Muted: ").Append(Muted).Append("\n");
            sb.Append("  CurrentlyMuted: ").Append(CurrentlyMuted).Append("\n");
            sb.Append("  CurrentlyInvestigated: ").Append(CurrentlyInvestigated).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  IgnoreDetails: ").Append(IgnoreDetails).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  Mute: ").Append(Mute).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  FirstFailed: ").Append(FirstFailed).Append("\n");
            sb.Append("  NextFixed: ").Append(NextFixed).Append("\n");
            sb.Append("  Invocations: ").Append(Invocations).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  LogAnchor: ").Append(LogAnchor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestOccurrenceDto);
        }

        /// <summary>
        /// Returns true if TestOccurrenceDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TestOccurrenceDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestOccurrenceDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Ignored == input.Ignored ||
                    (this.Ignored != null &&
                    this.Ignored.Equals(input.Ignored))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.RunOrder == input.RunOrder ||
                    (this.RunOrder != null &&
                    this.RunOrder.Equals(input.RunOrder))
                ) && 
                (
                    this.NewFailure == input.NewFailure ||
                    (this.NewFailure != null &&
                    this.NewFailure.Equals(input.NewFailure))
                ) && 
                (
                    this.Muted == input.Muted ||
                    (this.Muted != null &&
                    this.Muted.Equals(input.Muted))
                ) && 
                (
                    this.CurrentlyMuted == input.CurrentlyMuted ||
                    (this.CurrentlyMuted != null &&
                    this.CurrentlyMuted.Equals(input.CurrentlyMuted))
                ) && 
                (
                    this.CurrentlyInvestigated == input.CurrentlyInvestigated ||
                    (this.CurrentlyInvestigated != null &&
                    this.CurrentlyInvestigated.Equals(input.CurrentlyInvestigated))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.IgnoreDetails == input.IgnoreDetails ||
                    (this.IgnoreDetails != null &&
                    this.IgnoreDetails.Equals(input.IgnoreDetails))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Test == input.Test ||
                    (this.Test != null &&
                    this.Test.Equals(input.Test))
                ) && 
                (
                    this.Mute == input.Mute ||
                    (this.Mute != null &&
                    this.Mute.Equals(input.Mute))
                ) && 
                (
                    this.Build == input.Build ||
                    (this.Build != null &&
                    this.Build.Equals(input.Build))
                ) && 
                (
                    this.FirstFailed == input.FirstFailed ||
                    (this.FirstFailed != null &&
                    this.FirstFailed.Equals(input.FirstFailed))
                ) && 
                (
                    this.NextFixed == input.NextFixed ||
                    (this.NextFixed != null &&
                    this.NextFixed.Equals(input.NextFixed))
                ) && 
                (
                    this.Invocations == input.Invocations ||
                    (this.Invocations != null &&
                    this.Invocations.Equals(input.Invocations))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.LogAnchor == input.LogAnchor ||
                    (this.LogAnchor != null &&
                    this.LogAnchor.Equals(input.LogAnchor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Ignored != null)
                    hashCode = hashCode * 59 + this.Ignored.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.RunOrder != null)
                    hashCode = hashCode * 59 + this.RunOrder.GetHashCode();
                if (this.NewFailure != null)
                    hashCode = hashCode * 59 + this.NewFailure.GetHashCode();
                if (this.Muted != null)
                    hashCode = hashCode * 59 + this.Muted.GetHashCode();
                if (this.CurrentlyMuted != null)
                    hashCode = hashCode * 59 + this.CurrentlyMuted.GetHashCode();
                if (this.CurrentlyInvestigated != null)
                    hashCode = hashCode * 59 + this.CurrentlyInvestigated.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.IgnoreDetails != null)
                    hashCode = hashCode * 59 + this.IgnoreDetails.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Test != null)
                    hashCode = hashCode * 59 + this.Test.GetHashCode();
                if (this.Mute != null)
                    hashCode = hashCode * 59 + this.Mute.GetHashCode();
                if (this.Build != null)
                    hashCode = hashCode * 59 + this.Build.GetHashCode();
                if (this.FirstFailed != null)
                    hashCode = hashCode * 59 + this.FirstFailed.GetHashCode();
                if (this.NextFixed != null)
                    hashCode = hashCode * 59 + this.NextFixed.GetHashCode();
                if (this.Invocations != null)
                    hashCode = hashCode * 59 + this.Invocations.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.LogAnchor != null)
                    hashCode = hashCode * 59 + this.LogAnchor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
