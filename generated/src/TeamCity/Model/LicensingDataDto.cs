/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// LicensingDataDto
    /// </summary>
    [DataContract]
    public partial class LicensingDataDto :  IEquatable<LicensingDataDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicensingDataDto" /> class.
        /// </summary>
        /// <param name="licenseUseExceeded">licenseUseExceeded.</param>
        /// <param name="maxAgents">maxAgents.</param>
        /// <param name="unlimitedAgents">unlimitedAgents.</param>
        /// <param name="agentsLeft">agentsLeft.</param>
        /// <param name="maxBuildTypes">maxBuildTypes.</param>
        /// <param name="unlimitedBuildTypes">unlimitedBuildTypes.</param>
        /// <param name="buildTypesLeft">buildTypesLeft.</param>
        /// <param name="serverLicenseType">serverLicenseType.</param>
        /// <param name="serverEffectiveReleaseDate">serverEffectiveReleaseDate.</param>
        /// <param name="licenseKeys">licenseKeys.</param>
        public LicensingDataDto(bool? licenseUseExceeded = default(bool?), int? maxAgents = default(int?), bool? unlimitedAgents = default(bool?), int? agentsLeft = default(int?), int? maxBuildTypes = default(int?), bool? unlimitedBuildTypes = default(bool?), int? buildTypesLeft = default(int?), string serverLicenseType = default(string), string serverEffectiveReleaseDate = default(string), LicenseKeysDto licenseKeys = default(LicenseKeysDto))
        {
            this.LicenseUseExceeded = licenseUseExceeded;
            this.MaxAgents = maxAgents;
            this.UnlimitedAgents = unlimitedAgents;
            this.AgentsLeft = agentsLeft;
            this.MaxBuildTypes = maxBuildTypes;
            this.UnlimitedBuildTypes = unlimitedBuildTypes;
            this.BuildTypesLeft = buildTypesLeft;
            this.ServerLicenseType = serverLicenseType;
            this.ServerEffectiveReleaseDate = serverEffectiveReleaseDate;
            this.LicenseKeys = licenseKeys;
        }
        
        /// <summary>
        /// Gets or Sets LicenseUseExceeded
        /// </summary>
        [DataMember(Name="licenseUseExceeded", EmitDefaultValue=false)]
        public bool? LicenseUseExceeded { get; set; }

        /// <summary>
        /// Gets or Sets MaxAgents
        /// </summary>
        [DataMember(Name="maxAgents", EmitDefaultValue=false)]
        public int? MaxAgents { get; set; }

        /// <summary>
        /// Gets or Sets UnlimitedAgents
        /// </summary>
        [DataMember(Name="unlimitedAgents", EmitDefaultValue=false)]
        public bool? UnlimitedAgents { get; set; }

        /// <summary>
        /// Gets or Sets AgentsLeft
        /// </summary>
        [DataMember(Name="agentsLeft", EmitDefaultValue=false)]
        public int? AgentsLeft { get; set; }

        /// <summary>
        /// Gets or Sets MaxBuildTypes
        /// </summary>
        [DataMember(Name="maxBuildTypes", EmitDefaultValue=false)]
        public int? MaxBuildTypes { get; set; }

        /// <summary>
        /// Gets or Sets UnlimitedBuildTypes
        /// </summary>
        [DataMember(Name="unlimitedBuildTypes", EmitDefaultValue=false)]
        public bool? UnlimitedBuildTypes { get; set; }

        /// <summary>
        /// Gets or Sets BuildTypesLeft
        /// </summary>
        [DataMember(Name="buildTypesLeft", EmitDefaultValue=false)]
        public int? BuildTypesLeft { get; set; }

        /// <summary>
        /// Gets or Sets ServerLicenseType
        /// </summary>
        [DataMember(Name="serverLicenseType", EmitDefaultValue=false)]
        public string ServerLicenseType { get; set; }

        /// <summary>
        /// Gets or Sets ServerEffectiveReleaseDate
        /// </summary>
        [DataMember(Name="serverEffectiveReleaseDate", EmitDefaultValue=false)]
        public string ServerEffectiveReleaseDate { get; set; }

        /// <summary>
        /// Gets or Sets LicenseKeys
        /// </summary>
        [DataMember(Name="licenseKeys", EmitDefaultValue=false)]
        public LicenseKeysDto LicenseKeys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicensingDataDto {\n");
            sb.Append("  LicenseUseExceeded: ").Append(LicenseUseExceeded).Append("\n");
            sb.Append("  MaxAgents: ").Append(MaxAgents).Append("\n");
            sb.Append("  UnlimitedAgents: ").Append(UnlimitedAgents).Append("\n");
            sb.Append("  AgentsLeft: ").Append(AgentsLeft).Append("\n");
            sb.Append("  MaxBuildTypes: ").Append(MaxBuildTypes).Append("\n");
            sb.Append("  UnlimitedBuildTypes: ").Append(UnlimitedBuildTypes).Append("\n");
            sb.Append("  BuildTypesLeft: ").Append(BuildTypesLeft).Append("\n");
            sb.Append("  ServerLicenseType: ").Append(ServerLicenseType).Append("\n");
            sb.Append("  ServerEffectiveReleaseDate: ").Append(ServerEffectiveReleaseDate).Append("\n");
            sb.Append("  LicenseKeys: ").Append(LicenseKeys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicensingDataDto);
        }

        /// <summary>
        /// Returns true if LicensingDataDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LicensingDataDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicensingDataDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LicenseUseExceeded == input.LicenseUseExceeded ||
                    (this.LicenseUseExceeded != null &&
                    this.LicenseUseExceeded.Equals(input.LicenseUseExceeded))
                ) && 
                (
                    this.MaxAgents == input.MaxAgents ||
                    (this.MaxAgents != null &&
                    this.MaxAgents.Equals(input.MaxAgents))
                ) && 
                (
                    this.UnlimitedAgents == input.UnlimitedAgents ||
                    (this.UnlimitedAgents != null &&
                    this.UnlimitedAgents.Equals(input.UnlimitedAgents))
                ) && 
                (
                    this.AgentsLeft == input.AgentsLeft ||
                    (this.AgentsLeft != null &&
                    this.AgentsLeft.Equals(input.AgentsLeft))
                ) && 
                (
                    this.MaxBuildTypes == input.MaxBuildTypes ||
                    (this.MaxBuildTypes != null &&
                    this.MaxBuildTypes.Equals(input.MaxBuildTypes))
                ) && 
                (
                    this.UnlimitedBuildTypes == input.UnlimitedBuildTypes ||
                    (this.UnlimitedBuildTypes != null &&
                    this.UnlimitedBuildTypes.Equals(input.UnlimitedBuildTypes))
                ) && 
                (
                    this.BuildTypesLeft == input.BuildTypesLeft ||
                    (this.BuildTypesLeft != null &&
                    this.BuildTypesLeft.Equals(input.BuildTypesLeft))
                ) && 
                (
                    this.ServerLicenseType == input.ServerLicenseType ||
                    (this.ServerLicenseType != null &&
                    this.ServerLicenseType.Equals(input.ServerLicenseType))
                ) && 
                (
                    this.ServerEffectiveReleaseDate == input.ServerEffectiveReleaseDate ||
                    (this.ServerEffectiveReleaseDate != null &&
                    this.ServerEffectiveReleaseDate.Equals(input.ServerEffectiveReleaseDate))
                ) && 
                (
                    this.LicenseKeys == input.LicenseKeys ||
                    (this.LicenseKeys != null &&
                    this.LicenseKeys.Equals(input.LicenseKeys))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LicenseUseExceeded != null)
                    hashCode = hashCode * 59 + this.LicenseUseExceeded.GetHashCode();
                if (this.MaxAgents != null)
                    hashCode = hashCode * 59 + this.MaxAgents.GetHashCode();
                if (this.UnlimitedAgents != null)
                    hashCode = hashCode * 59 + this.UnlimitedAgents.GetHashCode();
                if (this.AgentsLeft != null)
                    hashCode = hashCode * 59 + this.AgentsLeft.GetHashCode();
                if (this.MaxBuildTypes != null)
                    hashCode = hashCode * 59 + this.MaxBuildTypes.GetHashCode();
                if (this.UnlimitedBuildTypes != null)
                    hashCode = hashCode * 59 + this.UnlimitedBuildTypes.GetHashCode();
                if (this.BuildTypesLeft != null)
                    hashCode = hashCode * 59 + this.BuildTypesLeft.GetHashCode();
                if (this.ServerLicenseType != null)
                    hashCode = hashCode * 59 + this.ServerLicenseType.GetHashCode();
                if (this.ServerEffectiveReleaseDate != null)
                    hashCode = hashCode * 59 + this.ServerEffectiveReleaseDate.GetHashCode();
                if (this.LicenseKeys != null)
                    hashCode = hashCode * 59 + this.LicenseKeys.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
