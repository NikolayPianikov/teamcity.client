/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// ServerDto
    /// </summary>
    [DataContract]
    public partial class ServerDto :  IEquatable<ServerDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerDto" /> class.
        /// </summary>
        /// <param name="version">version.</param>
        /// <param name="versionMajor">versionMajor.</param>
        /// <param name="versionMinor">versionMinor.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="currentTime">currentTime.</param>
        /// <param name="buildNumber">buildNumber.</param>
        /// <param name="buildDate">buildDate.</param>
        /// <param name="internalId">internalId.</param>
        /// <param name="role">role.</param>
        /// <param name="webUrl">webUrl.</param>
        /// <param name="projects">projects.</param>
        /// <param name="vcsRoots">vcsRoots.</param>
        /// <param name="builds">builds.</param>
        /// <param name="users">users.</param>
        /// <param name="userGroups">userGroups.</param>
        /// <param name="agents">agents.</param>
        /// <param name="buildQueue">buildQueue.</param>
        /// <param name="agentPools">agentPools.</param>
        /// <param name="investigations">investigations.</param>
        /// <param name="mutes">mutes.</param>
        public ServerDto(string version = default(string), int? versionMajor = default(int?), int? versionMinor = default(int?), string startTime = default(string), string currentTime = default(string), string buildNumber = default(string), string buildDate = default(string), string internalId = default(string), string role = default(string), string webUrl = default(string), HrefDto projects = default(HrefDto), HrefDto vcsRoots = default(HrefDto), HrefDto builds = default(HrefDto), HrefDto users = default(HrefDto), HrefDto userGroups = default(HrefDto), HrefDto agents = default(HrefDto), HrefDto buildQueue = default(HrefDto), HrefDto agentPools = default(HrefDto), HrefDto investigations = default(HrefDto), HrefDto mutes = default(HrefDto))
        {
            this.Version = version;
            this.VersionMajor = versionMajor;
            this.VersionMinor = versionMinor;
            this.StartTime = startTime;
            this.CurrentTime = currentTime;
            this.BuildNumber = buildNumber;
            this.BuildDate = buildDate;
            this.InternalId = internalId;
            this.Role = role;
            this.WebUrl = webUrl;
            this.Projects = projects;
            this.VcsRoots = vcsRoots;
            this.Builds = builds;
            this.Users = users;
            this.UserGroups = userGroups;
            this.Agents = agents;
            this.BuildQueue = buildQueue;
            this.AgentPools = agentPools;
            this.Investigations = investigations;
            this.Mutes = mutes;
        }
        
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets VersionMajor
        /// </summary>
        [DataMember(Name="versionMajor", EmitDefaultValue=false)]
        public int? VersionMajor { get; set; }

        /// <summary>
        /// Gets or Sets VersionMinor
        /// </summary>
        [DataMember(Name="versionMinor", EmitDefaultValue=false)]
        public int? VersionMinor { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets CurrentTime
        /// </summary>
        [DataMember(Name="currentTime", EmitDefaultValue=false)]
        public string CurrentTime { get; set; }

        /// <summary>
        /// Gets or Sets BuildNumber
        /// </summary>
        [DataMember(Name="buildNumber", EmitDefaultValue=false)]
        public string BuildNumber { get; set; }

        /// <summary>
        /// Gets or Sets BuildDate
        /// </summary>
        [DataMember(Name="buildDate", EmitDefaultValue=false)]
        public string BuildDate { get; set; }

        /// <summary>
        /// Gets or Sets InternalId
        /// </summary>
        [DataMember(Name="internalId", EmitDefaultValue=false)]
        public string InternalId { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// Gets or Sets WebUrl
        /// </summary>
        [DataMember(Name="webUrl", EmitDefaultValue=false)]
        public string WebUrl { get; set; }

        /// <summary>
        /// Gets or Sets Projects
        /// </summary>
        [DataMember(Name="projects", EmitDefaultValue=false)]
        public HrefDto Projects { get; set; }

        /// <summary>
        /// Gets or Sets VcsRoots
        /// </summary>
        [DataMember(Name="vcsRoots", EmitDefaultValue=false)]
        public HrefDto VcsRoots { get; set; }

        /// <summary>
        /// Gets or Sets Builds
        /// </summary>
        [DataMember(Name="builds", EmitDefaultValue=false)]
        public HrefDto Builds { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public HrefDto Users { get; set; }

        /// <summary>
        /// Gets or Sets UserGroups
        /// </summary>
        [DataMember(Name="userGroups", EmitDefaultValue=false)]
        public HrefDto UserGroups { get; set; }

        /// <summary>
        /// Gets or Sets Agents
        /// </summary>
        [DataMember(Name="agents", EmitDefaultValue=false)]
        public HrefDto Agents { get; set; }

        /// <summary>
        /// Gets or Sets BuildQueue
        /// </summary>
        [DataMember(Name="buildQueue", EmitDefaultValue=false)]
        public HrefDto BuildQueue { get; set; }

        /// <summary>
        /// Gets or Sets AgentPools
        /// </summary>
        [DataMember(Name="agentPools", EmitDefaultValue=false)]
        public HrefDto AgentPools { get; set; }

        /// <summary>
        /// Gets or Sets Investigations
        /// </summary>
        [DataMember(Name="investigations", EmitDefaultValue=false)]
        public HrefDto Investigations { get; set; }

        /// <summary>
        /// Gets or Sets Mutes
        /// </summary>
        [DataMember(Name="mutes", EmitDefaultValue=false)]
        public HrefDto Mutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServerDto {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  VersionMajor: ").Append(VersionMajor).Append("\n");
            sb.Append("  VersionMinor: ").Append(VersionMinor).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  CurrentTime: ").Append(CurrentTime).Append("\n");
            sb.Append("  BuildNumber: ").Append(BuildNumber).Append("\n");
            sb.Append("  BuildDate: ").Append(BuildDate).Append("\n");
            sb.Append("  InternalId: ").Append(InternalId).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  VcsRoots: ").Append(VcsRoots).Append("\n");
            sb.Append("  Builds: ").Append(Builds).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  UserGroups: ").Append(UserGroups).Append("\n");
            sb.Append("  Agents: ").Append(Agents).Append("\n");
            sb.Append("  BuildQueue: ").Append(BuildQueue).Append("\n");
            sb.Append("  AgentPools: ").Append(AgentPools).Append("\n");
            sb.Append("  Investigations: ").Append(Investigations).Append("\n");
            sb.Append("  Mutes: ").Append(Mutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServerDto);
        }

        /// <summary>
        /// Returns true if ServerDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ServerDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.VersionMajor == input.VersionMajor ||
                    (this.VersionMajor != null &&
                    this.VersionMajor.Equals(input.VersionMajor))
                ) && 
                (
                    this.VersionMinor == input.VersionMinor ||
                    (this.VersionMinor != null &&
                    this.VersionMinor.Equals(input.VersionMinor))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.CurrentTime == input.CurrentTime ||
                    (this.CurrentTime != null &&
                    this.CurrentTime.Equals(input.CurrentTime))
                ) && 
                (
                    this.BuildNumber == input.BuildNumber ||
                    (this.BuildNumber != null &&
                    this.BuildNumber.Equals(input.BuildNumber))
                ) && 
                (
                    this.BuildDate == input.BuildDate ||
                    (this.BuildDate != null &&
                    this.BuildDate.Equals(input.BuildDate))
                ) && 
                (
                    this.InternalId == input.InternalId ||
                    (this.InternalId != null &&
                    this.InternalId.Equals(input.InternalId))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.WebUrl == input.WebUrl ||
                    (this.WebUrl != null &&
                    this.WebUrl.Equals(input.WebUrl))
                ) && 
                (
                    this.Projects == input.Projects ||
                    (this.Projects != null &&
                    this.Projects.Equals(input.Projects))
                ) && 
                (
                    this.VcsRoots == input.VcsRoots ||
                    (this.VcsRoots != null &&
                    this.VcsRoots.Equals(input.VcsRoots))
                ) && 
                (
                    this.Builds == input.Builds ||
                    (this.Builds != null &&
                    this.Builds.Equals(input.Builds))
                ) && 
                (
                    this.Users == input.Users ||
                    (this.Users != null &&
                    this.Users.Equals(input.Users))
                ) && 
                (
                    this.UserGroups == input.UserGroups ||
                    (this.UserGroups != null &&
                    this.UserGroups.Equals(input.UserGroups))
                ) && 
                (
                    this.Agents == input.Agents ||
                    (this.Agents != null &&
                    this.Agents.Equals(input.Agents))
                ) && 
                (
                    this.BuildQueue == input.BuildQueue ||
                    (this.BuildQueue != null &&
                    this.BuildQueue.Equals(input.BuildQueue))
                ) && 
                (
                    this.AgentPools == input.AgentPools ||
                    (this.AgentPools != null &&
                    this.AgentPools.Equals(input.AgentPools))
                ) && 
                (
                    this.Investigations == input.Investigations ||
                    (this.Investigations != null &&
                    this.Investigations.Equals(input.Investigations))
                ) && 
                (
                    this.Mutes == input.Mutes ||
                    (this.Mutes != null &&
                    this.Mutes.Equals(input.Mutes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.VersionMajor != null)
                    hashCode = hashCode * 59 + this.VersionMajor.GetHashCode();
                if (this.VersionMinor != null)
                    hashCode = hashCode * 59 + this.VersionMinor.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.CurrentTime != null)
                    hashCode = hashCode * 59 + this.CurrentTime.GetHashCode();
                if (this.BuildNumber != null)
                    hashCode = hashCode * 59 + this.BuildNumber.GetHashCode();
                if (this.BuildDate != null)
                    hashCode = hashCode * 59 + this.BuildDate.GetHashCode();
                if (this.InternalId != null)
                    hashCode = hashCode * 59 + this.InternalId.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.WebUrl != null)
                    hashCode = hashCode * 59 + this.WebUrl.GetHashCode();
                if (this.Projects != null)
                    hashCode = hashCode * 59 + this.Projects.GetHashCode();
                if (this.VcsRoots != null)
                    hashCode = hashCode * 59 + this.VcsRoots.GetHashCode();
                if (this.Builds != null)
                    hashCode = hashCode * 59 + this.Builds.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.UserGroups != null)
                    hashCode = hashCode * 59 + this.UserGroups.GetHashCode();
                if (this.Agents != null)
                    hashCode = hashCode * 59 + this.Agents.GetHashCode();
                if (this.BuildQueue != null)
                    hashCode = hashCode * 59 + this.BuildQueue.GetHashCode();
                if (this.AgentPools != null)
                    hashCode = hashCode * 59 + this.AgentPools.GetHashCode();
                if (this.Investigations != null)
                    hashCode = hashCode * 59 + this.Investigations.GetHashCode();
                if (this.Mutes != null)
                    hashCode = hashCode * 59 + this.Mutes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
