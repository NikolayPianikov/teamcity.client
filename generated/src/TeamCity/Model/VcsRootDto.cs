/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// VcsRootDto
    /// </summary>
    [DataContract]
    public partial class VcsRootDto :  IEquatable<VcsRootDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VcsRootDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="internalId">internalId.</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="name">name.</param>
        /// <param name="vcsName">vcsName.</param>
        /// <param name="modificationCheckInterval">modificationCheckInterval.</param>
        /// <param name="href">href.</param>
        /// <param name="project">project.</param>
        /// <param name="properties">properties.</param>
        /// <param name="vcsRootInstances">vcsRootInstances.</param>
        /// <param name="repositoryIdStrings">repositoryIdStrings.</param>
        /// <param name="projectLocator">projectLocator.</param>
        /// <param name="locator">locator.</param>
        public VcsRootDto(string id = default(string), string internalId = default(string), string uuid = default(string), string name = default(string), string vcsName = default(string), int? modificationCheckInterval = default(int?), string href = default(string), ProjectDto project = default(ProjectDto), PropertiesDto properties = default(PropertiesDto), VcsRootInstancesDto vcsRootInstances = default(VcsRootInstancesDto), ItemsDto repositoryIdStrings = default(ItemsDto), string projectLocator = default(string), string locator = default(string))
        {
            this.Id = id;
            this.InternalId = internalId;
            this.Uuid = uuid;
            this.Name = name;
            this.VcsName = vcsName;
            this.ModificationCheckInterval = modificationCheckInterval;
            this.Href = href;
            this.Project = project;
            this.Properties = properties;
            this.VcsRootInstances = vcsRootInstances;
            this.RepositoryIdStrings = repositoryIdStrings;
            this.ProjectLocator = projectLocator;
            this.Locator = locator;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InternalId
        /// </summary>
        [DataMember(Name="internalId", EmitDefaultValue=false)]
        public string InternalId { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VcsName
        /// </summary>
        [DataMember(Name="vcsName", EmitDefaultValue=false)]
        public string VcsName { get; set; }

        /// <summary>
        /// Gets or Sets ModificationCheckInterval
        /// </summary>
        [DataMember(Name="modificationCheckInterval", EmitDefaultValue=false)]
        public int? ModificationCheckInterval { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="project", EmitDefaultValue=false)]
        public ProjectDto Project { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public PropertiesDto Properties { get; set; }

        /// <summary>
        /// Gets or Sets VcsRootInstances
        /// </summary>
        [DataMember(Name="vcsRootInstances", EmitDefaultValue=false)]
        public VcsRootInstancesDto VcsRootInstances { get; set; }

        /// <summary>
        /// Gets or Sets RepositoryIdStrings
        /// </summary>
        [DataMember(Name="repositoryIdStrings", EmitDefaultValue=false)]
        public ItemsDto RepositoryIdStrings { get; set; }

        /// <summary>
        /// Gets or Sets ProjectLocator
        /// </summary>
        [DataMember(Name="projectLocator", EmitDefaultValue=false)]
        public string ProjectLocator { get; set; }

        /// <summary>
        /// Gets or Sets Locator
        /// </summary>
        [DataMember(Name="locator", EmitDefaultValue=false)]
        public string Locator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VcsRootDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InternalId: ").Append(InternalId).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VcsName: ").Append(VcsName).Append("\n");
            sb.Append("  ModificationCheckInterval: ").Append(ModificationCheckInterval).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  VcsRootInstances: ").Append(VcsRootInstances).Append("\n");
            sb.Append("  RepositoryIdStrings: ").Append(RepositoryIdStrings).Append("\n");
            sb.Append("  ProjectLocator: ").Append(ProjectLocator).Append("\n");
            sb.Append("  Locator: ").Append(Locator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VcsRootDto);
        }

        /// <summary>
        /// Returns true if VcsRootDto instances are equal
        /// </summary>
        /// <param name="input">Instance of VcsRootDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VcsRootDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InternalId == input.InternalId ||
                    (this.InternalId != null &&
                    this.InternalId.Equals(input.InternalId))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.VcsName == input.VcsName ||
                    (this.VcsName != null &&
                    this.VcsName.Equals(input.VcsName))
                ) && 
                (
                    this.ModificationCheckInterval == input.ModificationCheckInterval ||
                    (this.ModificationCheckInterval != null &&
                    this.ModificationCheckInterval.Equals(input.ModificationCheckInterval))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.VcsRootInstances == input.VcsRootInstances ||
                    (this.VcsRootInstances != null &&
                    this.VcsRootInstances.Equals(input.VcsRootInstances))
                ) && 
                (
                    this.RepositoryIdStrings == input.RepositoryIdStrings ||
                    (this.RepositoryIdStrings != null &&
                    this.RepositoryIdStrings.Equals(input.RepositoryIdStrings))
                ) && 
                (
                    this.ProjectLocator == input.ProjectLocator ||
                    (this.ProjectLocator != null &&
                    this.ProjectLocator.Equals(input.ProjectLocator))
                ) && 
                (
                    this.Locator == input.Locator ||
                    (this.Locator != null &&
                    this.Locator.Equals(input.Locator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InternalId != null)
                    hashCode = hashCode * 59 + this.InternalId.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.VcsName != null)
                    hashCode = hashCode * 59 + this.VcsName.GetHashCode();
                if (this.ModificationCheckInterval != null)
                    hashCode = hashCode * 59 + this.ModificationCheckInterval.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.VcsRootInstances != null)
                    hashCode = hashCode * 59 + this.VcsRootInstances.GetHashCode();
                if (this.RepositoryIdStrings != null)
                    hashCode = hashCode * 59 + this.RepositoryIdStrings.GetHashCode();
                if (this.ProjectLocator != null)
                    hashCode = hashCode * 59 + this.ProjectLocator.GetHashCode();
                if (this.Locator != null)
                    hashCode = hashCode * 59 + this.Locator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
