/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// BuildTypeDto
    /// </summary>
    [DataContract]
    public partial class BuildTypeDto :  IEquatable<BuildTypeDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildTypeDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="internalId">internalId.</param>
        /// <param name="name">name.</param>
        /// <param name="templateFlag">templateFlag.</param>
        /// <param name="type">type.</param>
        /// <param name="paused">paused.</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="description">description.</param>
        /// <param name="projectName">projectName.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="projectInternalId">projectInternalId.</param>
        /// <param name="href">href.</param>
        /// <param name="webUrl">webUrl.</param>
        /// <param name="inherited">inherited.</param>
        /// <param name="links">links.</param>
        /// <param name="project">project.</param>
        /// <param name="templates">templates.</param>
        /// <param name="template">template.</param>
        /// <param name="vcsRootEntries">vcsRootEntries.</param>
        /// <param name="settings">settings.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="steps">steps.</param>
        /// <param name="features">features.</param>
        /// <param name="triggers">triggers.</param>
        /// <param name="snapshotDependencies">snapshotDependencies.</param>
        /// <param name="artifactDependencies">artifactDependencies.</param>
        /// <param name="agentRequirements">agentRequirements.</param>
        /// <param name="branches">branches.</param>
        /// <param name="builds">builds.</param>
        /// <param name="investigations">investigations.</param>
        /// <param name="compatibleAgents">compatibleAgents.</param>
        /// <param name="vcsRootInstances">vcsRootInstances.</param>
        /// <param name="locator">locator.</param>
        public BuildTypeDto(string id = default(string), string internalId = default(string), string name = default(string), bool? templateFlag = default(bool?), string type = default(string), bool? paused = default(bool?), string uuid = default(string), string description = default(string), string projectName = default(string), string projectId = default(string), string projectInternalId = default(string), string href = default(string), string webUrl = default(string), bool? inherited = default(bool?), LinksDto links = default(LinksDto), ProjectDto project = default(ProjectDto), BuildTypesDto templates = default(BuildTypesDto), BuildTypeDto template = default(BuildTypeDto), VcsRootEntriesDto vcsRootEntries = default(VcsRootEntriesDto), PropertiesDto settings = default(PropertiesDto), PropertiesDto parameters = default(PropertiesDto), StepsDto steps = default(StepsDto), FeaturesDto features = default(FeaturesDto), TriggersDto triggers = default(TriggersDto), SnapshotDependenciesDto snapshotDependencies = default(SnapshotDependenciesDto), ArtifactDependenciesDto artifactDependencies = default(ArtifactDependenciesDto), AgentRequirementsDto agentRequirements = default(AgentRequirementsDto), BranchesDto branches = default(BranchesDto), BuildsDto builds = default(BuildsDto), InvestigationsDto investigations = default(InvestigationsDto), AgentsDto compatibleAgents = default(AgentsDto), VcsRootInstancesDto vcsRootInstances = default(VcsRootInstancesDto), string locator = default(string))
        {
            this.Id = id;
            this.InternalId = internalId;
            this.Name = name;
            this.TemplateFlag = templateFlag;
            this.Type = type;
            this.Paused = paused;
            this.Uuid = uuid;
            this.Description = description;
            this.ProjectName = projectName;
            this.ProjectId = projectId;
            this.ProjectInternalId = projectInternalId;
            this.Href = href;
            this.WebUrl = webUrl;
            this.Inherited = inherited;
            this.Links = links;
            this.Project = project;
            this.Templates = templates;
            this.Template = template;
            this.VcsRootEntries = vcsRootEntries;
            this.Settings = settings;
            this.Parameters = parameters;
            this.Steps = steps;
            this.Features = features;
            this.Triggers = triggers;
            this.SnapshotDependencies = snapshotDependencies;
            this.ArtifactDependencies = artifactDependencies;
            this.AgentRequirements = agentRequirements;
            this.Branches = branches;
            this.Builds = builds;
            this.Investigations = investigations;
            this.CompatibleAgents = compatibleAgents;
            this.VcsRootInstances = vcsRootInstances;
            this.Locator = locator;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InternalId
        /// </summary>
        [DataMember(Name="internalId", EmitDefaultValue=false)]
        public string InternalId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TemplateFlag
        /// </summary>
        [DataMember(Name="templateFlag", EmitDefaultValue=false)]
        public bool? TemplateFlag { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Paused
        /// </summary>
        [DataMember(Name="paused", EmitDefaultValue=false)]
        public bool? Paused { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ProjectName
        /// </summary>
        [DataMember(Name="projectName", EmitDefaultValue=false)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectInternalId
        /// </summary>
        [DataMember(Name="projectInternalId", EmitDefaultValue=false)]
        public string ProjectInternalId { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets WebUrl
        /// </summary>
        [DataMember(Name="webUrl", EmitDefaultValue=false)]
        public string WebUrl { get; set; }

        /// <summary>
        /// Gets or Sets Inherited
        /// </summary>
        [DataMember(Name="inherited", EmitDefaultValue=false)]
        public bool? Inherited { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public LinksDto Links { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="project", EmitDefaultValue=false)]
        public ProjectDto Project { get; set; }

        /// <summary>
        /// Gets or Sets Templates
        /// </summary>
        [DataMember(Name="templates", EmitDefaultValue=false)]
        public BuildTypesDto Templates { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public BuildTypeDto Template { get; set; }

        /// <summary>
        /// Gets or Sets VcsRootEntries
        /// </summary>
        [DataMember(Name="vcs-root-entries", EmitDefaultValue=false)]
        public VcsRootEntriesDto VcsRootEntries { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public PropertiesDto Settings { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public PropertiesDto Parameters { get; set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [DataMember(Name="steps", EmitDefaultValue=false)]
        public StepsDto Steps { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public FeaturesDto Features { get; set; }

        /// <summary>
        /// Gets or Sets Triggers
        /// </summary>
        [DataMember(Name="triggers", EmitDefaultValue=false)]
        public TriggersDto Triggers { get; set; }

        /// <summary>
        /// Gets or Sets SnapshotDependencies
        /// </summary>
        [DataMember(Name="snapshot-dependencies", EmitDefaultValue=false)]
        public SnapshotDependenciesDto SnapshotDependencies { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactDependencies
        /// </summary>
        [DataMember(Name="artifact-dependencies", EmitDefaultValue=false)]
        public ArtifactDependenciesDto ArtifactDependencies { get; set; }

        /// <summary>
        /// Gets or Sets AgentRequirements
        /// </summary>
        [DataMember(Name="agent-requirements", EmitDefaultValue=false)]
        public AgentRequirementsDto AgentRequirements { get; set; }

        /// <summary>
        /// Gets or Sets Branches
        /// </summary>
        [DataMember(Name="branches", EmitDefaultValue=false)]
        public BranchesDto Branches { get; set; }

        /// <summary>
        /// Gets or Sets Builds
        /// </summary>
        [DataMember(Name="builds", EmitDefaultValue=false)]
        public BuildsDto Builds { get; set; }

        /// <summary>
        /// Gets or Sets Investigations
        /// </summary>
        [DataMember(Name="investigations", EmitDefaultValue=false)]
        public InvestigationsDto Investigations { get; set; }

        /// <summary>
        /// Gets or Sets CompatibleAgents
        /// </summary>
        [DataMember(Name="compatibleAgents", EmitDefaultValue=false)]
        public AgentsDto CompatibleAgents { get; set; }

        /// <summary>
        /// Gets or Sets VcsRootInstances
        /// </summary>
        [DataMember(Name="vcsRootInstances", EmitDefaultValue=false)]
        public VcsRootInstancesDto VcsRootInstances { get; set; }

        /// <summary>
        /// Gets or Sets Locator
        /// </summary>
        [DataMember(Name="locator", EmitDefaultValue=false)]
        public string Locator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildTypeDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InternalId: ").Append(InternalId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TemplateFlag: ").Append(TemplateFlag).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Paused: ").Append(Paused).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ProjectInternalId: ").Append(ProjectInternalId).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("  Inherited: ").Append(Inherited).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  VcsRootEntries: ").Append(VcsRootEntries).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("  SnapshotDependencies: ").Append(SnapshotDependencies).Append("\n");
            sb.Append("  ArtifactDependencies: ").Append(ArtifactDependencies).Append("\n");
            sb.Append("  AgentRequirements: ").Append(AgentRequirements).Append("\n");
            sb.Append("  Branches: ").Append(Branches).Append("\n");
            sb.Append("  Builds: ").Append(Builds).Append("\n");
            sb.Append("  Investigations: ").Append(Investigations).Append("\n");
            sb.Append("  CompatibleAgents: ").Append(CompatibleAgents).Append("\n");
            sb.Append("  VcsRootInstances: ").Append(VcsRootInstances).Append("\n");
            sb.Append("  Locator: ").Append(Locator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildTypeDto);
        }

        /// <summary>
        /// Returns true if BuildTypeDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildTypeDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildTypeDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InternalId == input.InternalId ||
                    (this.InternalId != null &&
                    this.InternalId.Equals(input.InternalId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TemplateFlag == input.TemplateFlag ||
                    (this.TemplateFlag != null &&
                    this.TemplateFlag.Equals(input.TemplateFlag))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Paused == input.Paused ||
                    (this.Paused != null &&
                    this.Paused.Equals(input.Paused))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.ProjectInternalId == input.ProjectInternalId ||
                    (this.ProjectInternalId != null &&
                    this.ProjectInternalId.Equals(input.ProjectInternalId))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.WebUrl == input.WebUrl ||
                    (this.WebUrl != null &&
                    this.WebUrl.Equals(input.WebUrl))
                ) && 
                (
                    this.Inherited == input.Inherited ||
                    (this.Inherited != null &&
                    this.Inherited.Equals(input.Inherited))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.Templates == input.Templates ||
                    (this.Templates != null &&
                    this.Templates.Equals(input.Templates))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.VcsRootEntries == input.VcsRootEntries ||
                    (this.VcsRootEntries != null &&
                    this.VcsRootEntries.Equals(input.VcsRootEntries))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.Steps == input.Steps ||
                    (this.Steps != null &&
                    this.Steps.Equals(input.Steps))
                ) && 
                (
                    this.Features == input.Features ||
                    (this.Features != null &&
                    this.Features.Equals(input.Features))
                ) && 
                (
                    this.Triggers == input.Triggers ||
                    (this.Triggers != null &&
                    this.Triggers.Equals(input.Triggers))
                ) && 
                (
                    this.SnapshotDependencies == input.SnapshotDependencies ||
                    (this.SnapshotDependencies != null &&
                    this.SnapshotDependencies.Equals(input.SnapshotDependencies))
                ) && 
                (
                    this.ArtifactDependencies == input.ArtifactDependencies ||
                    (this.ArtifactDependencies != null &&
                    this.ArtifactDependencies.Equals(input.ArtifactDependencies))
                ) && 
                (
                    this.AgentRequirements == input.AgentRequirements ||
                    (this.AgentRequirements != null &&
                    this.AgentRequirements.Equals(input.AgentRequirements))
                ) && 
                (
                    this.Branches == input.Branches ||
                    (this.Branches != null &&
                    this.Branches.Equals(input.Branches))
                ) && 
                (
                    this.Builds == input.Builds ||
                    (this.Builds != null &&
                    this.Builds.Equals(input.Builds))
                ) && 
                (
                    this.Investigations == input.Investigations ||
                    (this.Investigations != null &&
                    this.Investigations.Equals(input.Investigations))
                ) && 
                (
                    this.CompatibleAgents == input.CompatibleAgents ||
                    (this.CompatibleAgents != null &&
                    this.CompatibleAgents.Equals(input.CompatibleAgents))
                ) && 
                (
                    this.VcsRootInstances == input.VcsRootInstances ||
                    (this.VcsRootInstances != null &&
                    this.VcsRootInstances.Equals(input.VcsRootInstances))
                ) && 
                (
                    this.Locator == input.Locator ||
                    (this.Locator != null &&
                    this.Locator.Equals(input.Locator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InternalId != null)
                    hashCode = hashCode * 59 + this.InternalId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TemplateFlag != null)
                    hashCode = hashCode * 59 + this.TemplateFlag.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Paused != null)
                    hashCode = hashCode * 59 + this.Paused.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.ProjectInternalId != null)
                    hashCode = hashCode * 59 + this.ProjectInternalId.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.WebUrl != null)
                    hashCode = hashCode * 59 + this.WebUrl.GetHashCode();
                if (this.Inherited != null)
                    hashCode = hashCode * 59 + this.Inherited.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.Templates != null)
                    hashCode = hashCode * 59 + this.Templates.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.VcsRootEntries != null)
                    hashCode = hashCode * 59 + this.VcsRootEntries.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.Steps != null)
                    hashCode = hashCode * 59 + this.Steps.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.Triggers != null)
                    hashCode = hashCode * 59 + this.Triggers.GetHashCode();
                if (this.SnapshotDependencies != null)
                    hashCode = hashCode * 59 + this.SnapshotDependencies.GetHashCode();
                if (this.ArtifactDependencies != null)
                    hashCode = hashCode * 59 + this.ArtifactDependencies.GetHashCode();
                if (this.AgentRequirements != null)
                    hashCode = hashCode * 59 + this.AgentRequirements.GetHashCode();
                if (this.Branches != null)
                    hashCode = hashCode * 59 + this.Branches.GetHashCode();
                if (this.Builds != null)
                    hashCode = hashCode * 59 + this.Builds.GetHashCode();
                if (this.Investigations != null)
                    hashCode = hashCode * 59 + this.Investigations.GetHashCode();
                if (this.CompatibleAgents != null)
                    hashCode = hashCode * 59 + this.CompatibleAgents.GetHashCode();
                if (this.VcsRootInstances != null)
                    hashCode = hashCode * 59 + this.VcsRootInstances.GetHashCode();
                if (this.Locator != null)
                    hashCode = hashCode * 59 + this.Locator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
