/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// BackupProcessDto
    /// </summary>
    [DataContract]
    public partial class BackupProcessDto :  IEquatable<BackupProcessDto>, IValidatableObject
    {
        /// <summary>
        /// Defines ProcessKind
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessKindEnum
        {
            
            /// <summary>
            /// Enum Backup for value: Backup
            /// </summary>
            [EnumMember(Value = "Backup")]
            Backup = 1,
            
            /// <summary>
            /// Enum Restore for value: Restore
            /// </summary>
            [EnumMember(Value = "Restore")]
            Restore = 2,
            
            /// <summary>
            /// Enum Cleanup for value: Cleanup
            /// </summary>
            [EnumMember(Value = "Cleanup")]
            Cleanup = 3,
            
            /// <summary>
            /// Enum Import for value: Import
            /// </summary>
            [EnumMember(Value = "Import")]
            Import = 4
        }

        /// <summary>
        /// Gets or Sets ProcessKind
        /// </summary>
        [DataMember(Name="processKind", EmitDefaultValue=false)]
        public ProcessKindEnum? ProcessKind { get; set; }
        /// <summary>
        /// Defines ProgressStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProgressStatusEnum
        {
            
            /// <summary>
            /// Enum Running for value: Running
            /// </summary>
            [EnumMember(Value = "Running")]
            Running = 1,
            
            /// <summary>
            /// Enum Cancelling for value: Cancelling
            /// </summary>
            [EnumMember(Value = "Cancelling")]
            Cancelling = 2,
            
            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 3,
            
            /// <summary>
            /// Enum Finished for value: Finished
            /// </summary>
            [EnumMember(Value = "Finished")]
            Finished = 4,
            
            /// <summary>
            /// Enum Fault for value: Fault
            /// </summary>
            [EnumMember(Value = "Fault")]
            Fault = 5
        }

        /// <summary>
        /// Gets or Sets ProgressStatus
        /// </summary>
        [DataMember(Name="progressStatus", EmitDefaultValue=false)]
        public ProgressStatusEnum? ProgressStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BackupProcessDto" /> class.
        /// </summary>
        /// <param name="briefInfo">briefInfo.</param>
        /// <param name="processKind">processKind.</param>
        /// <param name="progressInfo">progressInfo.</param>
        /// <param name="exceptions">exceptions.</param>
        /// <param name="progressStatus">progressStatus.</param>
        /// <param name="processId">processId.</param>
        /// <param name="finished">finished.</param>
        public BackupProcessDto(BackupProcessInfoDto briefInfo = default(BackupProcessInfoDto), ProcessKindEnum? processKind = default(ProcessKindEnum?), ProgressInfoDto progressInfo = default(ProgressInfoDto), List<ExceptionDto> exceptions = default(List<ExceptionDto>), ProgressStatusEnum? progressStatus = default(ProgressStatusEnum?), int? processId = default(int?), bool? finished = default(bool?))
        {
            this.BriefInfo = briefInfo;
            this.ProcessKind = processKind;
            this.ProgressInfo = progressInfo;
            this.Exceptions = exceptions;
            this.ProgressStatus = progressStatus;
            this.ProcessId = processId;
            this.Finished = finished;
        }
        
        /// <summary>
        /// Gets or Sets BriefInfo
        /// </summary>
        [DataMember(Name="briefInfo", EmitDefaultValue=false)]
        public BackupProcessInfoDto BriefInfo { get; set; }


        /// <summary>
        /// Gets or Sets ProgressInfo
        /// </summary>
        [DataMember(Name="progressInfo", EmitDefaultValue=false)]
        public ProgressInfoDto ProgressInfo { get; set; }

        /// <summary>
        /// Gets or Sets Exceptions
        /// </summary>
        [DataMember(Name="exceptions", EmitDefaultValue=false)]
        public List<ExceptionDto> Exceptions { get; set; }


        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public int? ProcessId { get; set; }

        /// <summary>
        /// Gets or Sets Finished
        /// </summary>
        [DataMember(Name="finished", EmitDefaultValue=false)]
        public bool? Finished { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BackupProcessDto {\n");
            sb.Append("  BriefInfo: ").Append(BriefInfo).Append("\n");
            sb.Append("  ProcessKind: ").Append(ProcessKind).Append("\n");
            sb.Append("  ProgressInfo: ").Append(ProgressInfo).Append("\n");
            sb.Append("  Exceptions: ").Append(Exceptions).Append("\n");
            sb.Append("  ProgressStatus: ").Append(ProgressStatus).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BackupProcessDto);
        }

        /// <summary>
        /// Returns true if BackupProcessDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BackupProcessDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BackupProcessDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BriefInfo == input.BriefInfo ||
                    (this.BriefInfo != null &&
                    this.BriefInfo.Equals(input.BriefInfo))
                ) && 
                (
                    this.ProcessKind == input.ProcessKind ||
                    (this.ProcessKind != null &&
                    this.ProcessKind.Equals(input.ProcessKind))
                ) && 
                (
                    this.ProgressInfo == input.ProgressInfo ||
                    (this.ProgressInfo != null &&
                    this.ProgressInfo.Equals(input.ProgressInfo))
                ) && 
                (
                    this.Exceptions == input.Exceptions ||
                    this.Exceptions != null &&
                    this.Exceptions.SequenceEqual(input.Exceptions)
                ) && 
                (
                    this.ProgressStatus == input.ProgressStatus ||
                    (this.ProgressStatus != null &&
                    this.ProgressStatus.Equals(input.ProgressStatus))
                ) && 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) && 
                (
                    this.Finished == input.Finished ||
                    (this.Finished != null &&
                    this.Finished.Equals(input.Finished))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BriefInfo != null)
                    hashCode = hashCode * 59 + this.BriefInfo.GetHashCode();
                if (this.ProcessKind != null)
                    hashCode = hashCode * 59 + this.ProcessKind.GetHashCode();
                if (this.ProgressInfo != null)
                    hashCode = hashCode * 59 + this.ProgressInfo.GetHashCode();
                if (this.Exceptions != null)
                    hashCode = hashCode * 59 + this.Exceptions.GetHashCode();
                if (this.ProgressStatus != null)
                    hashCode = hashCode * 59 + this.ProgressStatus.GetHashCode();
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                if (this.Finished != null)
                    hashCode = hashCode * 59 + this.Finished.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
