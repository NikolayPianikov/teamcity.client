/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// ProblemOccurrenceDto
    /// </summary>
    [DataContract]
    public partial class ProblemOccurrenceDto :  IEquatable<ProblemOccurrenceDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProblemOccurrenceDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="type">type.</param>
        /// <param name="identity">identity.</param>
        /// <param name="href">href.</param>
        /// <param name="muted">muted.</param>
        /// <param name="currentlyInvestigated">currentlyInvestigated.</param>
        /// <param name="currentlyMuted">currentlyMuted.</param>
        /// <param name="logAnchor">logAnchor.</param>
        /// <param name="newFailure">newFailure.</param>
        /// <param name="details">details.</param>
        /// <param name="additionalData">additionalData.</param>
        /// <param name="problem">problem.</param>
        /// <param name="mute">mute.</param>
        /// <param name="build">build.</param>
        public ProblemOccurrenceDto(string id = default(string), string type = default(string), string identity = default(string), string href = default(string), bool? muted = default(bool?), bool? currentlyInvestigated = default(bool?), bool? currentlyMuted = default(bool?), string logAnchor = default(string), bool? newFailure = default(bool?), string details = default(string), string additionalData = default(string), ProblemDto problem = default(ProblemDto), MuteDto mute = default(MuteDto), BuildDto build = default(BuildDto))
        {
            this.Id = id;
            this.Type = type;
            this.Identity = identity;
            this.Href = href;
            this.Muted = muted;
            this.CurrentlyInvestigated = currentlyInvestigated;
            this.CurrentlyMuted = currentlyMuted;
            this.LogAnchor = logAnchor;
            this.NewFailure = newFailure;
            this.Details = details;
            this.AdditionalData = additionalData;
            this.Problem = problem;
            this.Mute = mute;
            this.Build = build;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Identity
        /// </summary>
        [DataMember(Name="identity", EmitDefaultValue=false)]
        public string Identity { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets Muted
        /// </summary>
        [DataMember(Name="muted", EmitDefaultValue=false)]
        public bool? Muted { get; set; }

        /// <summary>
        /// Gets or Sets CurrentlyInvestigated
        /// </summary>
        [DataMember(Name="currentlyInvestigated", EmitDefaultValue=false)]
        public bool? CurrentlyInvestigated { get; set; }

        /// <summary>
        /// Gets or Sets CurrentlyMuted
        /// </summary>
        [DataMember(Name="currentlyMuted", EmitDefaultValue=false)]
        public bool? CurrentlyMuted { get; set; }

        /// <summary>
        /// Gets or Sets LogAnchor
        /// </summary>
        [DataMember(Name="logAnchor", EmitDefaultValue=false)]
        public string LogAnchor { get; set; }

        /// <summary>
        /// Gets or Sets NewFailure
        /// </summary>
        [DataMember(Name="newFailure", EmitDefaultValue=false)]
        public bool? NewFailure { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public string Details { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalData
        /// </summary>
        [DataMember(Name="additionalData", EmitDefaultValue=false)]
        public string AdditionalData { get; set; }

        /// <summary>
        /// Gets or Sets Problem
        /// </summary>
        [DataMember(Name="problem", EmitDefaultValue=false)]
        public ProblemDto Problem { get; set; }

        /// <summary>
        /// Gets or Sets Mute
        /// </summary>
        [DataMember(Name="mute", EmitDefaultValue=false)]
        public MuteDto Mute { get; set; }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name="build", EmitDefaultValue=false)]
        public BuildDto Build { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProblemOccurrenceDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Muted: ").Append(Muted).Append("\n");
            sb.Append("  CurrentlyInvestigated: ").Append(CurrentlyInvestigated).Append("\n");
            sb.Append("  CurrentlyMuted: ").Append(CurrentlyMuted).Append("\n");
            sb.Append("  LogAnchor: ").Append(LogAnchor).Append("\n");
            sb.Append("  NewFailure: ").Append(NewFailure).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  Problem: ").Append(Problem).Append("\n");
            sb.Append("  Mute: ").Append(Mute).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProblemOccurrenceDto);
        }

        /// <summary>
        /// Returns true if ProblemOccurrenceDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ProblemOccurrenceDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProblemOccurrenceDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Muted == input.Muted ||
                    (this.Muted != null &&
                    this.Muted.Equals(input.Muted))
                ) && 
                (
                    this.CurrentlyInvestigated == input.CurrentlyInvestigated ||
                    (this.CurrentlyInvestigated != null &&
                    this.CurrentlyInvestigated.Equals(input.CurrentlyInvestigated))
                ) && 
                (
                    this.CurrentlyMuted == input.CurrentlyMuted ||
                    (this.CurrentlyMuted != null &&
                    this.CurrentlyMuted.Equals(input.CurrentlyMuted))
                ) && 
                (
                    this.LogAnchor == input.LogAnchor ||
                    (this.LogAnchor != null &&
                    this.LogAnchor.Equals(input.LogAnchor))
                ) && 
                (
                    this.NewFailure == input.NewFailure ||
                    (this.NewFailure != null &&
                    this.NewFailure.Equals(input.NewFailure))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.AdditionalData == input.AdditionalData ||
                    (this.AdditionalData != null &&
                    this.AdditionalData.Equals(input.AdditionalData))
                ) && 
                (
                    this.Problem == input.Problem ||
                    (this.Problem != null &&
                    this.Problem.Equals(input.Problem))
                ) && 
                (
                    this.Mute == input.Mute ||
                    (this.Mute != null &&
                    this.Mute.Equals(input.Mute))
                ) && 
                (
                    this.Build == input.Build ||
                    (this.Build != null &&
                    this.Build.Equals(input.Build))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Identity != null)
                    hashCode = hashCode * 59 + this.Identity.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.Muted != null)
                    hashCode = hashCode * 59 + this.Muted.GetHashCode();
                if (this.CurrentlyInvestigated != null)
                    hashCode = hashCode * 59 + this.CurrentlyInvestigated.GetHashCode();
                if (this.CurrentlyMuted != null)
                    hashCode = hashCode * 59 + this.CurrentlyMuted.GetHashCode();
                if (this.LogAnchor != null)
                    hashCode = hashCode * 59 + this.LogAnchor.GetHashCode();
                if (this.NewFailure != null)
                    hashCode = hashCode * 59 + this.NewFailure.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.AdditionalData != null)
                    hashCode = hashCode * 59 + this.AdditionalData.GetHashCode();
                if (this.Problem != null)
                    hashCode = hashCode * 59 + this.Problem.GetHashCode();
                if (this.Mute != null)
                    hashCode = hashCode * 59 + this.Mute.GetHashCode();
                if (this.Build != null)
                    hashCode = hashCode * 59 + this.Build.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
