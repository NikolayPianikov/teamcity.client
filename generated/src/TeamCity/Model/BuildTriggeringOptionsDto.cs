/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// BuildTriggeringOptionsDto
    /// </summary>
    [DataContract]
    public partial class BuildTriggeringOptionsDto :  IEquatable<BuildTriggeringOptionsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildTriggeringOptionsDto" /> class.
        /// </summary>
        /// <param name="cleanSources">cleanSources.</param>
        /// <param name="cleanSourcesInAllDependencies">cleanSourcesInAllDependencies.</param>
        /// <param name="rebuildAllDependencies">rebuildAllDependencies.</param>
        /// <param name="rebuildFailedOrIncompleteDependencies">rebuildFailedOrIncompleteDependencies.</param>
        /// <param name="queueAtTop">queueAtTop.</param>
        /// <param name="freezeSettings">freezeSettings.</param>
        /// <param name="tagDependencies">tagDependencies.</param>
        /// <param name="rebuildDependencies">rebuildDependencies.</param>
        public BuildTriggeringOptionsDto(bool? cleanSources = default(bool?), bool? cleanSourcesInAllDependencies = default(bool?), bool? rebuildAllDependencies = default(bool?), bool? rebuildFailedOrIncompleteDependencies = default(bool?), bool? queueAtTop = default(bool?), bool? freezeSettings = default(bool?), bool? tagDependencies = default(bool?), BuildTypesDto rebuildDependencies = default(BuildTypesDto))
        {
            this.CleanSources = cleanSources;
            this.CleanSourcesInAllDependencies = cleanSourcesInAllDependencies;
            this.RebuildAllDependencies = rebuildAllDependencies;
            this.RebuildFailedOrIncompleteDependencies = rebuildFailedOrIncompleteDependencies;
            this.QueueAtTop = queueAtTop;
            this.FreezeSettings = freezeSettings;
            this.TagDependencies = tagDependencies;
            this.RebuildDependencies = rebuildDependencies;
        }
        
        /// <summary>
        /// Gets or Sets CleanSources
        /// </summary>
        [DataMember(Name="cleanSources", EmitDefaultValue=false)]
        public bool? CleanSources { get; set; }

        /// <summary>
        /// Gets or Sets CleanSourcesInAllDependencies
        /// </summary>
        [DataMember(Name="cleanSourcesInAllDependencies", EmitDefaultValue=false)]
        public bool? CleanSourcesInAllDependencies { get; set; }

        /// <summary>
        /// Gets or Sets RebuildAllDependencies
        /// </summary>
        [DataMember(Name="rebuildAllDependencies", EmitDefaultValue=false)]
        public bool? RebuildAllDependencies { get; set; }

        /// <summary>
        /// Gets or Sets RebuildFailedOrIncompleteDependencies
        /// </summary>
        [DataMember(Name="rebuildFailedOrIncompleteDependencies", EmitDefaultValue=false)]
        public bool? RebuildFailedOrIncompleteDependencies { get; set; }

        /// <summary>
        /// Gets or Sets QueueAtTop
        /// </summary>
        [DataMember(Name="queueAtTop", EmitDefaultValue=false)]
        public bool? QueueAtTop { get; set; }

        /// <summary>
        /// Gets or Sets FreezeSettings
        /// </summary>
        [DataMember(Name="freezeSettings", EmitDefaultValue=false)]
        public bool? FreezeSettings { get; set; }

        /// <summary>
        /// Gets or Sets TagDependencies
        /// </summary>
        [DataMember(Name="tagDependencies", EmitDefaultValue=false)]
        public bool? TagDependencies { get; set; }

        /// <summary>
        /// Gets or Sets RebuildDependencies
        /// </summary>
        [DataMember(Name="rebuildDependencies", EmitDefaultValue=false)]
        public BuildTypesDto RebuildDependencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildTriggeringOptionsDto {\n");
            sb.Append("  CleanSources: ").Append(CleanSources).Append("\n");
            sb.Append("  CleanSourcesInAllDependencies: ").Append(CleanSourcesInAllDependencies).Append("\n");
            sb.Append("  RebuildAllDependencies: ").Append(RebuildAllDependencies).Append("\n");
            sb.Append("  RebuildFailedOrIncompleteDependencies: ").Append(RebuildFailedOrIncompleteDependencies).Append("\n");
            sb.Append("  QueueAtTop: ").Append(QueueAtTop).Append("\n");
            sb.Append("  FreezeSettings: ").Append(FreezeSettings).Append("\n");
            sb.Append("  TagDependencies: ").Append(TagDependencies).Append("\n");
            sb.Append("  RebuildDependencies: ").Append(RebuildDependencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildTriggeringOptionsDto);
        }

        /// <summary>
        /// Returns true if BuildTriggeringOptionsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildTriggeringOptionsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildTriggeringOptionsDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CleanSources == input.CleanSources ||
                    (this.CleanSources != null &&
                    this.CleanSources.Equals(input.CleanSources))
                ) && 
                (
                    this.CleanSourcesInAllDependencies == input.CleanSourcesInAllDependencies ||
                    (this.CleanSourcesInAllDependencies != null &&
                    this.CleanSourcesInAllDependencies.Equals(input.CleanSourcesInAllDependencies))
                ) && 
                (
                    this.RebuildAllDependencies == input.RebuildAllDependencies ||
                    (this.RebuildAllDependencies != null &&
                    this.RebuildAllDependencies.Equals(input.RebuildAllDependencies))
                ) && 
                (
                    this.RebuildFailedOrIncompleteDependencies == input.RebuildFailedOrIncompleteDependencies ||
                    (this.RebuildFailedOrIncompleteDependencies != null &&
                    this.RebuildFailedOrIncompleteDependencies.Equals(input.RebuildFailedOrIncompleteDependencies))
                ) && 
                (
                    this.QueueAtTop == input.QueueAtTop ||
                    (this.QueueAtTop != null &&
                    this.QueueAtTop.Equals(input.QueueAtTop))
                ) && 
                (
                    this.FreezeSettings == input.FreezeSettings ||
                    (this.FreezeSettings != null &&
                    this.FreezeSettings.Equals(input.FreezeSettings))
                ) && 
                (
                    this.TagDependencies == input.TagDependencies ||
                    (this.TagDependencies != null &&
                    this.TagDependencies.Equals(input.TagDependencies))
                ) && 
                (
                    this.RebuildDependencies == input.RebuildDependencies ||
                    (this.RebuildDependencies != null &&
                    this.RebuildDependencies.Equals(input.RebuildDependencies))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CleanSources != null)
                    hashCode = hashCode * 59 + this.CleanSources.GetHashCode();
                if (this.CleanSourcesInAllDependencies != null)
                    hashCode = hashCode * 59 + this.CleanSourcesInAllDependencies.GetHashCode();
                if (this.RebuildAllDependencies != null)
                    hashCode = hashCode * 59 + this.RebuildAllDependencies.GetHashCode();
                if (this.RebuildFailedOrIncompleteDependencies != null)
                    hashCode = hashCode * 59 + this.RebuildFailedOrIncompleteDependencies.GetHashCode();
                if (this.QueueAtTop != null)
                    hashCode = hashCode * 59 + this.QueueAtTop.GetHashCode();
                if (this.FreezeSettings != null)
                    hashCode = hashCode * 59 + this.FreezeSettings.GetHashCode();
                if (this.TagDependencies != null)
                    hashCode = hashCode * 59 + this.TagDependencies.GetHashCode();
                if (this.RebuildDependencies != null)
                    hashCode = hashCode * 59 + this.RebuildDependencies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
