/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// ProgressInfoDto
    /// </summary>
    [DataContract]
    public partial class ProgressInfoDto :  IEquatable<ProgressInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProgressInfoDto" /> class.
        /// </summary>
        /// <param name="percentageComplete">percentageComplete.</param>
        /// <param name="elapsedSeconds">elapsedSeconds.</param>
        /// <param name="estimatedTotalSeconds">estimatedTotalSeconds.</param>
        /// <param name="leftSeconds">leftSeconds.</param>
        /// <param name="currentStageText">currentStageText.</param>
        /// <param name="outdated">outdated.</param>
        /// <param name="probablyHanging">probablyHanging.</param>
        /// <param name="lastActivityTime">lastActivityTime.</param>
        /// <param name="outdatedReasonBuild">outdatedReasonBuild.</param>
        public ProgressInfoDto(int? percentageComplete = default(int?), long? elapsedSeconds = default(long?), long? estimatedTotalSeconds = default(long?), long? leftSeconds = default(long?), string currentStageText = default(string), bool? outdated = default(bool?), bool? probablyHanging = default(bool?), string lastActivityTime = default(string), BuildDto outdatedReasonBuild = default(BuildDto))
        {
            this.PercentageComplete = percentageComplete;
            this.ElapsedSeconds = elapsedSeconds;
            this.EstimatedTotalSeconds = estimatedTotalSeconds;
            this.LeftSeconds = leftSeconds;
            this.CurrentStageText = currentStageText;
            this.Outdated = outdated;
            this.ProbablyHanging = probablyHanging;
            this.LastActivityTime = lastActivityTime;
            this.OutdatedReasonBuild = outdatedReasonBuild;
        }
        
        /// <summary>
        /// Gets or Sets PercentageComplete
        /// </summary>
        [DataMember(Name="percentageComplete", EmitDefaultValue=false)]
        public int? PercentageComplete { get; set; }

        /// <summary>
        /// Gets or Sets ElapsedSeconds
        /// </summary>
        [DataMember(Name="elapsedSeconds", EmitDefaultValue=false)]
        public long? ElapsedSeconds { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedTotalSeconds
        /// </summary>
        [DataMember(Name="estimatedTotalSeconds", EmitDefaultValue=false)]
        public long? EstimatedTotalSeconds { get; set; }

        /// <summary>
        /// Gets or Sets LeftSeconds
        /// </summary>
        [DataMember(Name="leftSeconds", EmitDefaultValue=false)]
        public long? LeftSeconds { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStageText
        /// </summary>
        [DataMember(Name="currentStageText", EmitDefaultValue=false)]
        public string CurrentStageText { get; set; }

        /// <summary>
        /// Gets or Sets Outdated
        /// </summary>
        [DataMember(Name="outdated", EmitDefaultValue=false)]
        public bool? Outdated { get; set; }

        /// <summary>
        /// Gets or Sets ProbablyHanging
        /// </summary>
        [DataMember(Name="probablyHanging", EmitDefaultValue=false)]
        public bool? ProbablyHanging { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityTime
        /// </summary>
        [DataMember(Name="lastActivityTime", EmitDefaultValue=false)]
        public string LastActivityTime { get; set; }

        /// <summary>
        /// Gets or Sets OutdatedReasonBuild
        /// </summary>
        [DataMember(Name="outdatedReasonBuild", EmitDefaultValue=false)]
        public BuildDto OutdatedReasonBuild { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProgressInfoDto {\n");
            sb.Append("  PercentageComplete: ").Append(PercentageComplete).Append("\n");
            sb.Append("  ElapsedSeconds: ").Append(ElapsedSeconds).Append("\n");
            sb.Append("  EstimatedTotalSeconds: ").Append(EstimatedTotalSeconds).Append("\n");
            sb.Append("  LeftSeconds: ").Append(LeftSeconds).Append("\n");
            sb.Append("  CurrentStageText: ").Append(CurrentStageText).Append("\n");
            sb.Append("  Outdated: ").Append(Outdated).Append("\n");
            sb.Append("  ProbablyHanging: ").Append(ProbablyHanging).Append("\n");
            sb.Append("  LastActivityTime: ").Append(LastActivityTime).Append("\n");
            sb.Append("  OutdatedReasonBuild: ").Append(OutdatedReasonBuild).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProgressInfoDto);
        }

        /// <summary>
        /// Returns true if ProgressInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ProgressInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProgressInfoDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PercentageComplete == input.PercentageComplete ||
                    (this.PercentageComplete != null &&
                    this.PercentageComplete.Equals(input.PercentageComplete))
                ) && 
                (
                    this.ElapsedSeconds == input.ElapsedSeconds ||
                    (this.ElapsedSeconds != null &&
                    this.ElapsedSeconds.Equals(input.ElapsedSeconds))
                ) && 
                (
                    this.EstimatedTotalSeconds == input.EstimatedTotalSeconds ||
                    (this.EstimatedTotalSeconds != null &&
                    this.EstimatedTotalSeconds.Equals(input.EstimatedTotalSeconds))
                ) && 
                (
                    this.LeftSeconds == input.LeftSeconds ||
                    (this.LeftSeconds != null &&
                    this.LeftSeconds.Equals(input.LeftSeconds))
                ) && 
                (
                    this.CurrentStageText == input.CurrentStageText ||
                    (this.CurrentStageText != null &&
                    this.CurrentStageText.Equals(input.CurrentStageText))
                ) && 
                (
                    this.Outdated == input.Outdated ||
                    (this.Outdated != null &&
                    this.Outdated.Equals(input.Outdated))
                ) && 
                (
                    this.ProbablyHanging == input.ProbablyHanging ||
                    (this.ProbablyHanging != null &&
                    this.ProbablyHanging.Equals(input.ProbablyHanging))
                ) && 
                (
                    this.LastActivityTime == input.LastActivityTime ||
                    (this.LastActivityTime != null &&
                    this.LastActivityTime.Equals(input.LastActivityTime))
                ) && 
                (
                    this.OutdatedReasonBuild == input.OutdatedReasonBuild ||
                    (this.OutdatedReasonBuild != null &&
                    this.OutdatedReasonBuild.Equals(input.OutdatedReasonBuild))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PercentageComplete != null)
                    hashCode = hashCode * 59 + this.PercentageComplete.GetHashCode();
                if (this.ElapsedSeconds != null)
                    hashCode = hashCode * 59 + this.ElapsedSeconds.GetHashCode();
                if (this.EstimatedTotalSeconds != null)
                    hashCode = hashCode * 59 + this.EstimatedTotalSeconds.GetHashCode();
                if (this.LeftSeconds != null)
                    hashCode = hashCode * 59 + this.LeftSeconds.GetHashCode();
                if (this.CurrentStageText != null)
                    hashCode = hashCode * 59 + this.CurrentStageText.GetHashCode();
                if (this.Outdated != null)
                    hashCode = hashCode * 59 + this.Outdated.GetHashCode();
                if (this.ProbablyHanging != null)
                    hashCode = hashCode * 59 + this.ProbablyHanging.GetHashCode();
                if (this.LastActivityTime != null)
                    hashCode = hashCode * 59 + this.LastActivityTime.GetHashCode();
                if (this.OutdatedReasonBuild != null)
                    hashCode = hashCode * 59 + this.OutdatedReasonBuild.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
