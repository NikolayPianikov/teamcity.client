/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// BuildDto
    /// </summary>
    [DataContract]
    public partial class BuildDto :  IEquatable<BuildDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="taskId">taskId.</param>
        /// <param name="buildTypeId">buildTypeId.</param>
        /// <param name="buildTypeInternalId">buildTypeInternalId.</param>
        /// <param name="number">number.</param>
        /// <param name="status">status.</param>
        /// <param name="state">state.</param>
        /// <param name="running">running.</param>
        /// <param name="composite">composite.</param>
        /// <param name="failedToStart">failedToStart.</param>
        /// <param name="personal">personal.</param>
        /// <param name="percentageComplete">percentageComplete.</param>
        /// <param name="branchName">branchName.</param>
        /// <param name="defaultBranch">defaultBranch.</param>
        /// <param name="unspecifiedBranch">unspecifiedBranch.</param>
        /// <param name="history">history.</param>
        /// <param name="pinned">pinned.</param>
        /// <param name="href">href.</param>
        /// <param name="webUrl">webUrl.</param>
        /// <param name="queuePosition">queuePosition.</param>
        /// <param name="limitedChangesCount">limitedChangesCount.</param>
        /// <param name="artifactsDirectory">artifactsDirectory.</param>
        /// <param name="links">links.</param>
        /// <param name="statusText">statusText.</param>
        /// <param name="buildType">buildType.</param>
        /// <param name="comment">comment.</param>
        /// <param name="tags">tags.</param>
        /// <param name="pinInfo">pinInfo.</param>
        /// <param name="user">user.</param>
        /// <param name="startEstimate">startEstimate.</param>
        /// <param name="waitReason">waitReason.</param>
        /// <param name="finishEstimate">finishEstimate.</param>
        /// <param name="runningInfo">runningInfo.</param>
        /// <param name="canceledInfo">canceledInfo.</param>
        /// <param name="queuedDate">queuedDate.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="finishDate">finishDate.</param>
        /// <param name="triggered">triggered.</param>
        /// <param name="lastChanges">lastChanges.</param>
        /// <param name="changes">changes.</param>
        /// <param name="revisions">revisions.</param>
        /// <param name="versionedSettingsRevision">versionedSettingsRevision.</param>
        /// <param name="artifactDependencyChanges">artifactDependencyChanges.</param>
        /// <param name="agent">agent.</param>
        /// <param name="compatibleAgents">compatibleAgents.</param>
        /// <param name="testOccurrences">testOccurrences.</param>
        /// <param name="problemOccurrences">problemOccurrences.</param>
        /// <param name="artifacts">artifacts.</param>
        /// <param name="relatedIssues">relatedIssues.</param>
        /// <param name="properties">properties.</param>
        /// <param name="resultingProperties">resultingProperties.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="statistics">statistics.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="snapshotDependencies">snapshotDependencies.</param>
        /// <param name="artifactDependencies">artifactDependencies.</param>
        /// <param name="customArtifactDependencies">customArtifactDependencies.</param>
        /// <param name="settingsHash">settingsHash.</param>
        /// <param name="currentSettingsHash">currentSettingsHash.</param>
        /// <param name="modificationId">modificationId.</param>
        /// <param name="chainModificationId">chainModificationId.</param>
        /// <param name="replacementIds">replacementIds.</param>
        /// <param name="related">related.</param>
        /// <param name="triggeringOptions">triggeringOptions.</param>
        /// <param name="usedByOtherBuilds">usedByOtherBuilds.</param>
        /// <param name="statusChangeComment">statusChangeComment.</param>
        /// <param name="vcsLabels">vcsLabels.</param>
        /// <param name="detachedFromAgent">detachedFromAgent.</param>
        /// <param name="finishOnAgentDate">finishOnAgentDate.</param>
        /// <param name="customized">customized.</param>
        /// <param name="customization">customization.</param>
        /// <param name="locator">locator.</param>
        public BuildDto(long? id = default(long?), long? taskId = default(long?), string buildTypeId = default(string), string buildTypeInternalId = default(string), string number = default(string), string status = default(string), string state = default(string), bool? running = default(bool?), bool? composite = default(bool?), bool? failedToStart = default(bool?), bool? personal = default(bool?), int? percentageComplete = default(int?), string branchName = default(string), bool? defaultBranch = default(bool?), bool? unspecifiedBranch = default(bool?), bool? history = default(bool?), bool? pinned = default(bool?), string href = default(string), string webUrl = default(string), int? queuePosition = default(int?), int? limitedChangesCount = default(int?), string artifactsDirectory = default(string), LinksDto links = default(LinksDto), string statusText = default(string), BuildTypeDto buildType = default(BuildTypeDto), CommentDto comment = default(CommentDto), TagsDto tags = default(TagsDto), CommentDto pinInfo = default(CommentDto), UserDto user = default(UserDto), string startEstimate = default(string), string waitReason = default(string), string finishEstimate = default(string), ProgressInfoDto runningInfo = default(ProgressInfoDto), CommentDto canceledInfo = default(CommentDto), string queuedDate = default(string), string startDate = default(string), string finishDate = default(string), TriggeredByDto triggered = default(TriggeredByDto), ChangesDto lastChanges = default(ChangesDto), ChangesDto changes = default(ChangesDto), RevisionsDto revisions = default(RevisionsDto), RevisionDto versionedSettingsRevision = default(RevisionDto), BuildChangesDto artifactDependencyChanges = default(BuildChangesDto), AgentDto agent = default(AgentDto), AgentsDto compatibleAgents = default(AgentsDto), TestOccurrencesDto testOccurrences = default(TestOccurrencesDto), ProblemOccurrencesDto problemOccurrences = default(ProblemOccurrencesDto), FilesDto artifacts = default(FilesDto), IssuesUsagesDto relatedIssues = default(IssuesUsagesDto), PropertiesDto properties = default(PropertiesDto), PropertiesDto resultingProperties = default(PropertiesDto), EntriesDto attributes = default(EntriesDto), PropertiesDto statistics = default(PropertiesDto), DatasDto metadata = default(DatasDto), BuildsDto snapshotDependencies = default(BuildsDto), BuildsDto artifactDependencies = default(BuildsDto), ArtifactDependenciesDto customArtifactDependencies = default(ArtifactDependenciesDto), string settingsHash = default(string), string currentSettingsHash = default(string), string modificationId = default(string), string chainModificationId = default(string), ItemsDto replacementIds = default(ItemsDto), RelatedDto related = default(RelatedDto), BuildTriggeringOptionsDto triggeringOptions = default(BuildTriggeringOptionsDto), bool? usedByOtherBuilds = default(bool?), CommentDto statusChangeComment = default(CommentDto), List<VcsLabelDto> vcsLabels = default(List<VcsLabelDto>), bool? detachedFromAgent = default(bool?), string finishOnAgentDate = default(string), bool? customized = default(bool?), CustomizationsDto customization = default(CustomizationsDto), string locator = default(string))
        {
            this.Id = id;
            this.TaskId = taskId;
            this.BuildTypeId = buildTypeId;
            this.BuildTypeInternalId = buildTypeInternalId;
            this.Number = number;
            this.Status = status;
            this.State = state;
            this.Running = running;
            this.Composite = composite;
            this.FailedToStart = failedToStart;
            this.Personal = personal;
            this.PercentageComplete = percentageComplete;
            this.BranchName = branchName;
            this.DefaultBranch = defaultBranch;
            this.UnspecifiedBranch = unspecifiedBranch;
            this.History = history;
            this.Pinned = pinned;
            this.Href = href;
            this.WebUrl = webUrl;
            this.QueuePosition = queuePosition;
            this.LimitedChangesCount = limitedChangesCount;
            this.ArtifactsDirectory = artifactsDirectory;
            this.Links = links;
            this.StatusText = statusText;
            this.BuildType = buildType;
            this.Comment = comment;
            this.Tags = tags;
            this.PinInfo = pinInfo;
            this.User = user;
            this.StartEstimate = startEstimate;
            this.WaitReason = waitReason;
            this.FinishEstimate = finishEstimate;
            this.RunningInfo = runningInfo;
            this.CanceledInfo = canceledInfo;
            this.QueuedDate = queuedDate;
            this.StartDate = startDate;
            this.FinishDate = finishDate;
            this.Triggered = triggered;
            this.LastChanges = lastChanges;
            this.Changes = changes;
            this.Revisions = revisions;
            this.VersionedSettingsRevision = versionedSettingsRevision;
            this.ArtifactDependencyChanges = artifactDependencyChanges;
            this.Agent = agent;
            this.CompatibleAgents = compatibleAgents;
            this.TestOccurrences = testOccurrences;
            this.ProblemOccurrences = problemOccurrences;
            this.Artifacts = artifacts;
            this.RelatedIssues = relatedIssues;
            this.Properties = properties;
            this.ResultingProperties = resultingProperties;
            this.Attributes = attributes;
            this.Statistics = statistics;
            this.Metadata = metadata;
            this.SnapshotDependencies = snapshotDependencies;
            this.ArtifactDependencies = artifactDependencies;
            this.CustomArtifactDependencies = customArtifactDependencies;
            this.SettingsHash = settingsHash;
            this.CurrentSettingsHash = currentSettingsHash;
            this.ModificationId = modificationId;
            this.ChainModificationId = chainModificationId;
            this.ReplacementIds = replacementIds;
            this.Related = related;
            this.TriggeringOptions = triggeringOptions;
            this.UsedByOtherBuilds = usedByOtherBuilds;
            this.StatusChangeComment = statusChangeComment;
            this.VcsLabels = vcsLabels;
            this.DetachedFromAgent = detachedFromAgent;
            this.FinishOnAgentDate = finishOnAgentDate;
            this.Customized = customized;
            this.Customization = customization;
            this.Locator = locator;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name="taskId", EmitDefaultValue=false)]
        public long? TaskId { get; set; }

        /// <summary>
        /// Gets or Sets BuildTypeId
        /// </summary>
        [DataMember(Name="buildTypeId", EmitDefaultValue=false)]
        public string BuildTypeId { get; set; }

        /// <summary>
        /// Gets or Sets BuildTypeInternalId
        /// </summary>
        [DataMember(Name="buildTypeInternalId", EmitDefaultValue=false)]
        public string BuildTypeInternalId { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Running
        /// </summary>
        [DataMember(Name="running", EmitDefaultValue=false)]
        public bool? Running { get; set; }

        /// <summary>
        /// Gets or Sets Composite
        /// </summary>
        [DataMember(Name="composite", EmitDefaultValue=false)]
        public bool? Composite { get; set; }

        /// <summary>
        /// Gets or Sets FailedToStart
        /// </summary>
        [DataMember(Name="failedToStart", EmitDefaultValue=false)]
        public bool? FailedToStart { get; set; }

        /// <summary>
        /// Gets or Sets Personal
        /// </summary>
        [DataMember(Name="personal", EmitDefaultValue=false)]
        public bool? Personal { get; set; }

        /// <summary>
        /// Gets or Sets PercentageComplete
        /// </summary>
        [DataMember(Name="percentageComplete", EmitDefaultValue=false)]
        public int? PercentageComplete { get; set; }

        /// <summary>
        /// Gets or Sets BranchName
        /// </summary>
        [DataMember(Name="branchName", EmitDefaultValue=false)]
        public string BranchName { get; set; }

        /// <summary>
        /// Gets or Sets DefaultBranch
        /// </summary>
        [DataMember(Name="defaultBranch", EmitDefaultValue=false)]
        public bool? DefaultBranch { get; set; }

        /// <summary>
        /// Gets or Sets UnspecifiedBranch
        /// </summary>
        [DataMember(Name="unspecifiedBranch", EmitDefaultValue=false)]
        public bool? UnspecifiedBranch { get; set; }

        /// <summary>
        /// Gets or Sets History
        /// </summary>
        [DataMember(Name="history", EmitDefaultValue=false)]
        public bool? History { get; set; }

        /// <summary>
        /// Gets or Sets Pinned
        /// </summary>
        [DataMember(Name="pinned", EmitDefaultValue=false)]
        public bool? Pinned { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets WebUrl
        /// </summary>
        [DataMember(Name="webUrl", EmitDefaultValue=false)]
        public string WebUrl { get; set; }

        /// <summary>
        /// Gets or Sets QueuePosition
        /// </summary>
        [DataMember(Name="queuePosition", EmitDefaultValue=false)]
        public int? QueuePosition { get; set; }

        /// <summary>
        /// Gets or Sets LimitedChangesCount
        /// </summary>
        [DataMember(Name="limitedChangesCount", EmitDefaultValue=false)]
        public int? LimitedChangesCount { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactsDirectory
        /// </summary>
        [DataMember(Name="artifactsDirectory", EmitDefaultValue=false)]
        public string ArtifactsDirectory { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public LinksDto Links { get; set; }

        /// <summary>
        /// Gets or Sets StatusText
        /// </summary>
        [DataMember(Name="statusText", EmitDefaultValue=false)]
        public string StatusText { get; set; }

        /// <summary>
        /// Gets or Sets BuildType
        /// </summary>
        [DataMember(Name="buildType", EmitDefaultValue=false)]
        public BuildTypeDto BuildType { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public CommentDto Comment { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public TagsDto Tags { get; set; }

        /// <summary>
        /// Gets or Sets PinInfo
        /// </summary>
        [DataMember(Name="pinInfo", EmitDefaultValue=false)]
        public CommentDto PinInfo { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserDto User { get; set; }

        /// <summary>
        /// Gets or Sets StartEstimate
        /// </summary>
        [DataMember(Name="startEstimate", EmitDefaultValue=false)]
        public string StartEstimate { get; set; }

        /// <summary>
        /// Gets or Sets WaitReason
        /// </summary>
        [DataMember(Name="waitReason", EmitDefaultValue=false)]
        public string WaitReason { get; set; }

        /// <summary>
        /// Gets or Sets FinishEstimate
        /// </summary>
        [DataMember(Name="finishEstimate", EmitDefaultValue=false)]
        public string FinishEstimate { get; set; }

        /// <summary>
        /// Gets or Sets RunningInfo
        /// </summary>
        [DataMember(Name="running-info", EmitDefaultValue=false)]
        public ProgressInfoDto RunningInfo { get; set; }

        /// <summary>
        /// Gets or Sets CanceledInfo
        /// </summary>
        [DataMember(Name="canceledInfo", EmitDefaultValue=false)]
        public CommentDto CanceledInfo { get; set; }

        /// <summary>
        /// Gets or Sets QueuedDate
        /// </summary>
        [DataMember(Name="queuedDate", EmitDefaultValue=false)]
        public string QueuedDate { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets FinishDate
        /// </summary>
        [DataMember(Name="finishDate", EmitDefaultValue=false)]
        public string FinishDate { get; set; }

        /// <summary>
        /// Gets or Sets Triggered
        /// </summary>
        [DataMember(Name="triggered", EmitDefaultValue=false)]
        public TriggeredByDto Triggered { get; set; }

        /// <summary>
        /// Gets or Sets LastChanges
        /// </summary>
        [DataMember(Name="lastChanges", EmitDefaultValue=false)]
        public ChangesDto LastChanges { get; set; }

        /// <summary>
        /// Gets or Sets Changes
        /// </summary>
        [DataMember(Name="changes", EmitDefaultValue=false)]
        public ChangesDto Changes { get; set; }

        /// <summary>
        /// Gets or Sets Revisions
        /// </summary>
        [DataMember(Name="revisions", EmitDefaultValue=false)]
        public RevisionsDto Revisions { get; set; }

        /// <summary>
        /// Gets or Sets VersionedSettingsRevision
        /// </summary>
        [DataMember(Name="versionedSettingsRevision", EmitDefaultValue=false)]
        public RevisionDto VersionedSettingsRevision { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactDependencyChanges
        /// </summary>
        [DataMember(Name="artifactDependencyChanges", EmitDefaultValue=false)]
        public BuildChangesDto ArtifactDependencyChanges { get; set; }

        /// <summary>
        /// Gets or Sets Agent
        /// </summary>
        [DataMember(Name="agent", EmitDefaultValue=false)]
        public AgentDto Agent { get; set; }

        /// <summary>
        /// Gets or Sets CompatibleAgents
        /// </summary>
        [DataMember(Name="compatibleAgents", EmitDefaultValue=false)]
        public AgentsDto CompatibleAgents { get; set; }

        /// <summary>
        /// Gets or Sets TestOccurrences
        /// </summary>
        [DataMember(Name="testOccurrences", EmitDefaultValue=false)]
        public TestOccurrencesDto TestOccurrences { get; set; }

        /// <summary>
        /// Gets or Sets ProblemOccurrences
        /// </summary>
        [DataMember(Name="problemOccurrences", EmitDefaultValue=false)]
        public ProblemOccurrencesDto ProblemOccurrences { get; set; }

        /// <summary>
        /// Gets or Sets Artifacts
        /// </summary>
        [DataMember(Name="artifacts", EmitDefaultValue=false)]
        public FilesDto Artifacts { get; set; }

        /// <summary>
        /// Gets or Sets RelatedIssues
        /// </summary>
        [DataMember(Name="relatedIssues", EmitDefaultValue=false)]
        public IssuesUsagesDto RelatedIssues { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public PropertiesDto Properties { get; set; }

        /// <summary>
        /// Gets or Sets ResultingProperties
        /// </summary>
        [DataMember(Name="resultingProperties", EmitDefaultValue=false)]
        public PropertiesDto ResultingProperties { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public EntriesDto Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>
        [DataMember(Name="statistics", EmitDefaultValue=false)]
        public PropertiesDto Statistics { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public DatasDto Metadata { get; set; }

        /// <summary>
        /// Gets or Sets SnapshotDependencies
        /// </summary>
        [DataMember(Name="snapshot-dependencies", EmitDefaultValue=false)]
        public BuildsDto SnapshotDependencies { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactDependencies
        /// </summary>
        [DataMember(Name="artifact-dependencies", EmitDefaultValue=false)]
        public BuildsDto ArtifactDependencies { get; set; }

        /// <summary>
        /// Gets or Sets CustomArtifactDependencies
        /// </summary>
        [DataMember(Name="custom-artifact-dependencies", EmitDefaultValue=false)]
        public ArtifactDependenciesDto CustomArtifactDependencies { get; set; }

        /// <summary>
        /// Gets or Sets SettingsHash
        /// </summary>
        [DataMember(Name="settingsHash", EmitDefaultValue=false)]
        public string SettingsHash { get; set; }

        /// <summary>
        /// Gets or Sets CurrentSettingsHash
        /// </summary>
        [DataMember(Name="currentSettingsHash", EmitDefaultValue=false)]
        public string CurrentSettingsHash { get; set; }

        /// <summary>
        /// Gets or Sets ModificationId
        /// </summary>
        [DataMember(Name="modificationId", EmitDefaultValue=false)]
        public string ModificationId { get; set; }

        /// <summary>
        /// Gets or Sets ChainModificationId
        /// </summary>
        [DataMember(Name="chainModificationId", EmitDefaultValue=false)]
        public string ChainModificationId { get; set; }

        /// <summary>
        /// Gets or Sets ReplacementIds
        /// </summary>
        [DataMember(Name="replacementIds", EmitDefaultValue=false)]
        public ItemsDto ReplacementIds { get; set; }

        /// <summary>
        /// Gets or Sets Related
        /// </summary>
        [DataMember(Name="related", EmitDefaultValue=false)]
        public RelatedDto Related { get; set; }

        /// <summary>
        /// Gets or Sets TriggeringOptions
        /// </summary>
        [DataMember(Name="triggeringOptions", EmitDefaultValue=false)]
        public BuildTriggeringOptionsDto TriggeringOptions { get; set; }

        /// <summary>
        /// Gets or Sets UsedByOtherBuilds
        /// </summary>
        [DataMember(Name="usedByOtherBuilds", EmitDefaultValue=false)]
        public bool? UsedByOtherBuilds { get; set; }

        /// <summary>
        /// Gets or Sets StatusChangeComment
        /// </summary>
        [DataMember(Name="statusChangeComment", EmitDefaultValue=false)]
        public CommentDto StatusChangeComment { get; set; }

        /// <summary>
        /// Gets or Sets VcsLabels
        /// </summary>
        [DataMember(Name="vcsLabels", EmitDefaultValue=false)]
        public List<VcsLabelDto> VcsLabels { get; set; }

        /// <summary>
        /// Gets or Sets DetachedFromAgent
        /// </summary>
        [DataMember(Name="detachedFromAgent", EmitDefaultValue=false)]
        public bool? DetachedFromAgent { get; set; }

        /// <summary>
        /// Gets or Sets FinishOnAgentDate
        /// </summary>
        [DataMember(Name="finishOnAgentDate", EmitDefaultValue=false)]
        public string FinishOnAgentDate { get; set; }

        /// <summary>
        /// Gets or Sets Customized
        /// </summary>
        [DataMember(Name="customized", EmitDefaultValue=false)]
        public bool? Customized { get; set; }

        /// <summary>
        /// Gets or Sets Customization
        /// </summary>
        [DataMember(Name="customization", EmitDefaultValue=false)]
        public CustomizationsDto Customization { get; set; }

        /// <summary>
        /// Gets or Sets Locator
        /// </summary>
        [DataMember(Name="locator", EmitDefaultValue=false)]
        public string Locator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  BuildTypeId: ").Append(BuildTypeId).Append("\n");
            sb.Append("  BuildTypeInternalId: ").Append(BuildTypeInternalId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  Composite: ").Append(Composite).Append("\n");
            sb.Append("  FailedToStart: ").Append(FailedToStart).Append("\n");
            sb.Append("  Personal: ").Append(Personal).Append("\n");
            sb.Append("  PercentageComplete: ").Append(PercentageComplete).Append("\n");
            sb.Append("  BranchName: ").Append(BranchName).Append("\n");
            sb.Append("  DefaultBranch: ").Append(DefaultBranch).Append("\n");
            sb.Append("  UnspecifiedBranch: ").Append(UnspecifiedBranch).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  Pinned: ").Append(Pinned).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("  QueuePosition: ").Append(QueuePosition).Append("\n");
            sb.Append("  LimitedChangesCount: ").Append(LimitedChangesCount).Append("\n");
            sb.Append("  ArtifactsDirectory: ").Append(ArtifactsDirectory).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  StatusText: ").Append(StatusText).Append("\n");
            sb.Append("  BuildType: ").Append(BuildType).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  PinInfo: ").Append(PinInfo).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  StartEstimate: ").Append(StartEstimate).Append("\n");
            sb.Append("  WaitReason: ").Append(WaitReason).Append("\n");
            sb.Append("  FinishEstimate: ").Append(FinishEstimate).Append("\n");
            sb.Append("  RunningInfo: ").Append(RunningInfo).Append("\n");
            sb.Append("  CanceledInfo: ").Append(CanceledInfo).Append("\n");
            sb.Append("  QueuedDate: ").Append(QueuedDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  FinishDate: ").Append(FinishDate).Append("\n");
            sb.Append("  Triggered: ").Append(Triggered).Append("\n");
            sb.Append("  LastChanges: ").Append(LastChanges).Append("\n");
            sb.Append("  Changes: ").Append(Changes).Append("\n");
            sb.Append("  Revisions: ").Append(Revisions).Append("\n");
            sb.Append("  VersionedSettingsRevision: ").Append(VersionedSettingsRevision).Append("\n");
            sb.Append("  ArtifactDependencyChanges: ").Append(ArtifactDependencyChanges).Append("\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  CompatibleAgents: ").Append(CompatibleAgents).Append("\n");
            sb.Append("  TestOccurrences: ").Append(TestOccurrences).Append("\n");
            sb.Append("  ProblemOccurrences: ").Append(ProblemOccurrences).Append("\n");
            sb.Append("  Artifacts: ").Append(Artifacts).Append("\n");
            sb.Append("  RelatedIssues: ").Append(RelatedIssues).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  ResultingProperties: ").Append(ResultingProperties).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  SnapshotDependencies: ").Append(SnapshotDependencies).Append("\n");
            sb.Append("  ArtifactDependencies: ").Append(ArtifactDependencies).Append("\n");
            sb.Append("  CustomArtifactDependencies: ").Append(CustomArtifactDependencies).Append("\n");
            sb.Append("  SettingsHash: ").Append(SettingsHash).Append("\n");
            sb.Append("  CurrentSettingsHash: ").Append(CurrentSettingsHash).Append("\n");
            sb.Append("  ModificationId: ").Append(ModificationId).Append("\n");
            sb.Append("  ChainModificationId: ").Append(ChainModificationId).Append("\n");
            sb.Append("  ReplacementIds: ").Append(ReplacementIds).Append("\n");
            sb.Append("  Related: ").Append(Related).Append("\n");
            sb.Append("  TriggeringOptions: ").Append(TriggeringOptions).Append("\n");
            sb.Append("  UsedByOtherBuilds: ").Append(UsedByOtherBuilds).Append("\n");
            sb.Append("  StatusChangeComment: ").Append(StatusChangeComment).Append("\n");
            sb.Append("  VcsLabels: ").Append(VcsLabels).Append("\n");
            sb.Append("  DetachedFromAgent: ").Append(DetachedFromAgent).Append("\n");
            sb.Append("  FinishOnAgentDate: ").Append(FinishOnAgentDate).Append("\n");
            sb.Append("  Customized: ").Append(Customized).Append("\n");
            sb.Append("  Customization: ").Append(Customization).Append("\n");
            sb.Append("  Locator: ").Append(Locator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildDto);
        }

        /// <summary>
        /// Returns true if BuildDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.BuildTypeId == input.BuildTypeId ||
                    (this.BuildTypeId != null &&
                    this.BuildTypeId.Equals(input.BuildTypeId))
                ) && 
                (
                    this.BuildTypeInternalId == input.BuildTypeInternalId ||
                    (this.BuildTypeInternalId != null &&
                    this.BuildTypeInternalId.Equals(input.BuildTypeInternalId))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Running == input.Running ||
                    (this.Running != null &&
                    this.Running.Equals(input.Running))
                ) && 
                (
                    this.Composite == input.Composite ||
                    (this.Composite != null &&
                    this.Composite.Equals(input.Composite))
                ) && 
                (
                    this.FailedToStart == input.FailedToStart ||
                    (this.FailedToStart != null &&
                    this.FailedToStart.Equals(input.FailedToStart))
                ) && 
                (
                    this.Personal == input.Personal ||
                    (this.Personal != null &&
                    this.Personal.Equals(input.Personal))
                ) && 
                (
                    this.PercentageComplete == input.PercentageComplete ||
                    (this.PercentageComplete != null &&
                    this.PercentageComplete.Equals(input.PercentageComplete))
                ) && 
                (
                    this.BranchName == input.BranchName ||
                    (this.BranchName != null &&
                    this.BranchName.Equals(input.BranchName))
                ) && 
                (
                    this.DefaultBranch == input.DefaultBranch ||
                    (this.DefaultBranch != null &&
                    this.DefaultBranch.Equals(input.DefaultBranch))
                ) && 
                (
                    this.UnspecifiedBranch == input.UnspecifiedBranch ||
                    (this.UnspecifiedBranch != null &&
                    this.UnspecifiedBranch.Equals(input.UnspecifiedBranch))
                ) && 
                (
                    this.History == input.History ||
                    (this.History != null &&
                    this.History.Equals(input.History))
                ) && 
                (
                    this.Pinned == input.Pinned ||
                    (this.Pinned != null &&
                    this.Pinned.Equals(input.Pinned))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.WebUrl == input.WebUrl ||
                    (this.WebUrl != null &&
                    this.WebUrl.Equals(input.WebUrl))
                ) && 
                (
                    this.QueuePosition == input.QueuePosition ||
                    (this.QueuePosition != null &&
                    this.QueuePosition.Equals(input.QueuePosition))
                ) && 
                (
                    this.LimitedChangesCount == input.LimitedChangesCount ||
                    (this.LimitedChangesCount != null &&
                    this.LimitedChangesCount.Equals(input.LimitedChangesCount))
                ) && 
                (
                    this.ArtifactsDirectory == input.ArtifactsDirectory ||
                    (this.ArtifactsDirectory != null &&
                    this.ArtifactsDirectory.Equals(input.ArtifactsDirectory))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.StatusText == input.StatusText ||
                    (this.StatusText != null &&
                    this.StatusText.Equals(input.StatusText))
                ) && 
                (
                    this.BuildType == input.BuildType ||
                    (this.BuildType != null &&
                    this.BuildType.Equals(input.BuildType))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                ) && 
                (
                    this.PinInfo == input.PinInfo ||
                    (this.PinInfo != null &&
                    this.PinInfo.Equals(input.PinInfo))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.StartEstimate == input.StartEstimate ||
                    (this.StartEstimate != null &&
                    this.StartEstimate.Equals(input.StartEstimate))
                ) && 
                (
                    this.WaitReason == input.WaitReason ||
                    (this.WaitReason != null &&
                    this.WaitReason.Equals(input.WaitReason))
                ) && 
                (
                    this.FinishEstimate == input.FinishEstimate ||
                    (this.FinishEstimate != null &&
                    this.FinishEstimate.Equals(input.FinishEstimate))
                ) && 
                (
                    this.RunningInfo == input.RunningInfo ||
                    (this.RunningInfo != null &&
                    this.RunningInfo.Equals(input.RunningInfo))
                ) && 
                (
                    this.CanceledInfo == input.CanceledInfo ||
                    (this.CanceledInfo != null &&
                    this.CanceledInfo.Equals(input.CanceledInfo))
                ) && 
                (
                    this.QueuedDate == input.QueuedDate ||
                    (this.QueuedDate != null &&
                    this.QueuedDate.Equals(input.QueuedDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.FinishDate == input.FinishDate ||
                    (this.FinishDate != null &&
                    this.FinishDate.Equals(input.FinishDate))
                ) && 
                (
                    this.Triggered == input.Triggered ||
                    (this.Triggered != null &&
                    this.Triggered.Equals(input.Triggered))
                ) && 
                (
                    this.LastChanges == input.LastChanges ||
                    (this.LastChanges != null &&
                    this.LastChanges.Equals(input.LastChanges))
                ) && 
                (
                    this.Changes == input.Changes ||
                    (this.Changes != null &&
                    this.Changes.Equals(input.Changes))
                ) && 
                (
                    this.Revisions == input.Revisions ||
                    (this.Revisions != null &&
                    this.Revisions.Equals(input.Revisions))
                ) && 
                (
                    this.VersionedSettingsRevision == input.VersionedSettingsRevision ||
                    (this.VersionedSettingsRevision != null &&
                    this.VersionedSettingsRevision.Equals(input.VersionedSettingsRevision))
                ) && 
                (
                    this.ArtifactDependencyChanges == input.ArtifactDependencyChanges ||
                    (this.ArtifactDependencyChanges != null &&
                    this.ArtifactDependencyChanges.Equals(input.ArtifactDependencyChanges))
                ) && 
                (
                    this.Agent == input.Agent ||
                    (this.Agent != null &&
                    this.Agent.Equals(input.Agent))
                ) && 
                (
                    this.CompatibleAgents == input.CompatibleAgents ||
                    (this.CompatibleAgents != null &&
                    this.CompatibleAgents.Equals(input.CompatibleAgents))
                ) && 
                (
                    this.TestOccurrences == input.TestOccurrences ||
                    (this.TestOccurrences != null &&
                    this.TestOccurrences.Equals(input.TestOccurrences))
                ) && 
                (
                    this.ProblemOccurrences == input.ProblemOccurrences ||
                    (this.ProblemOccurrences != null &&
                    this.ProblemOccurrences.Equals(input.ProblemOccurrences))
                ) && 
                (
                    this.Artifacts == input.Artifacts ||
                    (this.Artifacts != null &&
                    this.Artifacts.Equals(input.Artifacts))
                ) && 
                (
                    this.RelatedIssues == input.RelatedIssues ||
                    (this.RelatedIssues != null &&
                    this.RelatedIssues.Equals(input.RelatedIssues))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.ResultingProperties == input.ResultingProperties ||
                    (this.ResultingProperties != null &&
                    this.ResultingProperties.Equals(input.ResultingProperties))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.Statistics == input.Statistics ||
                    (this.Statistics != null &&
                    this.Statistics.Equals(input.Statistics))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.SnapshotDependencies == input.SnapshotDependencies ||
                    (this.SnapshotDependencies != null &&
                    this.SnapshotDependencies.Equals(input.SnapshotDependencies))
                ) && 
                (
                    this.ArtifactDependencies == input.ArtifactDependencies ||
                    (this.ArtifactDependencies != null &&
                    this.ArtifactDependencies.Equals(input.ArtifactDependencies))
                ) && 
                (
                    this.CustomArtifactDependencies == input.CustomArtifactDependencies ||
                    (this.CustomArtifactDependencies != null &&
                    this.CustomArtifactDependencies.Equals(input.CustomArtifactDependencies))
                ) && 
                (
                    this.SettingsHash == input.SettingsHash ||
                    (this.SettingsHash != null &&
                    this.SettingsHash.Equals(input.SettingsHash))
                ) && 
                (
                    this.CurrentSettingsHash == input.CurrentSettingsHash ||
                    (this.CurrentSettingsHash != null &&
                    this.CurrentSettingsHash.Equals(input.CurrentSettingsHash))
                ) && 
                (
                    this.ModificationId == input.ModificationId ||
                    (this.ModificationId != null &&
                    this.ModificationId.Equals(input.ModificationId))
                ) && 
                (
                    this.ChainModificationId == input.ChainModificationId ||
                    (this.ChainModificationId != null &&
                    this.ChainModificationId.Equals(input.ChainModificationId))
                ) && 
                (
                    this.ReplacementIds == input.ReplacementIds ||
                    (this.ReplacementIds != null &&
                    this.ReplacementIds.Equals(input.ReplacementIds))
                ) && 
                (
                    this.Related == input.Related ||
                    (this.Related != null &&
                    this.Related.Equals(input.Related))
                ) && 
                (
                    this.TriggeringOptions == input.TriggeringOptions ||
                    (this.TriggeringOptions != null &&
                    this.TriggeringOptions.Equals(input.TriggeringOptions))
                ) && 
                (
                    this.UsedByOtherBuilds == input.UsedByOtherBuilds ||
                    (this.UsedByOtherBuilds != null &&
                    this.UsedByOtherBuilds.Equals(input.UsedByOtherBuilds))
                ) && 
                (
                    this.StatusChangeComment == input.StatusChangeComment ||
                    (this.StatusChangeComment != null &&
                    this.StatusChangeComment.Equals(input.StatusChangeComment))
                ) && 
                (
                    this.VcsLabels == input.VcsLabels ||
                    this.VcsLabels != null &&
                    this.VcsLabels.SequenceEqual(input.VcsLabels)
                ) && 
                (
                    this.DetachedFromAgent == input.DetachedFromAgent ||
                    (this.DetachedFromAgent != null &&
                    this.DetachedFromAgent.Equals(input.DetachedFromAgent))
                ) && 
                (
                    this.FinishOnAgentDate == input.FinishOnAgentDate ||
                    (this.FinishOnAgentDate != null &&
                    this.FinishOnAgentDate.Equals(input.FinishOnAgentDate))
                ) && 
                (
                    this.Customized == input.Customized ||
                    (this.Customized != null &&
                    this.Customized.Equals(input.Customized))
                ) && 
                (
                    this.Customization == input.Customization ||
                    (this.Customization != null &&
                    this.Customization.Equals(input.Customization))
                ) && 
                (
                    this.Locator == input.Locator ||
                    (this.Locator != null &&
                    this.Locator.Equals(input.Locator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.BuildTypeId != null)
                    hashCode = hashCode * 59 + this.BuildTypeId.GetHashCode();
                if (this.BuildTypeInternalId != null)
                    hashCode = hashCode * 59 + this.BuildTypeInternalId.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Running != null)
                    hashCode = hashCode * 59 + this.Running.GetHashCode();
                if (this.Composite != null)
                    hashCode = hashCode * 59 + this.Composite.GetHashCode();
                if (this.FailedToStart != null)
                    hashCode = hashCode * 59 + this.FailedToStart.GetHashCode();
                if (this.Personal != null)
                    hashCode = hashCode * 59 + this.Personal.GetHashCode();
                if (this.PercentageComplete != null)
                    hashCode = hashCode * 59 + this.PercentageComplete.GetHashCode();
                if (this.BranchName != null)
                    hashCode = hashCode * 59 + this.BranchName.GetHashCode();
                if (this.DefaultBranch != null)
                    hashCode = hashCode * 59 + this.DefaultBranch.GetHashCode();
                if (this.UnspecifiedBranch != null)
                    hashCode = hashCode * 59 + this.UnspecifiedBranch.GetHashCode();
                if (this.History != null)
                    hashCode = hashCode * 59 + this.History.GetHashCode();
                if (this.Pinned != null)
                    hashCode = hashCode * 59 + this.Pinned.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.WebUrl != null)
                    hashCode = hashCode * 59 + this.WebUrl.GetHashCode();
                if (this.QueuePosition != null)
                    hashCode = hashCode * 59 + this.QueuePosition.GetHashCode();
                if (this.LimitedChangesCount != null)
                    hashCode = hashCode * 59 + this.LimitedChangesCount.GetHashCode();
                if (this.ArtifactsDirectory != null)
                    hashCode = hashCode * 59 + this.ArtifactsDirectory.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.StatusText != null)
                    hashCode = hashCode * 59 + this.StatusText.GetHashCode();
                if (this.BuildType != null)
                    hashCode = hashCode * 59 + this.BuildType.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.PinInfo != null)
                    hashCode = hashCode * 59 + this.PinInfo.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.StartEstimate != null)
                    hashCode = hashCode * 59 + this.StartEstimate.GetHashCode();
                if (this.WaitReason != null)
                    hashCode = hashCode * 59 + this.WaitReason.GetHashCode();
                if (this.FinishEstimate != null)
                    hashCode = hashCode * 59 + this.FinishEstimate.GetHashCode();
                if (this.RunningInfo != null)
                    hashCode = hashCode * 59 + this.RunningInfo.GetHashCode();
                if (this.CanceledInfo != null)
                    hashCode = hashCode * 59 + this.CanceledInfo.GetHashCode();
                if (this.QueuedDate != null)
                    hashCode = hashCode * 59 + this.QueuedDate.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.FinishDate != null)
                    hashCode = hashCode * 59 + this.FinishDate.GetHashCode();
                if (this.Triggered != null)
                    hashCode = hashCode * 59 + this.Triggered.GetHashCode();
                if (this.LastChanges != null)
                    hashCode = hashCode * 59 + this.LastChanges.GetHashCode();
                if (this.Changes != null)
                    hashCode = hashCode * 59 + this.Changes.GetHashCode();
                if (this.Revisions != null)
                    hashCode = hashCode * 59 + this.Revisions.GetHashCode();
                if (this.VersionedSettingsRevision != null)
                    hashCode = hashCode * 59 + this.VersionedSettingsRevision.GetHashCode();
                if (this.ArtifactDependencyChanges != null)
                    hashCode = hashCode * 59 + this.ArtifactDependencyChanges.GetHashCode();
                if (this.Agent != null)
                    hashCode = hashCode * 59 + this.Agent.GetHashCode();
                if (this.CompatibleAgents != null)
                    hashCode = hashCode * 59 + this.CompatibleAgents.GetHashCode();
                if (this.TestOccurrences != null)
                    hashCode = hashCode * 59 + this.TestOccurrences.GetHashCode();
                if (this.ProblemOccurrences != null)
                    hashCode = hashCode * 59 + this.ProblemOccurrences.GetHashCode();
                if (this.Artifacts != null)
                    hashCode = hashCode * 59 + this.Artifacts.GetHashCode();
                if (this.RelatedIssues != null)
                    hashCode = hashCode * 59 + this.RelatedIssues.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.ResultingProperties != null)
                    hashCode = hashCode * 59 + this.ResultingProperties.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Statistics != null)
                    hashCode = hashCode * 59 + this.Statistics.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.SnapshotDependencies != null)
                    hashCode = hashCode * 59 + this.SnapshotDependencies.GetHashCode();
                if (this.ArtifactDependencies != null)
                    hashCode = hashCode * 59 + this.ArtifactDependencies.GetHashCode();
                if (this.CustomArtifactDependencies != null)
                    hashCode = hashCode * 59 + this.CustomArtifactDependencies.GetHashCode();
                if (this.SettingsHash != null)
                    hashCode = hashCode * 59 + this.SettingsHash.GetHashCode();
                if (this.CurrentSettingsHash != null)
                    hashCode = hashCode * 59 + this.CurrentSettingsHash.GetHashCode();
                if (this.ModificationId != null)
                    hashCode = hashCode * 59 + this.ModificationId.GetHashCode();
                if (this.ChainModificationId != null)
                    hashCode = hashCode * 59 + this.ChainModificationId.GetHashCode();
                if (this.ReplacementIds != null)
                    hashCode = hashCode * 59 + this.ReplacementIds.GetHashCode();
                if (this.Related != null)
                    hashCode = hashCode * 59 + this.Related.GetHashCode();
                if (this.TriggeringOptions != null)
                    hashCode = hashCode * 59 + this.TriggeringOptions.GetHashCode();
                if (this.UsedByOtherBuilds != null)
                    hashCode = hashCode * 59 + this.UsedByOtherBuilds.GetHashCode();
                if (this.StatusChangeComment != null)
                    hashCode = hashCode * 59 + this.StatusChangeComment.GetHashCode();
                if (this.VcsLabels != null)
                    hashCode = hashCode * 59 + this.VcsLabels.GetHashCode();
                if (this.DetachedFromAgent != null)
                    hashCode = hashCode * 59 + this.DetachedFromAgent.GetHashCode();
                if (this.FinishOnAgentDate != null)
                    hashCode = hashCode * 59 + this.FinishOnAgentDate.GetHashCode();
                if (this.Customized != null)
                    hashCode = hashCode * 59 + this.Customized.GetHashCode();
                if (this.Customization != null)
                    hashCode = hashCode * 59 + this.Customization.GetHashCode();
                if (this.Locator != null)
                    hashCode = hashCode * 59 + this.Locator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
