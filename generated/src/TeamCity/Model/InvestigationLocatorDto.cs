/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// InvestigationLocatorDto
    /// </summary>
    [DataContract]
    public partial class InvestigationLocatorDto :  IEquatable<InvestigationLocatorDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvestigationLocatorDto" /> class.
        /// </summary>
        /// <param name="affectedProject">affectedProject.</param>
        /// <param name="assignee">assignee.</param>
        /// <param name="assignmentProject">assignmentProject.</param>
        /// <param name="buildType">buildType.</param>
        /// <param name="count">count.</param>
        /// <param name="lookupLimit">lookupLimit.</param>
        /// <param name="problem">problem.</param>
        /// <param name="reporter">reporter.</param>
        /// <param name="resolution">resolution.</param>
        /// <param name="sinceDate">sinceDate.</param>
        /// <param name="start">start.</param>
        /// <param name="state">state.</param>
        /// <param name="test">test.</param>
        /// <param name="type">type.</param>
        public InvestigationLocatorDto(string affectedProject = default(string), string assignee = default(string), string assignmentProject = default(string), string buildType = default(string), string count = default(string), string lookupLimit = default(string), string problem = default(string), string reporter = default(string), string resolution = default(string), string sinceDate = default(string), string start = default(string), string state = default(string), string test = default(string), string type = default(string))
        {
            this.AffectedProject = affectedProject;
            this.Assignee = assignee;
            this.AssignmentProject = assignmentProject;
            this.BuildType = buildType;
            this.Count = count;
            this.LookupLimit = lookupLimit;
            this.Problem = problem;
            this.Reporter = reporter;
            this.Resolution = resolution;
            this.SinceDate = sinceDate;
            this.Start = start;
            this.State = state;
            this.Test = test;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets AffectedProject
        /// </summary>
        [DataMember(Name="affectedProject", EmitDefaultValue=false)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="assignee", EmitDefaultValue=false)]
        public string Assignee { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentProject
        /// </summary>
        [DataMember(Name="assignmentProject", EmitDefaultValue=false)]
        public string AssignmentProject { get; set; }

        /// <summary>
        /// Gets or Sets BuildType
        /// </summary>
        [DataMember(Name="buildType", EmitDefaultValue=false)]
        public string BuildType { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public string Count { get; set; }

        /// <summary>
        /// Gets or Sets LookupLimit
        /// </summary>
        [DataMember(Name="lookupLimit", EmitDefaultValue=false)]
        public string LookupLimit { get; set; }

        /// <summary>
        /// Gets or Sets Problem
        /// </summary>
        [DataMember(Name="problem", EmitDefaultValue=false)]
        public string Problem { get; set; }

        /// <summary>
        /// Gets or Sets Reporter
        /// </summary>
        [DataMember(Name="reporter", EmitDefaultValue=false)]
        public string Reporter { get; set; }

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name="resolution", EmitDefaultValue=false)]
        public string Resolution { get; set; }

        /// <summary>
        /// Gets or Sets SinceDate
        /// </summary>
        [DataMember(Name="sinceDate", EmitDefaultValue=false)]
        public string SinceDate { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public string Test { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvestigationLocatorDto {\n");
            sb.Append("  AffectedProject: ").Append(AffectedProject).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  AssignmentProject: ").Append(AssignmentProject).Append("\n");
            sb.Append("  BuildType: ").Append(BuildType).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  LookupLimit: ").Append(LookupLimit).Append("\n");
            sb.Append("  Problem: ").Append(Problem).Append("\n");
            sb.Append("  Reporter: ").Append(Reporter).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  SinceDate: ").Append(SinceDate).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvestigationLocatorDto);
        }

        /// <summary>
        /// Returns true if InvestigationLocatorDto instances are equal
        /// </summary>
        /// <param name="input">Instance of InvestigationLocatorDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvestigationLocatorDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AffectedProject == input.AffectedProject ||
                    (this.AffectedProject != null &&
                    this.AffectedProject.Equals(input.AffectedProject))
                ) && 
                (
                    this.Assignee == input.Assignee ||
                    (this.Assignee != null &&
                    this.Assignee.Equals(input.Assignee))
                ) && 
                (
                    this.AssignmentProject == input.AssignmentProject ||
                    (this.AssignmentProject != null &&
                    this.AssignmentProject.Equals(input.AssignmentProject))
                ) && 
                (
                    this.BuildType == input.BuildType ||
                    (this.BuildType != null &&
                    this.BuildType.Equals(input.BuildType))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.LookupLimit == input.LookupLimit ||
                    (this.LookupLimit != null &&
                    this.LookupLimit.Equals(input.LookupLimit))
                ) && 
                (
                    this.Problem == input.Problem ||
                    (this.Problem != null &&
                    this.Problem.Equals(input.Problem))
                ) && 
                (
                    this.Reporter == input.Reporter ||
                    (this.Reporter != null &&
                    this.Reporter.Equals(input.Reporter))
                ) && 
                (
                    this.Resolution == input.Resolution ||
                    (this.Resolution != null &&
                    this.Resolution.Equals(input.Resolution))
                ) && 
                (
                    this.SinceDate == input.SinceDate ||
                    (this.SinceDate != null &&
                    this.SinceDate.Equals(input.SinceDate))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Test == input.Test ||
                    (this.Test != null &&
                    this.Test.Equals(input.Test))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AffectedProject != null)
                    hashCode = hashCode * 59 + this.AffectedProject.GetHashCode();
                if (this.Assignee != null)
                    hashCode = hashCode * 59 + this.Assignee.GetHashCode();
                if (this.AssignmentProject != null)
                    hashCode = hashCode * 59 + this.AssignmentProject.GetHashCode();
                if (this.BuildType != null)
                    hashCode = hashCode * 59 + this.BuildType.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.LookupLimit != null)
                    hashCode = hashCode * 59 + this.LookupLimit.GetHashCode();
                if (this.Problem != null)
                    hashCode = hashCode * 59 + this.Problem.GetHashCode();
                if (this.Reporter != null)
                    hashCode = hashCode * 59 + this.Reporter.GetHashCode();
                if (this.Resolution != null)
                    hashCode = hashCode * 59 + this.Resolution.GetHashCode();
                if (this.SinceDate != null)
                    hashCode = hashCode * 59 + this.SinceDate.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Test != null)
                    hashCode = hashCode * 59 + this.Test.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
