/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// ProblemDto
    /// </summary>
    [DataContract]
    public partial class ProblemDto :  IEquatable<ProblemDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProblemDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="type">type.</param>
        /// <param name="identity">identity.</param>
        /// <param name="href">href.</param>
        /// <param name="description">description.</param>
        /// <param name="mutes">mutes.</param>
        /// <param name="investigations">investigations.</param>
        /// <param name="problemOccurrences">problemOccurrences.</param>
        /// <param name="locator">locator.</param>
        public ProblemDto(string id = default(string), string type = default(string), string identity = default(string), string href = default(string), string description = default(string), MutesDto mutes = default(MutesDto), InvestigationsDto investigations = default(InvestigationsDto), ProblemOccurrencesDto problemOccurrences = default(ProblemOccurrencesDto), string locator = default(string))
        {
            this.Id = id;
            this.Type = type;
            this.Identity = identity;
            this.Href = href;
            this.Description = description;
            this.Mutes = mutes;
            this.Investigations = investigations;
            this.ProblemOccurrences = problemOccurrences;
            this.Locator = locator;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Identity
        /// </summary>
        [DataMember(Name="identity", EmitDefaultValue=false)]
        public string Identity { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Mutes
        /// </summary>
        [DataMember(Name="mutes", EmitDefaultValue=false)]
        public MutesDto Mutes { get; set; }

        /// <summary>
        /// Gets or Sets Investigations
        /// </summary>
        [DataMember(Name="investigations", EmitDefaultValue=false)]
        public InvestigationsDto Investigations { get; set; }

        /// <summary>
        /// Gets or Sets ProblemOccurrences
        /// </summary>
        [DataMember(Name="problemOccurrences", EmitDefaultValue=false)]
        public ProblemOccurrencesDto ProblemOccurrences { get; set; }

        /// <summary>
        /// Gets or Sets Locator
        /// </summary>
        [DataMember(Name="locator", EmitDefaultValue=false)]
        public string Locator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProblemDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Mutes: ").Append(Mutes).Append("\n");
            sb.Append("  Investigations: ").Append(Investigations).Append("\n");
            sb.Append("  ProblemOccurrences: ").Append(ProblemOccurrences).Append("\n");
            sb.Append("  Locator: ").Append(Locator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProblemDto);
        }

        /// <summary>
        /// Returns true if ProblemDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ProblemDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProblemDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Mutes == input.Mutes ||
                    (this.Mutes != null &&
                    this.Mutes.Equals(input.Mutes))
                ) && 
                (
                    this.Investigations == input.Investigations ||
                    (this.Investigations != null &&
                    this.Investigations.Equals(input.Investigations))
                ) && 
                (
                    this.ProblemOccurrences == input.ProblemOccurrences ||
                    (this.ProblemOccurrences != null &&
                    this.ProblemOccurrences.Equals(input.ProblemOccurrences))
                ) && 
                (
                    this.Locator == input.Locator ||
                    (this.Locator != null &&
                    this.Locator.Equals(input.Locator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Identity != null)
                    hashCode = hashCode * 59 + this.Identity.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Mutes != null)
                    hashCode = hashCode * 59 + this.Mutes.GetHashCode();
                if (this.Investigations != null)
                    hashCode = hashCode * 59 + this.Investigations.GetHashCode();
                if (this.ProblemOccurrences != null)
                    hashCode = hashCode * 59 + this.ProblemOccurrences.GetHashCode();
                if (this.Locator != null)
                    hashCode = hashCode * 59 + this.Locator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
