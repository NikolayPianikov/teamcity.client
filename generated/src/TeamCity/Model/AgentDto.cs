/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// AgentDto
    /// </summary>
    [DataContract]
    public partial class AgentDto :  IEquatable<AgentDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AgentDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="typeId">typeId.</param>
        /// <param name="connected">connected.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="authorized">authorized.</param>
        /// <param name="uptodate">uptodate.</param>
        /// <param name="outdated">outdated.</param>
        /// <param name="pluginsOutdated">pluginsOutdated.</param>
        /// <param name="javaOutdated">javaOutdated.</param>
        /// <param name="ip">ip.</param>
        /// <param name="protocol">protocol.</param>
        /// <param name="version">version.</param>
        /// <param name="currentAgentVersion">currentAgentVersion.</param>
        /// <param name="lastActivityTime">lastActivityTime.</param>
        /// <param name="idleSinceTime">idleSinceTime.</param>
        /// <param name="disconnectionComment">disconnectionComment.</param>
        /// <param name="registrationTimestamp">registrationTimestamp.</param>
        /// <param name="host">host.</param>
        /// <param name="cpuRank">cpuRank.</param>
        /// <param name="port">port.</param>
        /// <param name="href">href.</param>
        /// <param name="webUrl">webUrl.</param>
        /// <param name="build">build.</param>
        /// <param name="links">links.</param>
        /// <param name="enabledInfo">enabledInfo.</param>
        /// <param name="authorizedInfo">authorizedInfo.</param>
        /// <param name="properties">properties.</param>
        /// <param name="cloudInstance">cloudInstance.</param>
        /// <param name="cloudImage">cloudImage.</param>
        /// <param name="environment">environment.</param>
        /// <param name="pool">pool.</param>
        /// <param name="compatibilityPolicy">compatibilityPolicy.</param>
        /// <param name="compatibleBuildTypes">compatibleBuildTypes.</param>
        /// <param name="incompatibleBuildTypes">incompatibleBuildTypes.</param>
        /// <param name="builds">builds.</param>
        /// <param name="locator">locator.</param>
        public AgentDto(int? id = default(int?), string name = default(string), int? typeId = default(int?), bool? connected = default(bool?), bool? enabled = default(bool?), bool? authorized = default(bool?), bool? uptodate = default(bool?), bool? outdated = default(bool?), bool? pluginsOutdated = default(bool?), bool? javaOutdated = default(bool?), string ip = default(string), string protocol = default(string), string version = default(string), string currentAgentVersion = default(string), string lastActivityTime = default(string), string idleSinceTime = default(string), string disconnectionComment = default(string), string registrationTimestamp = default(string), string host = default(string), int? cpuRank = default(int?), int? port = default(int?), string href = default(string), string webUrl = default(string), BuildDto build = default(BuildDto), LinksDto links = default(LinksDto), EnabledInfoDto enabledInfo = default(EnabledInfoDto), AuthorizedInfoDto authorizedInfo = default(AuthorizedInfoDto), PropertiesDto properties = default(PropertiesDto), CloudInstanceDto cloudInstance = default(CloudInstanceDto), CloudImageDto cloudImage = default(CloudImageDto), EnvironmentDto environment = default(EnvironmentDto), AgentPoolDto pool = default(AgentPoolDto), CompatibilityPolicyDto compatibilityPolicy = default(CompatibilityPolicyDto), BuildTypesDto compatibleBuildTypes = default(BuildTypesDto), CompatibilitiesDto incompatibleBuildTypes = default(CompatibilitiesDto), BuildsDto builds = default(BuildsDto), string locator = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.TypeId = typeId;
            this.Connected = connected;
            this.Enabled = enabled;
            this.Authorized = authorized;
            this.Uptodate = uptodate;
            this.Outdated = outdated;
            this.PluginsOutdated = pluginsOutdated;
            this.JavaOutdated = javaOutdated;
            this.Ip = ip;
            this.Protocol = protocol;
            this.Version = version;
            this.CurrentAgentVersion = currentAgentVersion;
            this.LastActivityTime = lastActivityTime;
            this.IdleSinceTime = idleSinceTime;
            this.DisconnectionComment = disconnectionComment;
            this.RegistrationTimestamp = registrationTimestamp;
            this.Host = host;
            this.CpuRank = cpuRank;
            this.Port = port;
            this.Href = href;
            this.WebUrl = webUrl;
            this.Build = build;
            this.Links = links;
            this.EnabledInfo = enabledInfo;
            this.AuthorizedInfo = authorizedInfo;
            this.Properties = properties;
            this.CloudInstance = cloudInstance;
            this.CloudImage = cloudImage;
            this.Environment = environment;
            this.Pool = pool;
            this.CompatibilityPolicy = compatibilityPolicy;
            this.CompatibleBuildTypes = compatibleBuildTypes;
            this.IncompatibleBuildTypes = incompatibleBuildTypes;
            this.Builds = builds;
            this.Locator = locator;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name="typeId", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Gets or Sets Connected
        /// </summary>
        [DataMember(Name="connected", EmitDefaultValue=false)]
        public bool? Connected { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Authorized
        /// </summary>
        [DataMember(Name="authorized", EmitDefaultValue=false)]
        public bool? Authorized { get; set; }

        /// <summary>
        /// Gets or Sets Uptodate
        /// </summary>
        [DataMember(Name="uptodate", EmitDefaultValue=false)]
        public bool? Uptodate { get; set; }

        /// <summary>
        /// Gets or Sets Outdated
        /// </summary>
        [DataMember(Name="outdated", EmitDefaultValue=false)]
        public bool? Outdated { get; set; }

        /// <summary>
        /// Gets or Sets PluginsOutdated
        /// </summary>
        [DataMember(Name="pluginsOutdated", EmitDefaultValue=false)]
        public bool? PluginsOutdated { get; set; }

        /// <summary>
        /// Gets or Sets JavaOutdated
        /// </summary>
        [DataMember(Name="javaOutdated", EmitDefaultValue=false)]
        public bool? JavaOutdated { get; set; }

        /// <summary>
        /// Gets or Sets Ip
        /// </summary>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAgentVersion
        /// </summary>
        [DataMember(Name="currentAgentVersion", EmitDefaultValue=false)]
        public string CurrentAgentVersion { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityTime
        /// </summary>
        [DataMember(Name="lastActivityTime", EmitDefaultValue=false)]
        public string LastActivityTime { get; set; }

        /// <summary>
        /// Gets or Sets IdleSinceTime
        /// </summary>
        [DataMember(Name="idleSinceTime", EmitDefaultValue=false)]
        public string IdleSinceTime { get; set; }

        /// <summary>
        /// Gets or Sets DisconnectionComment
        /// </summary>
        [DataMember(Name="disconnectionComment", EmitDefaultValue=false)]
        public string DisconnectionComment { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationTimestamp
        /// </summary>
        [DataMember(Name="registrationTimestamp", EmitDefaultValue=false)]
        public string RegistrationTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets CpuRank
        /// </summary>
        [DataMember(Name="cpuRank", EmitDefaultValue=false)]
        public int? CpuRank { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets WebUrl
        /// </summary>
        [DataMember(Name="webUrl", EmitDefaultValue=false)]
        public string WebUrl { get; set; }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name="build", EmitDefaultValue=false)]
        public BuildDto Build { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public LinksDto Links { get; set; }

        /// <summary>
        /// Gets or Sets EnabledInfo
        /// </summary>
        [DataMember(Name="enabledInfo", EmitDefaultValue=false)]
        public EnabledInfoDto EnabledInfo { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedInfo
        /// </summary>
        [DataMember(Name="authorizedInfo", EmitDefaultValue=false)]
        public AuthorizedInfoDto AuthorizedInfo { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public PropertiesDto Properties { get; set; }

        /// <summary>
        /// Gets or Sets CloudInstance
        /// </summary>
        [DataMember(Name="cloudInstance", EmitDefaultValue=false)]
        public CloudInstanceDto CloudInstance { get; set; }

        /// <summary>
        /// Gets or Sets CloudImage
        /// </summary>
        [DataMember(Name="cloudImage", EmitDefaultValue=false)]
        public CloudImageDto CloudImage { get; set; }

        /// <summary>
        /// Gets or Sets Environment
        /// </summary>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public EnvironmentDto Environment { get; set; }

        /// <summary>
        /// Gets or Sets Pool
        /// </summary>
        [DataMember(Name="pool", EmitDefaultValue=false)]
        public AgentPoolDto Pool { get; set; }

        /// <summary>
        /// Gets or Sets CompatibilityPolicy
        /// </summary>
        [DataMember(Name="compatibilityPolicy", EmitDefaultValue=false)]
        public CompatibilityPolicyDto CompatibilityPolicy { get; set; }

        /// <summary>
        /// Gets or Sets CompatibleBuildTypes
        /// </summary>
        [DataMember(Name="compatibleBuildTypes", EmitDefaultValue=false)]
        public BuildTypesDto CompatibleBuildTypes { get; set; }

        /// <summary>
        /// Gets or Sets IncompatibleBuildTypes
        /// </summary>
        [DataMember(Name="incompatibleBuildTypes", EmitDefaultValue=false)]
        public CompatibilitiesDto IncompatibleBuildTypes { get; set; }

        /// <summary>
        /// Gets or Sets Builds
        /// </summary>
        [DataMember(Name="builds", EmitDefaultValue=false)]
        public BuildsDto Builds { get; set; }

        /// <summary>
        /// Gets or Sets Locator
        /// </summary>
        [DataMember(Name="locator", EmitDefaultValue=false)]
        public string Locator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AgentDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Connected: ").Append(Connected).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Authorized: ").Append(Authorized).Append("\n");
            sb.Append("  Uptodate: ").Append(Uptodate).Append("\n");
            sb.Append("  Outdated: ").Append(Outdated).Append("\n");
            sb.Append("  PluginsOutdated: ").Append(PluginsOutdated).Append("\n");
            sb.Append("  JavaOutdated: ").Append(JavaOutdated).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  CurrentAgentVersion: ").Append(CurrentAgentVersion).Append("\n");
            sb.Append("  LastActivityTime: ").Append(LastActivityTime).Append("\n");
            sb.Append("  IdleSinceTime: ").Append(IdleSinceTime).Append("\n");
            sb.Append("  DisconnectionComment: ").Append(DisconnectionComment).Append("\n");
            sb.Append("  RegistrationTimestamp: ").Append(RegistrationTimestamp).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  CpuRank: ").Append(CpuRank).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  EnabledInfo: ").Append(EnabledInfo).Append("\n");
            sb.Append("  AuthorizedInfo: ").Append(AuthorizedInfo).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  CloudInstance: ").Append(CloudInstance).Append("\n");
            sb.Append("  CloudImage: ").Append(CloudImage).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  Pool: ").Append(Pool).Append("\n");
            sb.Append("  CompatibilityPolicy: ").Append(CompatibilityPolicy).Append("\n");
            sb.Append("  CompatibleBuildTypes: ").Append(CompatibleBuildTypes).Append("\n");
            sb.Append("  IncompatibleBuildTypes: ").Append(IncompatibleBuildTypes).Append("\n");
            sb.Append("  Builds: ").Append(Builds).Append("\n");
            sb.Append("  Locator: ").Append(Locator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AgentDto);
        }

        /// <summary>
        /// Returns true if AgentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AgentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AgentDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.Connected == input.Connected ||
                    (this.Connected != null &&
                    this.Connected.Equals(input.Connected))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Authorized == input.Authorized ||
                    (this.Authorized != null &&
                    this.Authorized.Equals(input.Authorized))
                ) && 
                (
                    this.Uptodate == input.Uptodate ||
                    (this.Uptodate != null &&
                    this.Uptodate.Equals(input.Uptodate))
                ) && 
                (
                    this.Outdated == input.Outdated ||
                    (this.Outdated != null &&
                    this.Outdated.Equals(input.Outdated))
                ) && 
                (
                    this.PluginsOutdated == input.PluginsOutdated ||
                    (this.PluginsOutdated != null &&
                    this.PluginsOutdated.Equals(input.PluginsOutdated))
                ) && 
                (
                    this.JavaOutdated == input.JavaOutdated ||
                    (this.JavaOutdated != null &&
                    this.JavaOutdated.Equals(input.JavaOutdated))
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.CurrentAgentVersion == input.CurrentAgentVersion ||
                    (this.CurrentAgentVersion != null &&
                    this.CurrentAgentVersion.Equals(input.CurrentAgentVersion))
                ) && 
                (
                    this.LastActivityTime == input.LastActivityTime ||
                    (this.LastActivityTime != null &&
                    this.LastActivityTime.Equals(input.LastActivityTime))
                ) && 
                (
                    this.IdleSinceTime == input.IdleSinceTime ||
                    (this.IdleSinceTime != null &&
                    this.IdleSinceTime.Equals(input.IdleSinceTime))
                ) && 
                (
                    this.DisconnectionComment == input.DisconnectionComment ||
                    (this.DisconnectionComment != null &&
                    this.DisconnectionComment.Equals(input.DisconnectionComment))
                ) && 
                (
                    this.RegistrationTimestamp == input.RegistrationTimestamp ||
                    (this.RegistrationTimestamp != null &&
                    this.RegistrationTimestamp.Equals(input.RegistrationTimestamp))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.CpuRank == input.CpuRank ||
                    (this.CpuRank != null &&
                    this.CpuRank.Equals(input.CpuRank))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.WebUrl == input.WebUrl ||
                    (this.WebUrl != null &&
                    this.WebUrl.Equals(input.WebUrl))
                ) && 
                (
                    this.Build == input.Build ||
                    (this.Build != null &&
                    this.Build.Equals(input.Build))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.EnabledInfo == input.EnabledInfo ||
                    (this.EnabledInfo != null &&
                    this.EnabledInfo.Equals(input.EnabledInfo))
                ) && 
                (
                    this.AuthorizedInfo == input.AuthorizedInfo ||
                    (this.AuthorizedInfo != null &&
                    this.AuthorizedInfo.Equals(input.AuthorizedInfo))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.CloudInstance == input.CloudInstance ||
                    (this.CloudInstance != null &&
                    this.CloudInstance.Equals(input.CloudInstance))
                ) && 
                (
                    this.CloudImage == input.CloudImage ||
                    (this.CloudImage != null &&
                    this.CloudImage.Equals(input.CloudImage))
                ) && 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                ) && 
                (
                    this.Pool == input.Pool ||
                    (this.Pool != null &&
                    this.Pool.Equals(input.Pool))
                ) && 
                (
                    this.CompatibilityPolicy == input.CompatibilityPolicy ||
                    (this.CompatibilityPolicy != null &&
                    this.CompatibilityPolicy.Equals(input.CompatibilityPolicy))
                ) && 
                (
                    this.CompatibleBuildTypes == input.CompatibleBuildTypes ||
                    (this.CompatibleBuildTypes != null &&
                    this.CompatibleBuildTypes.Equals(input.CompatibleBuildTypes))
                ) && 
                (
                    this.IncompatibleBuildTypes == input.IncompatibleBuildTypes ||
                    (this.IncompatibleBuildTypes != null &&
                    this.IncompatibleBuildTypes.Equals(input.IncompatibleBuildTypes))
                ) && 
                (
                    this.Builds == input.Builds ||
                    (this.Builds != null &&
                    this.Builds.Equals(input.Builds))
                ) && 
                (
                    this.Locator == input.Locator ||
                    (this.Locator != null &&
                    this.Locator.Equals(input.Locator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.Connected != null)
                    hashCode = hashCode * 59 + this.Connected.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Authorized != null)
                    hashCode = hashCode * 59 + this.Authorized.GetHashCode();
                if (this.Uptodate != null)
                    hashCode = hashCode * 59 + this.Uptodate.GetHashCode();
                if (this.Outdated != null)
                    hashCode = hashCode * 59 + this.Outdated.GetHashCode();
                if (this.PluginsOutdated != null)
                    hashCode = hashCode * 59 + this.PluginsOutdated.GetHashCode();
                if (this.JavaOutdated != null)
                    hashCode = hashCode * 59 + this.JavaOutdated.GetHashCode();
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.CurrentAgentVersion != null)
                    hashCode = hashCode * 59 + this.CurrentAgentVersion.GetHashCode();
                if (this.LastActivityTime != null)
                    hashCode = hashCode * 59 + this.LastActivityTime.GetHashCode();
                if (this.IdleSinceTime != null)
                    hashCode = hashCode * 59 + this.IdleSinceTime.GetHashCode();
                if (this.DisconnectionComment != null)
                    hashCode = hashCode * 59 + this.DisconnectionComment.GetHashCode();
                if (this.RegistrationTimestamp != null)
                    hashCode = hashCode * 59 + this.RegistrationTimestamp.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.CpuRank != null)
                    hashCode = hashCode * 59 + this.CpuRank.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.WebUrl != null)
                    hashCode = hashCode * 59 + this.WebUrl.GetHashCode();
                if (this.Build != null)
                    hashCode = hashCode * 59 + this.Build.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.EnabledInfo != null)
                    hashCode = hashCode * 59 + this.EnabledInfo.GetHashCode();
                if (this.AuthorizedInfo != null)
                    hashCode = hashCode * 59 + this.AuthorizedInfo.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.CloudInstance != null)
                    hashCode = hashCode * 59 + this.CloudInstance.GetHashCode();
                if (this.CloudImage != null)
                    hashCode = hashCode * 59 + this.CloudImage.GetHashCode();
                if (this.Environment != null)
                    hashCode = hashCode * 59 + this.Environment.GetHashCode();
                if (this.Pool != null)
                    hashCode = hashCode * 59 + this.Pool.GetHashCode();
                if (this.CompatibilityPolicy != null)
                    hashCode = hashCode * 59 + this.CompatibilityPolicy.GetHashCode();
                if (this.CompatibleBuildTypes != null)
                    hashCode = hashCode * 59 + this.CompatibleBuildTypes.GetHashCode();
                if (this.IncompatibleBuildTypes != null)
                    hashCode = hashCode * 59 + this.IncompatibleBuildTypes.GetHashCode();
                if (this.Builds != null)
                    hashCode = hashCode * 59 + this.Builds.GetHashCode();
                if (this.Locator != null)
                    hashCode = hashCode * 59 + this.Locator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
