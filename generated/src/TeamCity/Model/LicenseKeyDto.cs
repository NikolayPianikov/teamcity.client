/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// LicenseKeyDto
    /// </summary>
    [DataContract]
    public partial class LicenseKeyDto :  IEquatable<LicenseKeyDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseKeyDto" /> class.
        /// </summary>
        /// <param name="valid">valid.</param>
        /// <param name="active">active.</param>
        /// <param name="expired">expired.</param>
        /// <param name="obsolete">obsolete.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="maintenanceEndDate">maintenanceEndDate.</param>
        /// <param name="type">type.</param>
        /// <param name="servers">servers.</param>
        /// <param name="agents">agents.</param>
        /// <param name="unlimitedAgents">unlimitedAgents.</param>
        /// <param name="buildTypes">buildTypes.</param>
        /// <param name="unlimitedBuildTypes">unlimitedBuildTypes.</param>
        /// <param name="errorDetails">errorDetails.</param>
        /// <param name="key">key.</param>
        /// <param name="rawType">rawType.</param>
        public LicenseKeyDto(bool? valid = default(bool?), bool? active = default(bool?), bool? expired = default(bool?), bool? obsolete = default(bool?), string expirationDate = default(string), string maintenanceEndDate = default(string), string type = default(string), int? servers = default(int?), int? agents = default(int?), bool? unlimitedAgents = default(bool?), int? buildTypes = default(int?), bool? unlimitedBuildTypes = default(bool?), string errorDetails = default(string), string key = default(string), string rawType = default(string))
        {
            this.Valid = valid;
            this.Active = active;
            this.Expired = expired;
            this.Obsolete = obsolete;
            this.ExpirationDate = expirationDate;
            this.MaintenanceEndDate = maintenanceEndDate;
            this.Type = type;
            this.Servers = servers;
            this.Agents = agents;
            this.UnlimitedAgents = unlimitedAgents;
            this.BuildTypes = buildTypes;
            this.UnlimitedBuildTypes = unlimitedBuildTypes;
            this.ErrorDetails = errorDetails;
            this.Key = key;
            this.RawType = rawType;
        }
        
        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public bool? Valid { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets Expired
        /// </summary>
        [DataMember(Name="expired", EmitDefaultValue=false)]
        public bool? Expired { get; set; }

        /// <summary>
        /// Gets or Sets Obsolete
        /// </summary>
        [DataMember(Name="obsolete", EmitDefaultValue=false)]
        public bool? Obsolete { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets MaintenanceEndDate
        /// </summary>
        [DataMember(Name="maintenanceEndDate", EmitDefaultValue=false)]
        public string MaintenanceEndDate { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Servers
        /// </summary>
        [DataMember(Name="servers", EmitDefaultValue=false)]
        public int? Servers { get; set; }

        /// <summary>
        /// Gets or Sets Agents
        /// </summary>
        [DataMember(Name="agents", EmitDefaultValue=false)]
        public int? Agents { get; set; }

        /// <summary>
        /// Gets or Sets UnlimitedAgents
        /// </summary>
        [DataMember(Name="unlimitedAgents", EmitDefaultValue=false)]
        public bool? UnlimitedAgents { get; set; }

        /// <summary>
        /// Gets or Sets BuildTypes
        /// </summary>
        [DataMember(Name="buildTypes", EmitDefaultValue=false)]
        public int? BuildTypes { get; set; }

        /// <summary>
        /// Gets or Sets UnlimitedBuildTypes
        /// </summary>
        [DataMember(Name="unlimitedBuildTypes", EmitDefaultValue=false)]
        public bool? UnlimitedBuildTypes { get; set; }

        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public string ErrorDetails { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets RawType
        /// </summary>
        [DataMember(Name="rawType", EmitDefaultValue=false)]
        public string RawType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseKeyDto {\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  Obsolete: ").Append(Obsolete).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  MaintenanceEndDate: ").Append(MaintenanceEndDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Servers: ").Append(Servers).Append("\n");
            sb.Append("  Agents: ").Append(Agents).Append("\n");
            sb.Append("  UnlimitedAgents: ").Append(UnlimitedAgents).Append("\n");
            sb.Append("  BuildTypes: ").Append(BuildTypes).Append("\n");
            sb.Append("  UnlimitedBuildTypes: ").Append(UnlimitedBuildTypes).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  RawType: ").Append(RawType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenseKeyDto);
        }

        /// <summary>
        /// Returns true if LicenseKeyDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenseKeyDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseKeyDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Valid == input.Valid ||
                    (this.Valid != null &&
                    this.Valid.Equals(input.Valid))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Expired == input.Expired ||
                    (this.Expired != null &&
                    this.Expired.Equals(input.Expired))
                ) && 
                (
                    this.Obsolete == input.Obsolete ||
                    (this.Obsolete != null &&
                    this.Obsolete.Equals(input.Obsolete))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.MaintenanceEndDate == input.MaintenanceEndDate ||
                    (this.MaintenanceEndDate != null &&
                    this.MaintenanceEndDate.Equals(input.MaintenanceEndDate))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Servers == input.Servers ||
                    (this.Servers != null &&
                    this.Servers.Equals(input.Servers))
                ) && 
                (
                    this.Agents == input.Agents ||
                    (this.Agents != null &&
                    this.Agents.Equals(input.Agents))
                ) && 
                (
                    this.UnlimitedAgents == input.UnlimitedAgents ||
                    (this.UnlimitedAgents != null &&
                    this.UnlimitedAgents.Equals(input.UnlimitedAgents))
                ) && 
                (
                    this.BuildTypes == input.BuildTypes ||
                    (this.BuildTypes != null &&
                    this.BuildTypes.Equals(input.BuildTypes))
                ) && 
                (
                    this.UnlimitedBuildTypes == input.UnlimitedBuildTypes ||
                    (this.UnlimitedBuildTypes != null &&
                    this.UnlimitedBuildTypes.Equals(input.UnlimitedBuildTypes))
                ) && 
                (
                    this.ErrorDetails == input.ErrorDetails ||
                    (this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(input.ErrorDetails))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.RawType == input.RawType ||
                    (this.RawType != null &&
                    this.RawType.Equals(input.RawType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Valid != null)
                    hashCode = hashCode * 59 + this.Valid.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Expired != null)
                    hashCode = hashCode * 59 + this.Expired.GetHashCode();
                if (this.Obsolete != null)
                    hashCode = hashCode * 59 + this.Obsolete.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.MaintenanceEndDate != null)
                    hashCode = hashCode * 59 + this.MaintenanceEndDate.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Servers != null)
                    hashCode = hashCode * 59 + this.Servers.GetHashCode();
                if (this.Agents != null)
                    hashCode = hashCode * 59 + this.Agents.GetHashCode();
                if (this.UnlimitedAgents != null)
                    hashCode = hashCode * 59 + this.UnlimitedAgents.GetHashCode();
                if (this.BuildTypes != null)
                    hashCode = hashCode * 59 + this.BuildTypes.GetHashCode();
                if (this.UnlimitedBuildTypes != null)
                    hashCode = hashCode * 59 + this.UnlimitedBuildTypes.GetHashCode();
                if (this.ErrorDetails != null)
                    hashCode = hashCode * 59 + this.ErrorDetails.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.RawType != null)
                    hashCode = hashCode * 59 + this.RawType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
