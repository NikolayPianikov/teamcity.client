/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// BuildLocatorDto
    /// </summary>
    [DataContract]
    public partial class BuildLocatorDto :  IEquatable<BuildLocatorDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildLocatorDto" /> class.
        /// </summary>
        /// <param name="singleValue">singleValue.</param>
        /// <param name="affectedProject">affectedProject.</param>
        /// <param name="agent">agent.</param>
        /// <param name="agentName">agentName.</param>
        /// <param name="agentTypeId">agentTypeId.</param>
        /// <param name="any">any.</param>
        /// <param name="artifactDependency">artifactDependency.</param>
        /// <param name="branch">branch.</param>
        /// <param name="buildType">buildType.</param>
        /// <param name="canceled">canceled.</param>
        /// <param name="compatibleAgent">compatibleAgent.</param>
        /// <param name="composite">composite.</param>
        /// <param name="count">count.</param>
        /// <param name="defaultFilter">defaultFilter.</param>
        /// <param name="failedToStart">failedToStart.</param>
        /// <param name="finishDate">finishDate.</param>
        /// <param name="finished">finished.</param>
        /// <param name="hanging">hanging.</param>
        /// <param name="history">history.</param>
        /// <param name="id">id.</param>
        /// <param name="lookupLimit">lookupLimit.</param>
        /// <param name="number">number.</param>
        /// <param name="personal">personal.</param>
        /// <param name="pinned">pinned.</param>
        /// <param name="project">project.</param>
        /// <param name="property">property.</param>
        /// <param name="queued">queued.</param>
        /// <param name="queuedDate">queuedDate.</param>
        /// <param name="running">running.</param>
        /// <param name="sinceBuild">sinceBuild.</param>
        /// <param name="sinceDate">sinceDate.</param>
        /// <param name="snapshotDependency">snapshotDependency.</param>
        /// <param name="start">start.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="state">state.</param>
        /// <param name="status">status.</param>
        /// <param name="tag">tag.</param>
        /// <param name="taskId">taskId.</param>
        /// <param name="untilBuild">untilBuild.</param>
        /// <param name="untilDate">untilDate.</param>
        /// <param name="user">user.</param>
        public BuildLocatorDto(string singleValue = default(string), string affectedProject = default(string), string agent = default(string), string agentName = default(string), string agentTypeId = default(string), string any = default(string), string artifactDependency = default(string), string branch = default(string), string buildType = default(string), string canceled = default(string), string compatibleAgent = default(string), string composite = default(string), string count = default(string), string defaultFilter = default(string), string failedToStart = default(string), string finishDate = default(string), string finished = default(string), string hanging = default(string), string history = default(string), string id = default(string), string lookupLimit = default(string), string number = default(string), string personal = default(string), string pinned = default(string), string project = default(string), string property = default(string), string queued = default(string), string queuedDate = default(string), string running = default(string), string sinceBuild = default(string), string sinceDate = default(string), string snapshotDependency = default(string), string start = default(string), string startDate = default(string), string state = default(string), string status = default(string), string tag = default(string), string taskId = default(string), string untilBuild = default(string), string untilDate = default(string), string user = default(string))
        {
            this.SingleValue = singleValue;
            this.AffectedProject = affectedProject;
            this.Agent = agent;
            this.AgentName = agentName;
            this.AgentTypeId = agentTypeId;
            this.Any = any;
            this.ArtifactDependency = artifactDependency;
            this.Branch = branch;
            this.BuildType = buildType;
            this.Canceled = canceled;
            this.CompatibleAgent = compatibleAgent;
            this.Composite = composite;
            this.Count = count;
            this.DefaultFilter = defaultFilter;
            this.FailedToStart = failedToStart;
            this.FinishDate = finishDate;
            this.Finished = finished;
            this.Hanging = hanging;
            this.History = history;
            this.Id = id;
            this.LookupLimit = lookupLimit;
            this.Number = number;
            this.Personal = personal;
            this.Pinned = pinned;
            this.Project = project;
            this.Property = property;
            this.Queued = queued;
            this.QueuedDate = queuedDate;
            this.Running = running;
            this.SinceBuild = sinceBuild;
            this.SinceDate = sinceDate;
            this.SnapshotDependency = snapshotDependency;
            this.Start = start;
            this.StartDate = startDate;
            this.State = state;
            this.Status = status;
            this.Tag = tag;
            this.TaskId = taskId;
            this.UntilBuild = untilBuild;
            this.UntilDate = untilDate;
            this.User = user;
        }
        
        /// <summary>
        /// Gets or Sets SingleValue
        /// </summary>
        [DataMember(Name="$singleValue", EmitDefaultValue=false)]
        public string SingleValue { get; set; }

        /// <summary>
        /// Gets or Sets AffectedProject
        /// </summary>
        [DataMember(Name="affectedProject", EmitDefaultValue=false)]
        public string AffectedProject { get; set; }

        /// <summary>
        /// Gets or Sets Agent
        /// </summary>
        [DataMember(Name="agent", EmitDefaultValue=false)]
        public string Agent { get; set; }

        /// <summary>
        /// Gets or Sets AgentName
        /// </summary>
        [DataMember(Name="agentName", EmitDefaultValue=false)]
        public string AgentName { get; set; }

        /// <summary>
        /// Gets or Sets AgentTypeId
        /// </summary>
        [DataMember(Name="agentTypeId", EmitDefaultValue=false)]
        public string AgentTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Any
        /// </summary>
        [DataMember(Name="any", EmitDefaultValue=false)]
        public string Any { get; set; }

        /// <summary>
        /// Gets or Sets ArtifactDependency
        /// </summary>
        [DataMember(Name="artifactDependency", EmitDefaultValue=false)]
        public string ArtifactDependency { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets BuildType
        /// </summary>
        [DataMember(Name="buildType", EmitDefaultValue=false)]
        public string BuildType { get; set; }

        /// <summary>
        /// Gets or Sets Canceled
        /// </summary>
        [DataMember(Name="canceled", EmitDefaultValue=false)]
        public string Canceled { get; set; }

        /// <summary>
        /// Gets or Sets CompatibleAgent
        /// </summary>
        [DataMember(Name="compatibleAgent", EmitDefaultValue=false)]
        public string CompatibleAgent { get; set; }

        /// <summary>
        /// Gets or Sets Composite
        /// </summary>
        [DataMember(Name="composite", EmitDefaultValue=false)]
        public string Composite { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public string Count { get; set; }

        /// <summary>
        /// Gets or Sets DefaultFilter
        /// </summary>
        [DataMember(Name="defaultFilter", EmitDefaultValue=false)]
        public string DefaultFilter { get; set; }

        /// <summary>
        /// Gets or Sets FailedToStart
        /// </summary>
        [DataMember(Name="failedToStart", EmitDefaultValue=false)]
        public string FailedToStart { get; set; }

        /// <summary>
        /// Gets or Sets FinishDate
        /// </summary>
        [DataMember(Name="finishDate", EmitDefaultValue=false)]
        public string FinishDate { get; set; }

        /// <summary>
        /// Gets or Sets Finished
        /// </summary>
        [DataMember(Name="finished", EmitDefaultValue=false)]
        public string Finished { get; set; }

        /// <summary>
        /// Gets or Sets Hanging
        /// </summary>
        [DataMember(Name="hanging", EmitDefaultValue=false)]
        public string Hanging { get; set; }

        /// <summary>
        /// Gets or Sets History
        /// </summary>
        [DataMember(Name="history", EmitDefaultValue=false)]
        public string History { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LookupLimit
        /// </summary>
        [DataMember(Name="lookupLimit", EmitDefaultValue=false)]
        public string LookupLimit { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Personal
        /// </summary>
        [DataMember(Name="personal", EmitDefaultValue=false)]
        public string Personal { get; set; }

        /// <summary>
        /// Gets or Sets Pinned
        /// </summary>
        [DataMember(Name="pinned", EmitDefaultValue=false)]
        public string Pinned { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="project", EmitDefaultValue=false)]
        public string Project { get; set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name="property", EmitDefaultValue=false)]
        public string Property { get; set; }

        /// <summary>
        /// Gets or Sets Queued
        /// </summary>
        [DataMember(Name="queued", EmitDefaultValue=false)]
        public string Queued { get; set; }

        /// <summary>
        /// Gets or Sets QueuedDate
        /// </summary>
        [DataMember(Name="queuedDate", EmitDefaultValue=false)]
        public string QueuedDate { get; set; }

        /// <summary>
        /// Gets or Sets Running
        /// </summary>
        [DataMember(Name="running", EmitDefaultValue=false)]
        public string Running { get; set; }

        /// <summary>
        /// Gets or Sets SinceBuild
        /// </summary>
        [DataMember(Name="sinceBuild", EmitDefaultValue=false)]
        public string SinceBuild { get; set; }

        /// <summary>
        /// Gets or Sets SinceDate
        /// </summary>
        [DataMember(Name="sinceDate", EmitDefaultValue=false)]
        public string SinceDate { get; set; }

        /// <summary>
        /// Gets or Sets SnapshotDependency
        /// </summary>
        [DataMember(Name="snapshotDependency", EmitDefaultValue=false)]
        public string SnapshotDependency { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name="taskId", EmitDefaultValue=false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Gets or Sets UntilBuild
        /// </summary>
        [DataMember(Name="untilBuild", EmitDefaultValue=false)]
        public string UntilBuild { get; set; }

        /// <summary>
        /// Gets or Sets UntilDate
        /// </summary>
        [DataMember(Name="untilDate", EmitDefaultValue=false)]
        public string UntilDate { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildLocatorDto {\n");
            sb.Append("  SingleValue: ").Append(SingleValue).Append("\n");
            sb.Append("  AffectedProject: ").Append(AffectedProject).Append("\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  AgentName: ").Append(AgentName).Append("\n");
            sb.Append("  AgentTypeId: ").Append(AgentTypeId).Append("\n");
            sb.Append("  Any: ").Append(Any).Append("\n");
            sb.Append("  ArtifactDependency: ").Append(ArtifactDependency).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  BuildType: ").Append(BuildType).Append("\n");
            sb.Append("  Canceled: ").Append(Canceled).Append("\n");
            sb.Append("  CompatibleAgent: ").Append(CompatibleAgent).Append("\n");
            sb.Append("  Composite: ").Append(Composite).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  DefaultFilter: ").Append(DefaultFilter).Append("\n");
            sb.Append("  FailedToStart: ").Append(FailedToStart).Append("\n");
            sb.Append("  FinishDate: ").Append(FinishDate).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  Hanging: ").Append(Hanging).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LookupLimit: ").Append(LookupLimit).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Personal: ").Append(Personal).Append("\n");
            sb.Append("  Pinned: ").Append(Pinned).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Queued: ").Append(Queued).Append("\n");
            sb.Append("  QueuedDate: ").Append(QueuedDate).Append("\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  SinceBuild: ").Append(SinceBuild).Append("\n");
            sb.Append("  SinceDate: ").Append(SinceDate).Append("\n");
            sb.Append("  SnapshotDependency: ").Append(SnapshotDependency).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  UntilBuild: ").Append(UntilBuild).Append("\n");
            sb.Append("  UntilDate: ").Append(UntilDate).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildLocatorDto);
        }

        /// <summary>
        /// Returns true if BuildLocatorDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildLocatorDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildLocatorDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SingleValue == input.SingleValue ||
                    (this.SingleValue != null &&
                    this.SingleValue.Equals(input.SingleValue))
                ) && 
                (
                    this.AffectedProject == input.AffectedProject ||
                    (this.AffectedProject != null &&
                    this.AffectedProject.Equals(input.AffectedProject))
                ) && 
                (
                    this.Agent == input.Agent ||
                    (this.Agent != null &&
                    this.Agent.Equals(input.Agent))
                ) && 
                (
                    this.AgentName == input.AgentName ||
                    (this.AgentName != null &&
                    this.AgentName.Equals(input.AgentName))
                ) && 
                (
                    this.AgentTypeId == input.AgentTypeId ||
                    (this.AgentTypeId != null &&
                    this.AgentTypeId.Equals(input.AgentTypeId))
                ) && 
                (
                    this.Any == input.Any ||
                    (this.Any != null &&
                    this.Any.Equals(input.Any))
                ) && 
                (
                    this.ArtifactDependency == input.ArtifactDependency ||
                    (this.ArtifactDependency != null &&
                    this.ArtifactDependency.Equals(input.ArtifactDependency))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.BuildType == input.BuildType ||
                    (this.BuildType != null &&
                    this.BuildType.Equals(input.BuildType))
                ) && 
                (
                    this.Canceled == input.Canceled ||
                    (this.Canceled != null &&
                    this.Canceled.Equals(input.Canceled))
                ) && 
                (
                    this.CompatibleAgent == input.CompatibleAgent ||
                    (this.CompatibleAgent != null &&
                    this.CompatibleAgent.Equals(input.CompatibleAgent))
                ) && 
                (
                    this.Composite == input.Composite ||
                    (this.Composite != null &&
                    this.Composite.Equals(input.Composite))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.DefaultFilter == input.DefaultFilter ||
                    (this.DefaultFilter != null &&
                    this.DefaultFilter.Equals(input.DefaultFilter))
                ) && 
                (
                    this.FailedToStart == input.FailedToStart ||
                    (this.FailedToStart != null &&
                    this.FailedToStart.Equals(input.FailedToStart))
                ) && 
                (
                    this.FinishDate == input.FinishDate ||
                    (this.FinishDate != null &&
                    this.FinishDate.Equals(input.FinishDate))
                ) && 
                (
                    this.Finished == input.Finished ||
                    (this.Finished != null &&
                    this.Finished.Equals(input.Finished))
                ) && 
                (
                    this.Hanging == input.Hanging ||
                    (this.Hanging != null &&
                    this.Hanging.Equals(input.Hanging))
                ) && 
                (
                    this.History == input.History ||
                    (this.History != null &&
                    this.History.Equals(input.History))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LookupLimit == input.LookupLimit ||
                    (this.LookupLimit != null &&
                    this.LookupLimit.Equals(input.LookupLimit))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Personal == input.Personal ||
                    (this.Personal != null &&
                    this.Personal.Equals(input.Personal))
                ) && 
                (
                    this.Pinned == input.Pinned ||
                    (this.Pinned != null &&
                    this.Pinned.Equals(input.Pinned))
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.Queued == input.Queued ||
                    (this.Queued != null &&
                    this.Queued.Equals(input.Queued))
                ) && 
                (
                    this.QueuedDate == input.QueuedDate ||
                    (this.QueuedDate != null &&
                    this.QueuedDate.Equals(input.QueuedDate))
                ) && 
                (
                    this.Running == input.Running ||
                    (this.Running != null &&
                    this.Running.Equals(input.Running))
                ) && 
                (
                    this.SinceBuild == input.SinceBuild ||
                    (this.SinceBuild != null &&
                    this.SinceBuild.Equals(input.SinceBuild))
                ) && 
                (
                    this.SinceDate == input.SinceDate ||
                    (this.SinceDate != null &&
                    this.SinceDate.Equals(input.SinceDate))
                ) && 
                (
                    this.SnapshotDependency == input.SnapshotDependency ||
                    (this.SnapshotDependency != null &&
                    this.SnapshotDependency.Equals(input.SnapshotDependency))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.UntilBuild == input.UntilBuild ||
                    (this.UntilBuild != null &&
                    this.UntilBuild.Equals(input.UntilBuild))
                ) && 
                (
                    this.UntilDate == input.UntilDate ||
                    (this.UntilDate != null &&
                    this.UntilDate.Equals(input.UntilDate))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SingleValue != null)
                    hashCode = hashCode * 59 + this.SingleValue.GetHashCode();
                if (this.AffectedProject != null)
                    hashCode = hashCode * 59 + this.AffectedProject.GetHashCode();
                if (this.Agent != null)
                    hashCode = hashCode * 59 + this.Agent.GetHashCode();
                if (this.AgentName != null)
                    hashCode = hashCode * 59 + this.AgentName.GetHashCode();
                if (this.AgentTypeId != null)
                    hashCode = hashCode * 59 + this.AgentTypeId.GetHashCode();
                if (this.Any != null)
                    hashCode = hashCode * 59 + this.Any.GetHashCode();
                if (this.ArtifactDependency != null)
                    hashCode = hashCode * 59 + this.ArtifactDependency.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.BuildType != null)
                    hashCode = hashCode * 59 + this.BuildType.GetHashCode();
                if (this.Canceled != null)
                    hashCode = hashCode * 59 + this.Canceled.GetHashCode();
                if (this.CompatibleAgent != null)
                    hashCode = hashCode * 59 + this.CompatibleAgent.GetHashCode();
                if (this.Composite != null)
                    hashCode = hashCode * 59 + this.Composite.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.DefaultFilter != null)
                    hashCode = hashCode * 59 + this.DefaultFilter.GetHashCode();
                if (this.FailedToStart != null)
                    hashCode = hashCode * 59 + this.FailedToStart.GetHashCode();
                if (this.FinishDate != null)
                    hashCode = hashCode * 59 + this.FinishDate.GetHashCode();
                if (this.Finished != null)
                    hashCode = hashCode * 59 + this.Finished.GetHashCode();
                if (this.Hanging != null)
                    hashCode = hashCode * 59 + this.Hanging.GetHashCode();
                if (this.History != null)
                    hashCode = hashCode * 59 + this.History.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LookupLimit != null)
                    hashCode = hashCode * 59 + this.LookupLimit.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Personal != null)
                    hashCode = hashCode * 59 + this.Personal.GetHashCode();
                if (this.Pinned != null)
                    hashCode = hashCode * 59 + this.Pinned.GetHashCode();
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.Property != null)
                    hashCode = hashCode * 59 + this.Property.GetHashCode();
                if (this.Queued != null)
                    hashCode = hashCode * 59 + this.Queued.GetHashCode();
                if (this.QueuedDate != null)
                    hashCode = hashCode * 59 + this.QueuedDate.GetHashCode();
                if (this.Running != null)
                    hashCode = hashCode * 59 + this.Running.GetHashCode();
                if (this.SinceBuild != null)
                    hashCode = hashCode * 59 + this.SinceBuild.GetHashCode();
                if (this.SinceDate != null)
                    hashCode = hashCode * 59 + this.SinceDate.GetHashCode();
                if (this.SnapshotDependency != null)
                    hashCode = hashCode * 59 + this.SnapshotDependency.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.UntilBuild != null)
                    hashCode = hashCode * 59 + this.UntilBuild.GetHashCode();
                if (this.UntilDate != null)
                    hashCode = hashCode * 59 + this.UntilDate.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
