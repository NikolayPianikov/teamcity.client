/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// ProjectDto
    /// </summary>
    [DataContract]
    public partial class ProjectDto :  IEquatable<ProjectDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="internalId">internalId.</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="name">name.</param>
        /// <param name="parentProjectId">parentProjectId.</param>
        /// <param name="parentProjectInternalId">parentProjectInternalId.</param>
        /// <param name="parentProjectName">parentProjectName.</param>
        /// <param name="archived">archived.</param>
        /// <param name="description">description.</param>
        /// <param name="href">href.</param>
        /// <param name="webUrl">webUrl.</param>
        /// <param name="links">links.</param>
        /// <param name="parentProject">parentProject.</param>
        /// <param name="readOnlyUI">readOnlyUI.</param>
        /// <param name="defaultTemplate">defaultTemplate.</param>
        /// <param name="buildTypes">buildTypes.</param>
        /// <param name="templates">templates.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="vcsRoots">vcsRoots.</param>
        /// <param name="projectFeatures">projectFeatures.</param>
        /// <param name="projects">projects.</param>
        /// <param name="cloudProfiles">cloudProfiles.</param>
        /// <param name="locator">locator.</param>
        public ProjectDto(string id = default(string), string internalId = default(string), string uuid = default(string), string name = default(string), string parentProjectId = default(string), string parentProjectInternalId = default(string), string parentProjectName = default(string), bool? archived = default(bool?), string description = default(string), string href = default(string), string webUrl = default(string), LinksDto links = default(LinksDto), ProjectDto parentProject = default(ProjectDto), StateFieldDto readOnlyUI = default(StateFieldDto), BuildTypeDto defaultTemplate = default(BuildTypeDto), BuildTypesDto buildTypes = default(BuildTypesDto), BuildTypesDto templates = default(BuildTypesDto), PropertiesDto parameters = default(PropertiesDto), VcsRootsDto vcsRoots = default(VcsRootsDto), ProjectFeaturesDto projectFeatures = default(ProjectFeaturesDto), ProjectsDto projects = default(ProjectsDto), CloudProfilesDto cloudProfiles = default(CloudProfilesDto), string locator = default(string))
        {
            this.Id = id;
            this.InternalId = internalId;
            this.Uuid = uuid;
            this.Name = name;
            this.ParentProjectId = parentProjectId;
            this.ParentProjectInternalId = parentProjectInternalId;
            this.ParentProjectName = parentProjectName;
            this.Archived = archived;
            this.Description = description;
            this.Href = href;
            this.WebUrl = webUrl;
            this.Links = links;
            this.ParentProject = parentProject;
            this.ReadOnlyUI = readOnlyUI;
            this.DefaultTemplate = defaultTemplate;
            this.BuildTypes = buildTypes;
            this.Templates = templates;
            this.Parameters = parameters;
            this.VcsRoots = vcsRoots;
            this.ProjectFeatures = projectFeatures;
            this.Projects = projects;
            this.CloudProfiles = cloudProfiles;
            this.Locator = locator;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InternalId
        /// </summary>
        [DataMember(Name="internalId", EmitDefaultValue=false)]
        public string InternalId { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ParentProjectId
        /// </summary>
        [DataMember(Name="parentProjectId", EmitDefaultValue=false)]
        public string ParentProjectId { get; set; }

        /// <summary>
        /// Gets or Sets ParentProjectInternalId
        /// </summary>
        [DataMember(Name="parentProjectInternalId", EmitDefaultValue=false)]
        public string ParentProjectInternalId { get; set; }

        /// <summary>
        /// Gets or Sets ParentProjectName
        /// </summary>
        [DataMember(Name="parentProjectName", EmitDefaultValue=false)]
        public string ParentProjectName { get; set; }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name="archived", EmitDefaultValue=false)]
        public bool? Archived { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets WebUrl
        /// </summary>
        [DataMember(Name="webUrl", EmitDefaultValue=false)]
        public string WebUrl { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public LinksDto Links { get; set; }

        /// <summary>
        /// Gets or Sets ParentProject
        /// </summary>
        [DataMember(Name="parentProject", EmitDefaultValue=false)]
        public ProjectDto ParentProject { get; set; }

        /// <summary>
        /// Gets or Sets ReadOnlyUI
        /// </summary>
        [DataMember(Name="readOnlyUI", EmitDefaultValue=false)]
        public StateFieldDto ReadOnlyUI { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTemplate
        /// </summary>
        [DataMember(Name="defaultTemplate", EmitDefaultValue=false)]
        public BuildTypeDto DefaultTemplate { get; set; }

        /// <summary>
        /// Gets or Sets BuildTypes
        /// </summary>
        [DataMember(Name="buildTypes", EmitDefaultValue=false)]
        public BuildTypesDto BuildTypes { get; set; }

        /// <summary>
        /// Gets or Sets Templates
        /// </summary>
        [DataMember(Name="templates", EmitDefaultValue=false)]
        public BuildTypesDto Templates { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public PropertiesDto Parameters { get; set; }

        /// <summary>
        /// Gets or Sets VcsRoots
        /// </summary>
        [DataMember(Name="vcsRoots", EmitDefaultValue=false)]
        public VcsRootsDto VcsRoots { get; set; }

        /// <summary>
        /// Gets or Sets ProjectFeatures
        /// </summary>
        [DataMember(Name="projectFeatures", EmitDefaultValue=false)]
        public ProjectFeaturesDto ProjectFeatures { get; set; }

        /// <summary>
        /// Gets or Sets Projects
        /// </summary>
        [DataMember(Name="projects", EmitDefaultValue=false)]
        public ProjectsDto Projects { get; set; }

        /// <summary>
        /// Gets or Sets CloudProfiles
        /// </summary>
        [DataMember(Name="cloudProfiles", EmitDefaultValue=false)]
        public CloudProfilesDto CloudProfiles { get; set; }

        /// <summary>
        /// Gets or Sets Locator
        /// </summary>
        [DataMember(Name="locator", EmitDefaultValue=false)]
        public string Locator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InternalId: ").Append(InternalId).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentProjectId: ").Append(ParentProjectId).Append("\n");
            sb.Append("  ParentProjectInternalId: ").Append(ParentProjectInternalId).Append("\n");
            sb.Append("  ParentProjectName: ").Append(ParentProjectName).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  ParentProject: ").Append(ParentProject).Append("\n");
            sb.Append("  ReadOnlyUI: ").Append(ReadOnlyUI).Append("\n");
            sb.Append("  DefaultTemplate: ").Append(DefaultTemplate).Append("\n");
            sb.Append("  BuildTypes: ").Append(BuildTypes).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  VcsRoots: ").Append(VcsRoots).Append("\n");
            sb.Append("  ProjectFeatures: ").Append(ProjectFeatures).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  CloudProfiles: ").Append(CloudProfiles).Append("\n");
            sb.Append("  Locator: ").Append(Locator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectDto);
        }

        /// <summary>
        /// Returns true if ProjectDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InternalId == input.InternalId ||
                    (this.InternalId != null &&
                    this.InternalId.Equals(input.InternalId))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParentProjectId == input.ParentProjectId ||
                    (this.ParentProjectId != null &&
                    this.ParentProjectId.Equals(input.ParentProjectId))
                ) && 
                (
                    this.ParentProjectInternalId == input.ParentProjectInternalId ||
                    (this.ParentProjectInternalId != null &&
                    this.ParentProjectInternalId.Equals(input.ParentProjectInternalId))
                ) && 
                (
                    this.ParentProjectName == input.ParentProjectName ||
                    (this.ParentProjectName != null &&
                    this.ParentProjectName.Equals(input.ParentProjectName))
                ) && 
                (
                    this.Archived == input.Archived ||
                    (this.Archived != null &&
                    this.Archived.Equals(input.Archived))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.WebUrl == input.WebUrl ||
                    (this.WebUrl != null &&
                    this.WebUrl.Equals(input.WebUrl))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.ParentProject == input.ParentProject ||
                    (this.ParentProject != null &&
                    this.ParentProject.Equals(input.ParentProject))
                ) && 
                (
                    this.ReadOnlyUI == input.ReadOnlyUI ||
                    (this.ReadOnlyUI != null &&
                    this.ReadOnlyUI.Equals(input.ReadOnlyUI))
                ) && 
                (
                    this.DefaultTemplate == input.DefaultTemplate ||
                    (this.DefaultTemplate != null &&
                    this.DefaultTemplate.Equals(input.DefaultTemplate))
                ) && 
                (
                    this.BuildTypes == input.BuildTypes ||
                    (this.BuildTypes != null &&
                    this.BuildTypes.Equals(input.BuildTypes))
                ) && 
                (
                    this.Templates == input.Templates ||
                    (this.Templates != null &&
                    this.Templates.Equals(input.Templates))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.VcsRoots == input.VcsRoots ||
                    (this.VcsRoots != null &&
                    this.VcsRoots.Equals(input.VcsRoots))
                ) && 
                (
                    this.ProjectFeatures == input.ProjectFeatures ||
                    (this.ProjectFeatures != null &&
                    this.ProjectFeatures.Equals(input.ProjectFeatures))
                ) && 
                (
                    this.Projects == input.Projects ||
                    (this.Projects != null &&
                    this.Projects.Equals(input.Projects))
                ) && 
                (
                    this.CloudProfiles == input.CloudProfiles ||
                    (this.CloudProfiles != null &&
                    this.CloudProfiles.Equals(input.CloudProfiles))
                ) && 
                (
                    this.Locator == input.Locator ||
                    (this.Locator != null &&
                    this.Locator.Equals(input.Locator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InternalId != null)
                    hashCode = hashCode * 59 + this.InternalId.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParentProjectId != null)
                    hashCode = hashCode * 59 + this.ParentProjectId.GetHashCode();
                if (this.ParentProjectInternalId != null)
                    hashCode = hashCode * 59 + this.ParentProjectInternalId.GetHashCode();
                if (this.ParentProjectName != null)
                    hashCode = hashCode * 59 + this.ParentProjectName.GetHashCode();
                if (this.Archived != null)
                    hashCode = hashCode * 59 + this.Archived.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.WebUrl != null)
                    hashCode = hashCode * 59 + this.WebUrl.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.ParentProject != null)
                    hashCode = hashCode * 59 + this.ParentProject.GetHashCode();
                if (this.ReadOnlyUI != null)
                    hashCode = hashCode * 59 + this.ReadOnlyUI.GetHashCode();
                if (this.DefaultTemplate != null)
                    hashCode = hashCode * 59 + this.DefaultTemplate.GetHashCode();
                if (this.BuildTypes != null)
                    hashCode = hashCode * 59 + this.BuildTypes.GetHashCode();
                if (this.Templates != null)
                    hashCode = hashCode * 59 + this.Templates.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.VcsRoots != null)
                    hashCode = hashCode * 59 + this.VcsRoots.GetHashCode();
                if (this.ProjectFeatures != null)
                    hashCode = hashCode * 59 + this.ProjectFeatures.GetHashCode();
                if (this.Projects != null)
                    hashCode = hashCode * 59 + this.Projects.GetHashCode();
                if (this.CloudProfiles != null)
                    hashCode = hashCode * 59 + this.CloudProfiles.GetHashCode();
                if (this.Locator != null)
                    hashCode = hashCode * 59 + this.Locator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
