/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// BackupProcessInfoDto
    /// </summary>
    [DataContract]
    public partial class BackupProcessInfoDto :  IEquatable<BackupProcessInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Running for value: Running
            /// </summary>
            [EnumMember(Value = "Running")]
            Running = 1,
            
            /// <summary>
            /// Enum Cancelling for value: Cancelling
            /// </summary>
            [EnumMember(Value = "Cancelling")]
            Cancelling = 2,
            
            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 3,
            
            /// <summary>
            /// Enum Finished for value: Finished
            /// </summary>
            [EnumMember(Value = "Finished")]
            Finished = 4,
            
            /// <summary>
            /// Enum Fault for value: Fault
            /// </summary>
            [EnumMember(Value = "Fault")]
            Fault = 5
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BackupProcessInfoDto" /> class.
        /// </summary>
        /// <param name="finishTimestamp">finishTimestamp.</param>
        /// <param name="startTimestamp">startTimestamp.</param>
        /// <param name="fileSize">fileSize.</param>
        /// <param name="id">id.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="status">status.</param>
        public BackupProcessInfoDto(DateTime? finishTimestamp = default(DateTime?), DateTime? startTimestamp = default(DateTime?), long? fileSize = default(long?), int? id = default(int?), string fileName = default(string), StatusEnum? status = default(StatusEnum?))
        {
            this.FinishTimestamp = finishTimestamp;
            this.StartTimestamp = startTimestamp;
            this.FileSize = fileSize;
            this.Id = id;
            this.FileName = fileName;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets FinishTimestamp
        /// </summary>
        [DataMember(Name="finishTimestamp", EmitDefaultValue=false)]
        public DateTime? FinishTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets StartTimestamp
        /// </summary>
        [DataMember(Name="startTimestamp", EmitDefaultValue=false)]
        public DateTime? StartTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name="fileSize", EmitDefaultValue=false)]
        public long? FileSize { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BackupProcessInfoDto {\n");
            sb.Append("  FinishTimestamp: ").Append(FinishTimestamp).Append("\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BackupProcessInfoDto);
        }

        /// <summary>
        /// Returns true if BackupProcessInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BackupProcessInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BackupProcessInfoDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FinishTimestamp == input.FinishTimestamp ||
                    (this.FinishTimestamp != null &&
                    this.FinishTimestamp.Equals(input.FinishTimestamp))
                ) && 
                (
                    this.StartTimestamp == input.StartTimestamp ||
                    (this.StartTimestamp != null &&
                    this.StartTimestamp.Equals(input.StartTimestamp))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FinishTimestamp != null)
                    hashCode = hashCode * 59 + this.FinishTimestamp.GetHashCode();
                if (this.StartTimestamp != null)
                    hashCode = hashCode * 59 + this.StartTimestamp.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
