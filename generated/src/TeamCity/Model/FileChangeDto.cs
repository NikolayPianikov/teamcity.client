/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TeamCity.Client.SwaggerDateConverter;

namespace TeamCity.Model
{
    /// <summary>
    /// FileChangeDto
    /// </summary>
    [DataContract]
    public partial class FileChangeDto :  IEquatable<FileChangeDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileChangeDto" /> class.
        /// </summary>
        /// <param name="beforeRevision">beforeRevision.</param>
        /// <param name="afterRevision">afterRevision.</param>
        /// <param name="changeType">changeType.</param>
        /// <param name="changeTypeComment">changeTypeComment.</param>
        /// <param name="_file">_file.</param>
        /// <param name="relativeFile">relativeFile.</param>
        /// <param name="directory">directory.</param>
        public FileChangeDto(string beforeRevision = default(string), string afterRevision = default(string), string changeType = default(string), string changeTypeComment = default(string), string _file = default(string), string relativeFile = default(string), bool? directory = default(bool?))
        {
            this.BeforeRevision = beforeRevision;
            this.AfterRevision = afterRevision;
            this.ChangeType = changeType;
            this.ChangeTypeComment = changeTypeComment;
            this._File = _file;
            this.RelativeFile = relativeFile;
            this.Directory = directory;
        }
        
        /// <summary>
        /// Gets or Sets BeforeRevision
        /// </summary>
        [DataMember(Name="before-revision", EmitDefaultValue=false)]
        public string BeforeRevision { get; set; }

        /// <summary>
        /// Gets or Sets AfterRevision
        /// </summary>
        [DataMember(Name="after-revision", EmitDefaultValue=false)]
        public string AfterRevision { get; set; }

        /// <summary>
        /// Gets or Sets ChangeType
        /// </summary>
        [DataMember(Name="changeType", EmitDefaultValue=false)]
        public string ChangeType { get; set; }

        /// <summary>
        /// Gets or Sets ChangeTypeComment
        /// </summary>
        [DataMember(Name="changeTypeComment", EmitDefaultValue=false)]
        public string ChangeTypeComment { get; set; }

        /// <summary>
        /// Gets or Sets _File
        /// </summary>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public string _File { get; set; }

        /// <summary>
        /// Gets or Sets RelativeFile
        /// </summary>
        [DataMember(Name="relative-file", EmitDefaultValue=false)]
        public string RelativeFile { get; set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [DataMember(Name="directory", EmitDefaultValue=false)]
        public bool? Directory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileChangeDto {\n");
            sb.Append("  BeforeRevision: ").Append(BeforeRevision).Append("\n");
            sb.Append("  AfterRevision: ").Append(AfterRevision).Append("\n");
            sb.Append("  ChangeType: ").Append(ChangeType).Append("\n");
            sb.Append("  ChangeTypeComment: ").Append(ChangeTypeComment).Append("\n");
            sb.Append("  _File: ").Append(_File).Append("\n");
            sb.Append("  RelativeFile: ").Append(RelativeFile).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileChangeDto);
        }

        /// <summary>
        /// Returns true if FileChangeDto instances are equal
        /// </summary>
        /// <param name="input">Instance of FileChangeDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileChangeDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BeforeRevision == input.BeforeRevision ||
                    (this.BeforeRevision != null &&
                    this.BeforeRevision.Equals(input.BeforeRevision))
                ) && 
                (
                    this.AfterRevision == input.AfterRevision ||
                    (this.AfterRevision != null &&
                    this.AfterRevision.Equals(input.AfterRevision))
                ) && 
                (
                    this.ChangeType == input.ChangeType ||
                    (this.ChangeType != null &&
                    this.ChangeType.Equals(input.ChangeType))
                ) && 
                (
                    this.ChangeTypeComment == input.ChangeTypeComment ||
                    (this.ChangeTypeComment != null &&
                    this.ChangeTypeComment.Equals(input.ChangeTypeComment))
                ) && 
                (
                    this._File == input._File ||
                    (this._File != null &&
                    this._File.Equals(input._File))
                ) && 
                (
                    this.RelativeFile == input.RelativeFile ||
                    (this.RelativeFile != null &&
                    this.RelativeFile.Equals(input.RelativeFile))
                ) && 
                (
                    this.Directory == input.Directory ||
                    (this.Directory != null &&
                    this.Directory.Equals(input.Directory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BeforeRevision != null)
                    hashCode = hashCode * 59 + this.BeforeRevision.GetHashCode();
                if (this.AfterRevision != null)
                    hashCode = hashCode * 59 + this.AfterRevision.GetHashCode();
                if (this.ChangeType != null)
                    hashCode = hashCode * 59 + this.ChangeType.GetHashCode();
                if (this.ChangeTypeComment != null)
                    hashCode = hashCode * 59 + this.ChangeTypeComment.GetHashCode();
                if (this._File != null)
                    hashCode = hashCode * 59 + this._File.GetHashCode();
                if (this.RelativeFile != null)
                    hashCode = hashCode * 59 + this.RelativeFile.GetHashCode();
                if (this.Directory != null)
                    hashCode = hashCode * 59 + this.Directory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
