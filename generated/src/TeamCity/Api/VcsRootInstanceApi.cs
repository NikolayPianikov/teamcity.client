/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TeamCity.Client;
using TeamCity.Model;

namespace TeamCity.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVcsRootInstanceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns></returns>
        void DeleteInstanceField (string vcsRootInstanceLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInstanceFieldWithHttpInfo (string vcsRootInstanceLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns></returns>
        void DeleteRepositoryState (string vcsRootInstanceLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRepositoryStateWithHttpInfo (string vcsRootInstanceLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>FilesDto</returns>
        FilesDto GetChildren4 (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        ApiResponse<FilesDto> GetChildren4WithHttpInfo (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>FilesDto</returns>
        FilesDto GetChildrenAlias4 (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        ApiResponse<FilesDto> GetChildrenAlias4WithHttpInfo (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <returns></returns>
        void GetContent4 (string path, string vcsRootInstanceLocator, string responseBuilder = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetContent4WithHttpInfo (string path, string vcsRootInstanceLocator, string responseBuilder = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns></returns>
        void GetContentAlias4 (string path, string vcsRootInstanceLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetContentAlias4WithHttpInfo (string path, string vcsRootInstanceLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>FileDto</returns>
        FileDto GetMetadata4 (string path, string vcsRootInstanceLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of FileDto</returns>
        ApiResponse<FileDto> GetMetadata4WithHttpInfo (string path, string vcsRootInstanceLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>EntriesDto</returns>
        EntriesDto GetRepositoryState (string vcsRootInstanceLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of EntriesDto</returns>
        ApiResponse<EntriesDto> GetRepositoryStateWithHttpInfo (string vcsRootInstanceLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>string</returns>
        string GetRepositoryStateCreationDate (string vcsRootInstanceLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetRepositoryStateCreationDateWithHttpInfo (string vcsRootInstanceLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>FilesDto</returns>
        FilesDto GetRoot4 (string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        ApiResponse<FilesDto> GetRoot4WithHttpInfo (string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns></returns>
        void GetZipped4 (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string name = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetZipped4WithHttpInfo (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string name = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="requestor"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootInstancesDto</returns>
        VcsRootInstancesDto ScheduleCheckingForChanges (string locator = null, string requestor = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="requestor"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootInstancesDto</returns>
        ApiResponse<VcsRootInstancesDto> ScheduleCheckingForChangesWithHttpInfo (string locator = null, string requestor = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="okOnNothingFound"> (optional)</param>
        /// <returns></returns>
        void ScheduleCheckingForChanges1 (string locator = null, bool? okOnNothingFound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="okOnNothingFound"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScheduleCheckingForChanges1WithHttpInfo (string locator = null, bool? okOnNothingFound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootInstanceDto</returns>
        VcsRootInstanceDto ServeInstance6 (string vcsRootInstanceLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootInstanceDto</returns>
        ApiResponse<VcsRootInstanceDto> ServeInstance6WithHttpInfo (string vcsRootInstanceLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        string ServeInstanceField (string vcsRootInstanceLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServeInstanceFieldWithHttpInfo (string vcsRootInstanceLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootInstancesDto</returns>
        VcsRootInstancesDto ServeInstances1 (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootInstancesDto</returns>
        ApiResponse<VcsRootInstancesDto> ServeInstances1WithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        PropertiesDto ServeRootInstanceProperties (string vcsRootInstanceLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        ApiResponse<PropertiesDto> ServeRootInstancePropertiesWithHttpInfo (string vcsRootInstanceLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SetInstanceField (string vcsRootInstanceLocator, string field, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetInstanceFieldWithHttpInfo (string vcsRootInstanceLocator, string field, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>EntriesDto</returns>
        EntriesDto SetRepositoryState (string vcsRootInstanceLocator, EntriesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of EntriesDto</returns>
        ApiResponse<EntriesDto> SetRepositoryStateWithHttpInfo (string vcsRootInstanceLocator, EntriesDto body = null, string fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInstanceFieldAsync (string vcsRootInstanceLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInstanceFieldAsyncWithHttpInfo (string vcsRootInstanceLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRepositoryStateAsync (string vcsRootInstanceLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRepositoryStateAsyncWithHttpInfo (string vcsRootInstanceLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        System.Threading.Tasks.Task<FilesDto> GetChildren4Async (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildren4AsyncWithHttpInfo (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        System.Threading.Tasks.Task<FilesDto> GetChildrenAlias4Async (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildrenAlias4AsyncWithHttpInfo (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetContent4Async (string path, string vcsRootInstanceLocator, string responseBuilder = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContent4AsyncWithHttpInfo (string path, string vcsRootInstanceLocator, string responseBuilder = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetContentAlias4Async (string path, string vcsRootInstanceLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContentAlias4AsyncWithHttpInfo (string path, string vcsRootInstanceLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of FileDto</returns>
        System.Threading.Tasks.Task<FileDto> GetMetadata4Async (string path, string vcsRootInstanceLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (FileDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDto>> GetMetadata4AsyncWithHttpInfo (string path, string vcsRootInstanceLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of EntriesDto</returns>
        System.Threading.Tasks.Task<EntriesDto> GetRepositoryStateAsync (string vcsRootInstanceLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (EntriesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntriesDto>> GetRepositoryStateAsyncWithHttpInfo (string vcsRootInstanceLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetRepositoryStateCreationDateAsync (string vcsRootInstanceLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetRepositoryStateCreationDateAsyncWithHttpInfo (string vcsRootInstanceLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        System.Threading.Tasks.Task<FilesDto> GetRoot4Async (string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetRoot4AsyncWithHttpInfo (string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetZipped4Async (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string name = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetZipped4AsyncWithHttpInfo (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string name = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="requestor"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootInstancesDto</returns>
        System.Threading.Tasks.Task<VcsRootInstancesDto> ScheduleCheckingForChangesAsync (string locator = null, string requestor = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="requestor"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootInstancesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsRootInstancesDto>> ScheduleCheckingForChangesAsyncWithHttpInfo (string locator = null, string requestor = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="okOnNothingFound"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScheduleCheckingForChanges1Async (string locator = null, bool? okOnNothingFound = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="okOnNothingFound"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScheduleCheckingForChanges1AsyncWithHttpInfo (string locator = null, bool? okOnNothingFound = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootInstanceDto</returns>
        System.Threading.Tasks.Task<VcsRootInstanceDto> ServeInstance6Async (string vcsRootInstanceLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsRootInstanceDto>> ServeInstance6AsyncWithHttpInfo (string vcsRootInstanceLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServeInstanceFieldAsync (string vcsRootInstanceLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServeInstanceFieldAsyncWithHttpInfo (string vcsRootInstanceLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootInstancesDto</returns>
        System.Threading.Tasks.Task<VcsRootInstancesDto> ServeInstances1Async (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootInstancesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsRootInstancesDto>> ServeInstances1AsyncWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        System.Threading.Tasks.Task<PropertiesDto> ServeRootInstancePropertiesAsync (string vcsRootInstanceLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> ServeRootInstancePropertiesAsyncWithHttpInfo (string vcsRootInstanceLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetInstanceFieldAsync (string vcsRootInstanceLocator, string field, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetInstanceFieldAsyncWithHttpInfo (string vcsRootInstanceLocator, string field, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of EntriesDto</returns>
        System.Threading.Tasks.Task<EntriesDto> SetRepositoryStateAsync (string vcsRootInstanceLocator, EntriesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (EntriesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntriesDto>> SetRepositoryStateAsyncWithHttpInfo (string vcsRootInstanceLocator, EntriesDto body = null, string fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VcsRootInstanceApi : IVcsRootInstanceApi
    {
        private TeamCity.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VcsRootInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VcsRootInstanceApi(String basePath)
        {
            this.Configuration = new TeamCity.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VcsRootInstanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VcsRootInstanceApi(TeamCity.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TeamCity.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TeamCity.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TeamCity.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns></returns>
        public void DeleteInstanceField (string vcsRootInstanceLocator, string field)
        {
             DeleteInstanceFieldWithHttpInfo(vcsRootInstanceLocator, field);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInstanceFieldWithHttpInfo (string vcsRootInstanceLocator, string field)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->DeleteInstanceField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling VcsRootInstanceApi->DeleteInstanceField");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInstanceField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInstanceFieldAsync (string vcsRootInstanceLocator, string field)
        {
             await DeleteInstanceFieldAsyncWithHttpInfo(vcsRootInstanceLocator, field);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInstanceFieldAsyncWithHttpInfo (string vcsRootInstanceLocator, string field)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->DeleteInstanceField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling VcsRootInstanceApi->DeleteInstanceField");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInstanceField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns></returns>
        public void DeleteRepositoryState (string vcsRootInstanceLocator)
        {
             DeleteRepositoryStateWithHttpInfo(vcsRootInstanceLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRepositoryStateWithHttpInfo (string vcsRootInstanceLocator)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->DeleteRepositoryState");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRepositoryState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRepositoryStateAsync (string vcsRootInstanceLocator)
        {
             await DeleteRepositoryStateAsyncWithHttpInfo(vcsRootInstanceLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRepositoryStateAsyncWithHttpInfo (string vcsRootInstanceLocator)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->DeleteRepositoryState");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRepositoryState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>FilesDto</returns>
        public FilesDto GetChildren4 (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null)
        {
             ApiResponse<FilesDto> localVarResponse = GetChildren4WithHttpInfo(path, vcsRootInstanceLocator, basePath, locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        public ApiResponse< FilesDto > GetChildren4WithHttpInfo (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling VcsRootInstanceApi->GetChildren4");
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetChildren4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/children{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildren4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        public async System.Threading.Tasks.Task<FilesDto> GetChildren4Async (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null)
        {
             ApiResponse<FilesDto> localVarResponse = await GetChildren4AsyncWithHttpInfo(path, vcsRootInstanceLocator, basePath, locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildren4AsyncWithHttpInfo (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling VcsRootInstanceApi->GetChildren4");
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetChildren4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/children{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildren4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>FilesDto</returns>
        public FilesDto GetChildrenAlias4 (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null)
        {
             ApiResponse<FilesDto> localVarResponse = GetChildrenAlias4WithHttpInfo(path, vcsRootInstanceLocator, basePath, locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        public ApiResponse< FilesDto > GetChildrenAlias4WithHttpInfo (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling VcsRootInstanceApi->GetChildrenAlias4");
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetChildrenAlias4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildrenAlias4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        public async System.Threading.Tasks.Task<FilesDto> GetChildrenAlias4Async (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null)
        {
             ApiResponse<FilesDto> localVarResponse = await GetChildrenAlias4AsyncWithHttpInfo(path, vcsRootInstanceLocator, basePath, locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildrenAlias4AsyncWithHttpInfo (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling VcsRootInstanceApi->GetChildrenAlias4");
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetChildrenAlias4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildrenAlias4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <returns></returns>
        public void GetContent4 (string path, string vcsRootInstanceLocator, string responseBuilder = null)
        {
             GetContent4WithHttpInfo(path, vcsRootInstanceLocator, responseBuilder);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetContent4WithHttpInfo (string path, string vcsRootInstanceLocator, string responseBuilder = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling VcsRootInstanceApi->GetContent4");
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetContent4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/content{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (responseBuilder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseBuilder", responseBuilder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetContent4Async (string path, string vcsRootInstanceLocator, string responseBuilder = null)
        {
             await GetContent4AsyncWithHttpInfo(path, vcsRootInstanceLocator, responseBuilder);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContent4AsyncWithHttpInfo (string path, string vcsRootInstanceLocator, string responseBuilder = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling VcsRootInstanceApi->GetContent4");
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetContent4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/content{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (responseBuilder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseBuilder", responseBuilder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns></returns>
        public void GetContentAlias4 (string path, string vcsRootInstanceLocator)
        {
             GetContentAlias4WithHttpInfo(path, vcsRootInstanceLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetContentAlias4WithHttpInfo (string path, string vcsRootInstanceLocator)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling VcsRootInstanceApi->GetContentAlias4");
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetContentAlias4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/files{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentAlias4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetContentAlias4Async (string path, string vcsRootInstanceLocator)
        {
             await GetContentAlias4AsyncWithHttpInfo(path, vcsRootInstanceLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContentAlias4AsyncWithHttpInfo (string path, string vcsRootInstanceLocator)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling VcsRootInstanceApi->GetContentAlias4");
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetContentAlias4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/files{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentAlias4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>FileDto</returns>
        public FileDto GetMetadata4 (string path, string vcsRootInstanceLocator, string fields = null)
        {
             ApiResponse<FileDto> localVarResponse = GetMetadata4WithHttpInfo(path, vcsRootInstanceLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of FileDto</returns>
        public ApiResponse< FileDto > GetMetadata4WithHttpInfo (string path, string vcsRootInstanceLocator, string fields = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling VcsRootInstanceApi->GetMetadata4");
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetMetadata4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of FileDto</returns>
        public async System.Threading.Tasks.Task<FileDto> GetMetadata4Async (string path, string vcsRootInstanceLocator, string fields = null)
        {
             ApiResponse<FileDto> localVarResponse = await GetMetadata4AsyncWithHttpInfo(path, vcsRootInstanceLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (FileDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileDto>> GetMetadata4AsyncWithHttpInfo (string path, string vcsRootInstanceLocator, string fields = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling VcsRootInstanceApi->GetMetadata4");
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetMetadata4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>EntriesDto</returns>
        public EntriesDto GetRepositoryState (string vcsRootInstanceLocator, string fields = null)
        {
             ApiResponse<EntriesDto> localVarResponse = GetRepositoryStateWithHttpInfo(vcsRootInstanceLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of EntriesDto</returns>
        public ApiResponse< EntriesDto > GetRepositoryStateWithHttpInfo (string vcsRootInstanceLocator, string fields = null)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetRepositoryState");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRepositoryState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntriesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntriesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntriesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of EntriesDto</returns>
        public async System.Threading.Tasks.Task<EntriesDto> GetRepositoryStateAsync (string vcsRootInstanceLocator, string fields = null)
        {
             ApiResponse<EntriesDto> localVarResponse = await GetRepositoryStateAsyncWithHttpInfo(vcsRootInstanceLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (EntriesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntriesDto>> GetRepositoryStateAsyncWithHttpInfo (string vcsRootInstanceLocator, string fields = null)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetRepositoryState");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRepositoryState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntriesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntriesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntriesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>string</returns>
        public string GetRepositoryStateCreationDate (string vcsRootInstanceLocator)
        {
             ApiResponse<string> localVarResponse = GetRepositoryStateCreationDateWithHttpInfo(vcsRootInstanceLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetRepositoryStateCreationDateWithHttpInfo (string vcsRootInstanceLocator)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetRepositoryStateCreationDate");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRepositoryStateCreationDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetRepositoryStateCreationDateAsync (string vcsRootInstanceLocator)
        {
             ApiResponse<string> localVarResponse = await GetRepositoryStateCreationDateAsyncWithHttpInfo(vcsRootInstanceLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetRepositoryStateCreationDateAsyncWithHttpInfo (string vcsRootInstanceLocator)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetRepositoryStateCreationDate");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRepositoryStateCreationDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>FilesDto</returns>
        public FilesDto GetRoot4 (string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null)
        {
             ApiResponse<FilesDto> localVarResponse = GetRoot4WithHttpInfo(vcsRootInstanceLocator, basePath, locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        public ApiResponse< FilesDto > GetRoot4WithHttpInfo (string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetRoot4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoot4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        public async System.Threading.Tasks.Task<FilesDto> GetRoot4Async (string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null)
        {
             ApiResponse<FilesDto> localVarResponse = await GetRoot4AsyncWithHttpInfo(vcsRootInstanceLocator, basePath, locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetRoot4AsyncWithHttpInfo (string vcsRootInstanceLocator, string basePath = null, string locator = null, string fields = null)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetRoot4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoot4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns></returns>
        public void GetZipped4 (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string name = null)
        {
             GetZipped4WithHttpInfo(path, vcsRootInstanceLocator, basePath, locator, name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetZipped4WithHttpInfo (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string name = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling VcsRootInstanceApi->GetZipped4");
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetZipped4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/archived{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZipped4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetZipped4Async (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string name = null)
        {
             await GetZipped4AsyncWithHttpInfo(path, vcsRootInstanceLocator, basePath, locator, name);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetZipped4AsyncWithHttpInfo (string path, string vcsRootInstanceLocator, string basePath = null, string locator = null, string name = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling VcsRootInstanceApi->GetZipped4");
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->GetZipped4");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/archived{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZipped4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="requestor"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootInstancesDto</returns>
        public VcsRootInstancesDto ScheduleCheckingForChanges (string locator = null, string requestor = null, string fields = null)
        {
             ApiResponse<VcsRootInstancesDto> localVarResponse = ScheduleCheckingForChangesWithHttpInfo(locator, requestor, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="requestor"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootInstancesDto</returns>
        public ApiResponse< VcsRootInstancesDto > ScheduleCheckingForChangesWithHttpInfo (string locator = null, string requestor = null, string fields = null)
        {

            var localVarPath = "/app/rest/vcs-root-instances/checkingForChangesQueue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (requestor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requestor", requestor)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScheduleCheckingForChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootInstancesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootInstancesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootInstancesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="requestor"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootInstancesDto</returns>
        public async System.Threading.Tasks.Task<VcsRootInstancesDto> ScheduleCheckingForChangesAsync (string locator = null, string requestor = null, string fields = null)
        {
             ApiResponse<VcsRootInstancesDto> localVarResponse = await ScheduleCheckingForChangesAsyncWithHttpInfo(locator, requestor, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="requestor"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootInstancesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsRootInstancesDto>> ScheduleCheckingForChangesAsyncWithHttpInfo (string locator = null, string requestor = null, string fields = null)
        {

            var localVarPath = "/app/rest/vcs-root-instances/checkingForChangesQueue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (requestor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requestor", requestor)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScheduleCheckingForChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootInstancesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootInstancesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootInstancesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="okOnNothingFound"> (optional)</param>
        /// <returns></returns>
        public void ScheduleCheckingForChanges1 (string locator = null, bool? okOnNothingFound = null)
        {
             ScheduleCheckingForChanges1WithHttpInfo(locator, okOnNothingFound);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="okOnNothingFound"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ScheduleCheckingForChanges1WithHttpInfo (string locator = null, bool? okOnNothingFound = null)
        {

            var localVarPath = "/app/rest/vcs-root-instances/commitHookNotification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (okOnNothingFound != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "okOnNothingFound", okOnNothingFound)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScheduleCheckingForChanges1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="okOnNothingFound"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScheduleCheckingForChanges1Async (string locator = null, bool? okOnNothingFound = null)
        {
             await ScheduleCheckingForChanges1AsyncWithHttpInfo(locator, okOnNothingFound);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="okOnNothingFound"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ScheduleCheckingForChanges1AsyncWithHttpInfo (string locator = null, bool? okOnNothingFound = null)
        {

            var localVarPath = "/app/rest/vcs-root-instances/commitHookNotification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (okOnNothingFound != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "okOnNothingFound", okOnNothingFound)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScheduleCheckingForChanges1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootInstanceDto</returns>
        public VcsRootInstanceDto ServeInstance6 (string vcsRootInstanceLocator, string fields = null)
        {
             ApiResponse<VcsRootInstanceDto> localVarResponse = ServeInstance6WithHttpInfo(vcsRootInstanceLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootInstanceDto</returns>
        public ApiResponse< VcsRootInstanceDto > ServeInstance6WithHttpInfo (string vcsRootInstanceLocator, string fields = null)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->ServeInstance6");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeInstance6", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootInstanceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootInstanceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootInstanceDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootInstanceDto</returns>
        public async System.Threading.Tasks.Task<VcsRootInstanceDto> ServeInstance6Async (string vcsRootInstanceLocator, string fields = null)
        {
             ApiResponse<VcsRootInstanceDto> localVarResponse = await ServeInstance6AsyncWithHttpInfo(vcsRootInstanceLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootInstanceDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsRootInstanceDto>> ServeInstance6AsyncWithHttpInfo (string vcsRootInstanceLocator, string fields = null)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->ServeInstance6");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeInstance6", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootInstanceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootInstanceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootInstanceDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        public string ServeInstanceField (string vcsRootInstanceLocator, string field)
        {
             ApiResponse<string> localVarResponse = ServeInstanceFieldWithHttpInfo(vcsRootInstanceLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServeInstanceFieldWithHttpInfo (string vcsRootInstanceLocator, string field)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->ServeInstanceField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling VcsRootInstanceApi->ServeInstanceField");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeInstanceField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServeInstanceFieldAsync (string vcsRootInstanceLocator, string field)
        {
             ApiResponse<string> localVarResponse = await ServeInstanceFieldAsyncWithHttpInfo(vcsRootInstanceLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServeInstanceFieldAsyncWithHttpInfo (string vcsRootInstanceLocator, string field)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->ServeInstanceField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling VcsRootInstanceApi->ServeInstanceField");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeInstanceField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootInstancesDto</returns>
        public VcsRootInstancesDto ServeInstances1 (string locator = null, string fields = null)
        {
             ApiResponse<VcsRootInstancesDto> localVarResponse = ServeInstances1WithHttpInfo(locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootInstancesDto</returns>
        public ApiResponse< VcsRootInstancesDto > ServeInstances1WithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/vcs-root-instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeInstances1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootInstancesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootInstancesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootInstancesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootInstancesDto</returns>
        public async System.Threading.Tasks.Task<VcsRootInstancesDto> ServeInstances1Async (string locator = null, string fields = null)
        {
             ApiResponse<VcsRootInstancesDto> localVarResponse = await ServeInstances1AsyncWithHttpInfo(locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootInstancesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsRootInstancesDto>> ServeInstances1AsyncWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/vcs-root-instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeInstances1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootInstancesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootInstancesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootInstancesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        public PropertiesDto ServeRootInstanceProperties (string vcsRootInstanceLocator, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = ServeRootInstancePropertiesWithHttpInfo(vcsRootInstanceLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        public ApiResponse< PropertiesDto > ServeRootInstancePropertiesWithHttpInfo (string vcsRootInstanceLocator, string fields = null)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->ServeRootInstanceProperties");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeRootInstanceProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        public async System.Threading.Tasks.Task<PropertiesDto> ServeRootInstancePropertiesAsync (string vcsRootInstanceLocator, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = await ServeRootInstancePropertiesAsyncWithHttpInfo(vcsRootInstanceLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> ServeRootInstancePropertiesAsyncWithHttpInfo (string vcsRootInstanceLocator, string fields = null)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->ServeRootInstanceProperties");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeRootInstanceProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SetInstanceField (string vcsRootInstanceLocator, string field, string body = null)
        {
             ApiResponse<string> localVarResponse = SetInstanceFieldWithHttpInfo(vcsRootInstanceLocator, field, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetInstanceFieldWithHttpInfo (string vcsRootInstanceLocator, string field, string body = null)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->SetInstanceField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling VcsRootInstanceApi->SetInstanceField");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetInstanceField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetInstanceFieldAsync (string vcsRootInstanceLocator, string field, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetInstanceFieldAsyncWithHttpInfo(vcsRootInstanceLocator, field, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetInstanceFieldAsyncWithHttpInfo (string vcsRootInstanceLocator, string field, string body = null)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->SetInstanceField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling VcsRootInstanceApi->SetInstanceField");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetInstanceField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>EntriesDto</returns>
        public EntriesDto SetRepositoryState (string vcsRootInstanceLocator, EntriesDto body = null, string fields = null)
        {
             ApiResponse<EntriesDto> localVarResponse = SetRepositoryStateWithHttpInfo(vcsRootInstanceLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of EntriesDto</returns>
        public ApiResponse< EntriesDto > SetRepositoryStateWithHttpInfo (string vcsRootInstanceLocator, EntriesDto body = null, string fields = null)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->SetRepositoryState");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetRepositoryState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntriesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntriesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntriesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of EntriesDto</returns>
        public async System.Threading.Tasks.Task<EntriesDto> SetRepositoryStateAsync (string vcsRootInstanceLocator, EntriesDto body = null, string fields = null)
        {
             ApiResponse<EntriesDto> localVarResponse = await SetRepositoryStateAsyncWithHttpInfo(vcsRootInstanceLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vcsRootInstanceLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (EntriesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntriesDto>> SetRepositoryStateAsyncWithHttpInfo (string vcsRootInstanceLocator, EntriesDto body = null, string fields = null)
        {
            // verify the required parameter 'vcsRootInstanceLocator' is set
            if (vcsRootInstanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootInstanceLocator' when calling VcsRootInstanceApi->SetRepositoryState");

            var localVarPath = "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vcsRootInstanceLocator != null) localVarPathParams.Add("vcsRootInstanceLocator", this.Configuration.ApiClient.ParameterToString(vcsRootInstanceLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetRepositoryState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntriesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntriesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntriesDto)));
        }

    }
}
