/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TeamCity.Client;
using TeamCity.Model;

namespace TeamCity.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgentPoolApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentDto</returns>
        AgentDto AddAgent (string agentPoolLocator, AgentDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentDto</returns>
        ApiResponse<AgentDto> AddAgentWithHttpInfo (string agentPoolLocator, AgentDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProjectDto</returns>
        ProjectDto AddProject (string agentPoolLocator, ProjectDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        ApiResponse<ProjectDto> AddProjectWithHttpInfo (string agentPoolLocator, ProjectDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AgentPoolDto</returns>
        AgentPoolDto CreatePool (AgentPoolDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolDto</returns>
        ApiResponse<AgentPoolDto> CreatePoolWithHttpInfo (AgentPoolDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns></returns>
        void DeletePool (string agentPoolLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePoolWithHttpInfo (string agentPoolLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns></returns>
        void DeletePoolProject (string agentPoolLocator, string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePoolProjectWithHttpInfo (string agentPoolLocator, string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns></returns>
        void DeleteProjects (string agentPoolLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectsWithHttpInfo (string agentPoolLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        string GetField (string agentPoolLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetFieldWithHttpInfo (string agentPoolLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentPoolDto</returns>
        AgentPoolDto GetPool (string agentPoolLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolDto</returns>
        ApiResponse<AgentPoolDto> GetPoolWithHttpInfo (string agentPoolLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentsDto</returns>
        AgentsDto GetPoolAgents (string agentPoolLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentsDto</returns>
        ApiResponse<AgentsDto> GetPoolAgentsWithHttpInfo (string agentPoolLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectDto</returns>
        ProjectDto GetPoolProject (string agentPoolLocator, string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        ApiResponse<ProjectDto> GetPoolProjectWithHttpInfo (string agentPoolLocator, string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectsDto</returns>
        ProjectsDto GetPoolProjects (string agentPoolLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectsDto</returns>
        ApiResponse<ProjectsDto> GetPoolProjectsWithHttpInfo (string agentPoolLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentPoolsDto</returns>
        AgentPoolsDto GetPools (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolsDto</returns>
        ApiResponse<AgentPoolsDto> GetPoolsWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProjectsDto</returns>
        ProjectsDto ReplaceProjects (string agentPoolLocator, ProjectsDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProjectsDto</returns>
        ApiResponse<ProjectsDto> ReplaceProjectsWithHttpInfo (string agentPoolLocator, ProjectsDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SetField (string agentPoolLocator, string field, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetFieldWithHttpInfo (string agentPoolLocator, string field, string body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentDto</returns>
        System.Threading.Tasks.Task<AgentDto> AddAgentAsync (string agentPoolLocator, AgentDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentDto>> AddAgentAsyncWithHttpInfo (string agentPoolLocator, AgentDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        System.Threading.Tasks.Task<ProjectDto> AddProjectAsync (string agentPoolLocator, ProjectDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDto>> AddProjectAsyncWithHttpInfo (string agentPoolLocator, ProjectDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AgentPoolDto</returns>
        System.Threading.Tasks.Task<AgentPoolDto> CreatePoolAsync (AgentPoolDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolDto>> CreatePoolAsyncWithHttpInfo (AgentPoolDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePoolAsync (string agentPoolLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePoolAsyncWithHttpInfo (string agentPoolLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePoolProjectAsync (string agentPoolLocator, string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePoolProjectAsyncWithHttpInfo (string agentPoolLocator, string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectsAsync (string agentPoolLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectsAsyncWithHttpInfo (string agentPoolLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetFieldAsync (string agentPoolLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetFieldAsyncWithHttpInfo (string agentPoolLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentPoolDto</returns>
        System.Threading.Tasks.Task<AgentPoolDto> GetPoolAsync (string agentPoolLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolDto>> GetPoolAsyncWithHttpInfo (string agentPoolLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentsDto</returns>
        System.Threading.Tasks.Task<AgentsDto> GetPoolAgentsAsync (string agentPoolLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentsDto>> GetPoolAgentsAsyncWithHttpInfo (string agentPoolLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        System.Threading.Tasks.Task<ProjectDto> GetPoolProjectAsync (string agentPoolLocator, string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDto>> GetPoolProjectAsyncWithHttpInfo (string agentPoolLocator, string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectsDto</returns>
        System.Threading.Tasks.Task<ProjectsDto> GetPoolProjectsAsync (string agentPoolLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectsDto>> GetPoolProjectsAsyncWithHttpInfo (string agentPoolLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentPoolsDto</returns>
        System.Threading.Tasks.Task<AgentPoolsDto> GetPoolsAsync (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolsDto>> GetPoolsAsyncWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProjectsDto</returns>
        System.Threading.Tasks.Task<ProjectsDto> ReplaceProjectsAsync (string agentPoolLocator, ProjectsDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectsDto>> ReplaceProjectsAsyncWithHttpInfo (string agentPoolLocator, ProjectsDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetFieldAsync (string agentPoolLocator, string field, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetFieldAsyncWithHttpInfo (string agentPoolLocator, string field, string body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AgentPoolApi : IAgentPoolApi
    {
        private TeamCity.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentPoolApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgentPoolApi(String basePath)
        {
            this.Configuration = new TeamCity.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentPoolApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AgentPoolApi(TeamCity.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TeamCity.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TeamCity.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TeamCity.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentDto</returns>
        public AgentDto AddAgent (string agentPoolLocator, AgentDto body = null, string fields = null)
        {
             ApiResponse<AgentDto> localVarResponse = AddAgentWithHttpInfo(agentPoolLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentDto</returns>
        public ApiResponse< AgentDto > AddAgentWithHttpInfo (string agentPoolLocator, AgentDto body = null, string fields = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->AddAgent");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/agents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentDto</returns>
        public async System.Threading.Tasks.Task<AgentDto> AddAgentAsync (string agentPoolLocator, AgentDto body = null, string fields = null)
        {
             ApiResponse<AgentDto> localVarResponse = await AddAgentAsyncWithHttpInfo(agentPoolLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentDto>> AddAgentAsyncWithHttpInfo (string agentPoolLocator, AgentDto body = null, string fields = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->AddAgent");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/agents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProjectDto</returns>
        public ProjectDto AddProject (string agentPoolLocator, ProjectDto body = null)
        {
             ApiResponse<ProjectDto> localVarResponse = AddProjectWithHttpInfo(agentPoolLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        public ApiResponse< ProjectDto > AddProjectWithHttpInfo (string agentPoolLocator, ProjectDto body = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->AddProject");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        public async System.Threading.Tasks.Task<ProjectDto> AddProjectAsync (string agentPoolLocator, ProjectDto body = null)
        {
             ApiResponse<ProjectDto> localVarResponse = await AddProjectAsyncWithHttpInfo(agentPoolLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDto>> AddProjectAsyncWithHttpInfo (string agentPoolLocator, ProjectDto body = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->AddProject");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AgentPoolDto</returns>
        public AgentPoolDto CreatePool (AgentPoolDto body = null)
        {
             ApiResponse<AgentPoolDto> localVarResponse = CreatePoolWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolDto</returns>
        public ApiResponse< AgentPoolDto > CreatePoolWithHttpInfo (AgentPoolDto body = null)
        {

            var localVarPath = "/app/rest/agentPools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AgentPoolDto</returns>
        public async System.Threading.Tasks.Task<AgentPoolDto> CreatePoolAsync (AgentPoolDto body = null)
        {
             ApiResponse<AgentPoolDto> localVarResponse = await CreatePoolAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentPoolDto>> CreatePoolAsyncWithHttpInfo (AgentPoolDto body = null)
        {

            var localVarPath = "/app/rest/agentPools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns></returns>
        public void DeletePool (string agentPoolLocator)
        {
             DeletePoolWithHttpInfo(agentPoolLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePoolWithHttpInfo (string agentPoolLocator)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->DeletePool");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePoolAsync (string agentPoolLocator)
        {
             await DeletePoolAsyncWithHttpInfo(agentPoolLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePoolAsyncWithHttpInfo (string agentPoolLocator)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->DeletePool");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns></returns>
        public void DeletePoolProject (string agentPoolLocator, string projectLocator)
        {
             DeletePoolProjectWithHttpInfo(agentPoolLocator, projectLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePoolProjectWithHttpInfo (string agentPoolLocator, string projectLocator)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->DeletePoolProject");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling AgentPoolApi->DeletePoolProject");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePoolProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePoolProjectAsync (string agentPoolLocator, string projectLocator)
        {
             await DeletePoolProjectAsyncWithHttpInfo(agentPoolLocator, projectLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePoolProjectAsyncWithHttpInfo (string agentPoolLocator, string projectLocator)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->DeletePoolProject");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling AgentPoolApi->DeletePoolProject");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePoolProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns></returns>
        public void DeleteProjects (string agentPoolLocator)
        {
             DeleteProjectsWithHttpInfo(agentPoolLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProjectsWithHttpInfo (string agentPoolLocator)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->DeleteProjects");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectsAsync (string agentPoolLocator)
        {
             await DeleteProjectsAsyncWithHttpInfo(agentPoolLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectsAsyncWithHttpInfo (string agentPoolLocator)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->DeleteProjects");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        public string GetField (string agentPoolLocator, string field)
        {
             ApiResponse<string> localVarResponse = GetFieldWithHttpInfo(agentPoolLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetFieldWithHttpInfo (string agentPoolLocator, string field)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->GetField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AgentPoolApi->GetField");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetFieldAsync (string agentPoolLocator, string field)
        {
             ApiResponse<string> localVarResponse = await GetFieldAsyncWithHttpInfo(agentPoolLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetFieldAsyncWithHttpInfo (string agentPoolLocator, string field)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->GetField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AgentPoolApi->GetField");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentPoolDto</returns>
        public AgentPoolDto GetPool (string agentPoolLocator, string fields = null)
        {
             ApiResponse<AgentPoolDto> localVarResponse = GetPoolWithHttpInfo(agentPoolLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolDto</returns>
        public ApiResponse< AgentPoolDto > GetPoolWithHttpInfo (string agentPoolLocator, string fields = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->GetPool");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentPoolDto</returns>
        public async System.Threading.Tasks.Task<AgentPoolDto> GetPoolAsync (string agentPoolLocator, string fields = null)
        {
             ApiResponse<AgentPoolDto> localVarResponse = await GetPoolAsyncWithHttpInfo(agentPoolLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentPoolDto>> GetPoolAsyncWithHttpInfo (string agentPoolLocator, string fields = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->GetPool");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentsDto</returns>
        public AgentsDto GetPoolAgents (string agentPoolLocator, string locator = null, string fields = null)
        {
             ApiResponse<AgentsDto> localVarResponse = GetPoolAgentsWithHttpInfo(agentPoolLocator, locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentsDto</returns>
        public ApiResponse< AgentsDto > GetPoolAgentsWithHttpInfo (string agentPoolLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->GetPoolAgents");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/agents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPoolAgents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentsDto</returns>
        public async System.Threading.Tasks.Task<AgentsDto> GetPoolAgentsAsync (string agentPoolLocator, string locator = null, string fields = null)
        {
             ApiResponse<AgentsDto> localVarResponse = await GetPoolAgentsAsyncWithHttpInfo(agentPoolLocator, locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentsDto>> GetPoolAgentsAsyncWithHttpInfo (string agentPoolLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->GetPoolAgents");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/agents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPoolAgents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectDto</returns>
        public ProjectDto GetPoolProject (string agentPoolLocator, string projectLocator, string fields = null)
        {
             ApiResponse<ProjectDto> localVarResponse = GetPoolProjectWithHttpInfo(agentPoolLocator, projectLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        public ApiResponse< ProjectDto > GetPoolProjectWithHttpInfo (string agentPoolLocator, string projectLocator, string fields = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->GetPoolProject");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling AgentPoolApi->GetPoolProject");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPoolProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        public async System.Threading.Tasks.Task<ProjectDto> GetPoolProjectAsync (string agentPoolLocator, string projectLocator, string fields = null)
        {
             ApiResponse<ProjectDto> localVarResponse = await GetPoolProjectAsyncWithHttpInfo(agentPoolLocator, projectLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDto>> GetPoolProjectAsyncWithHttpInfo (string agentPoolLocator, string projectLocator, string fields = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->GetPoolProject");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling AgentPoolApi->GetPoolProject");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPoolProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectsDto</returns>
        public ProjectsDto GetPoolProjects (string agentPoolLocator, string fields = null)
        {
             ApiResponse<ProjectsDto> localVarResponse = GetPoolProjectsWithHttpInfo(agentPoolLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectsDto</returns>
        public ApiResponse< ProjectsDto > GetPoolProjectsWithHttpInfo (string agentPoolLocator, string fields = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->GetPoolProjects");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPoolProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectsDto</returns>
        public async System.Threading.Tasks.Task<ProjectsDto> GetPoolProjectsAsync (string agentPoolLocator, string fields = null)
        {
             ApiResponse<ProjectsDto> localVarResponse = await GetPoolProjectsAsyncWithHttpInfo(agentPoolLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectsDto>> GetPoolProjectsAsyncWithHttpInfo (string agentPoolLocator, string fields = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->GetPoolProjects");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPoolProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentPoolsDto</returns>
        public AgentPoolsDto GetPools (string locator = null, string fields = null)
        {
             ApiResponse<AgentPoolsDto> localVarResponse = GetPoolsWithHttpInfo(locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolsDto</returns>
        public ApiResponse< AgentPoolsDto > GetPoolsWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/agentPools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentPoolsDto</returns>
        public async System.Threading.Tasks.Task<AgentPoolsDto> GetPoolsAsync (string locator = null, string fields = null)
        {
             ApiResponse<AgentPoolsDto> localVarResponse = await GetPoolsAsyncWithHttpInfo(locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentPoolsDto>> GetPoolsAsyncWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/agentPools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProjectsDto</returns>
        public ProjectsDto ReplaceProjects (string agentPoolLocator, ProjectsDto body = null)
        {
             ApiResponse<ProjectsDto> localVarResponse = ReplaceProjectsWithHttpInfo(agentPoolLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProjectsDto</returns>
        public ApiResponse< ProjectsDto > ReplaceProjectsWithHttpInfo (string agentPoolLocator, ProjectsDto body = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->ReplaceProjects");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProjectsDto</returns>
        public async System.Threading.Tasks.Task<ProjectsDto> ReplaceProjectsAsync (string agentPoolLocator, ProjectsDto body = null)
        {
             ApiResponse<ProjectsDto> localVarResponse = await ReplaceProjectsAsyncWithHttpInfo(agentPoolLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectsDto>> ReplaceProjectsAsyncWithHttpInfo (string agentPoolLocator, ProjectsDto body = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->ReplaceProjects");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SetField (string agentPoolLocator, string field, string body = null)
        {
             ApiResponse<string> localVarResponse = SetFieldWithHttpInfo(agentPoolLocator, field, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetFieldWithHttpInfo (string agentPoolLocator, string field, string body = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->SetField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AgentPoolApi->SetField");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetFieldAsync (string agentPoolLocator, string field, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetFieldAsyncWithHttpInfo(agentPoolLocator, field, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentPoolLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetFieldAsyncWithHttpInfo (string agentPoolLocator, string field, string body = null)
        {
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling AgentPoolApi->SetField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AgentPoolApi->SetField");

            var localVarPath = "/app/rest/agentPools/{agentPoolLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
