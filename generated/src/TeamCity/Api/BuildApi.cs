/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TeamCity.Client;
using TeamCity.Model;

namespace TeamCity.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a message to the build log. Service messages are accepted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns></returns>
        void AddLogMessage (string buildLocator, string body = null, string fields = null);

        /// <summary>
        /// Adds a message to the build log. Service messages are accepted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLogMessageWithHttpInfo (string buildLocator, string body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProblemOccurrenceDto</returns>
        ProblemOccurrenceDto AddProblemToBuild (string buildLocator, string body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProblemOccurrenceDto</returns>
        ApiResponse<ProblemOccurrenceDto> AddProblemToBuildWithHttpInfo (string buildLocator, string body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        MultipleOperationResultDto AddTagsMultipleToBuild (string buildLocator, TagsDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        ApiResponse<MultipleOperationResultDto> AddTagsMultipleToBuildWithHttpInfo (string buildLocator, TagsDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>TagsDto</returns>
        TagsDto AddTagsToBuild (string buildLocator, TagsDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of TagsDto</returns>
        ApiResponse<TagsDto> AddTagsToBuildWithHttpInfo (string buildLocator, TagsDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildDto</returns>
        BuildDto CancelBuild1 (string buildLocator, BuildCancelRequestDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildDto</returns>
        ApiResponse<BuildDto> CancelBuild1WithHttpInfo (string buildLocator, BuildCancelRequestDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        MultipleOperationResultDto CancelMultiple (string buildLocator, BuildCancelRequestDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        ApiResponse<MultipleOperationResultDto> CancelMultipleWithHttpInfo (string buildLocator, BuildCancelRequestDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns></returns>
        void DeleteBuild (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBuildWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns></returns>
        void DeleteComment (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCommentWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        MultipleOperationResultDto DeleteCommentMultiple (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        ApiResponse<MultipleOperationResultDto> DeleteCommentMultipleWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        MultipleOperationResultDto DeleteMultiple (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        ApiResponse<MultipleOperationResultDto> DeleteMultipleWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildChangesDto</returns>
        BuildChangesDto GetArtifactDependencyChanges (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildChangesDto</returns>
        ApiResponse<BuildChangesDto> GetArtifactDependencyChangesWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>string</returns>
        string GetArtifactsDirectory (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetArtifactsDirectoryWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>string</returns>
        string GetBuildFinishDate (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetBuildFinishDateWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>string</returns>
        string GetBuildNumber (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetBuildNumberWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>string</returns>
        string GetBuildStatusText (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetBuildStatusTextWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CommentDto</returns>
        CommentDto GetCanceledInfo (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CommentDto</returns>
        ApiResponse<CommentDto> GetCanceledInfoWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FilesDto</returns>
        FilesDto GetChildren (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        ApiResponse<FilesDto> GetChildrenWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FilesDto</returns>
        FilesDto GetChildren1 (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        ApiResponse<FilesDto> GetChildren1WithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FilesDto</returns>
        FilesDto GetChildrenAlias (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        ApiResponse<FilesDto> GetChildrenAliasWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FilesDto</returns>
        FilesDto GetChildrenAlias1 (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        ApiResponse<FilesDto> GetChildrenAlias1WithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns></returns>
        void GetContent (string path, string buildLocator, string responseBuilder = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetContentWithHttpInfo (string path, string buildLocator, string responseBuilder = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns></returns>
        void GetContent1 (string path, string buildLocator, string responseBuilder = null, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetContent1WithHttpInfo (string path, string buildLocator, string responseBuilder = null, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns></returns>
        void GetContentAlias (string path, string buildLocator, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetContentAliasWithHttpInfo (string path, string buildLocator, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns></returns>
        void GetContentAlias1 (string path, string buildLocator, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetContentAlias1WithHttpInfo (string path, string buildLocator, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FileDto</returns>
        FileDto GetMetadata (string path, string buildLocator, string fields = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FileDto</returns>
        ApiResponse<FileDto> GetMetadataWithHttpInfo (string path, string buildLocator, string fields = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FileDto</returns>
        FileDto GetMetadata1 (string path, string buildLocator, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FileDto</returns>
        ApiResponse<FileDto> GetMetadata1WithHttpInfo (string path, string buildLocator, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildsDto</returns>
        BuildsDto GetMultiple (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildsDto</returns>
        ApiResponse<BuildsDto> GetMultipleWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="propertyName"></param>
        /// <returns>string</returns>
        string GetParameter (string buildLocator, string propertyName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="propertyName"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetParameterWithHttpInfo (string buildLocator, string propertyName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PinInfoDto</returns>
        PinInfoDto GetPinData (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PinInfoDto</returns>
        ApiResponse<PinInfoDto> GetPinDataWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProblemOccurrencesDto</returns>
        ProblemOccurrencesDto GetProblems (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProblemOccurrencesDto</returns>
        ApiResponse<ProblemOccurrencesDto> GetProblemsWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="value"></param>
        /// <returns>string</returns>
        string GetResolvedParameter (string buildLocator, string value);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetResolvedParameterWithHttpInfo (string buildLocator, string value);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FilesDto</returns>
        FilesDto GetRoot (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        ApiResponse<FilesDto> GetRootWithHttpInfo (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FilesDto</returns>
        FilesDto GetRoot1 (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        ApiResponse<FilesDto> GetRoot1WithHttpInfo (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>TestOccurrencesDto</returns>
        TestOccurrencesDto GetTests (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of TestOccurrencesDto</returns>
        ApiResponse<TestOccurrencesDto> GetTestsWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsLabelsDto</returns>
        VcsLabelsDto GetVcsLabels (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsLabelsDto</returns>
        ApiResponse<VcsLabelsDto> GetVcsLabelsWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns></returns>
        void GetZipped (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetZippedWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns></returns>
        void GetZipped1 (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetZipped1WithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// Starts the queued build as an agent-less build and returns the corresponding running build.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildDto</returns>
        BuildDto MarkBuildAsRunning (string buildLocator, string body = null, string fields = null);

        /// <summary>
        /// Starts the queued build as an agent-less build and returns the corresponding running build.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildDto</returns>
        ApiResponse<BuildDto> MarkBuildAsRunningWithHttpInfo (string buildLocator, string body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        MultipleOperationResultDto PinMultiple (string buildLocator, PinInfoDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        ApiResponse<MultipleOperationResultDto> PinMultipleWithHttpInfo (string buildLocator, PinInfoDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        MultipleOperationResultDto RemoveTagsMultiple (string buildLocator, TagsDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        ApiResponse<MultipleOperationResultDto> RemoveTagsMultipleWithHttpInfo (string buildLocator, TagsDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ReplaceComment (string buildLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceCommentWithHttpInfo (string buildLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        MultipleOperationResultDto ReplaceCommentMultiple (string buildLocator, string body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        ApiResponse<MultipleOperationResultDto> ReplaceCommentMultipleWithHttpInfo (string buildLocator, string body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>TagsDto</returns>
        TagsDto ReplaceTagsOnBuild (string buildLocator, string locator = null, TagsDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of TagsDto</returns>
        ApiResponse<TagsDto> ReplaceTagsOnBuildWithHttpInfo (string buildLocator, string locator = null, TagsDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns></returns>
        void ResetBuildFinishParameters (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetBuildFinishParametersWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>string</returns>
        string ServeAggregatedBuildStatus (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServeAggregatedBuildStatusWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns></returns>
        void ServeAggregatedBuildStatusIcon (string buildLocator, string suffix);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ServeAggregatedBuildStatusIconWithHttpInfo (string buildLocator, string suffix);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildsDto</returns>
        BuildsDto ServeAllBuilds (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildsDto</returns>
        ApiResponse<BuildsDto> ServeAllBuildsWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildDto</returns>
        BuildDto ServeBuild (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildDto</returns>
        ApiResponse<BuildDto> ServeBuildWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        PropertiesDto ServeBuildActualParameters (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        ApiResponse<PropertiesDto> ServeBuildActualParametersWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        string ServeBuildFieldFromBuildOnly (string buildLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServeBuildFieldFromBuildOnlyWithHttpInfo (string buildLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>IssuesUsagesDto</returns>
        IssuesUsagesDto ServeBuildRelatedIssues (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of IssuesUsagesDto</returns>
        ApiResponse<IssuesUsagesDto> ServeBuildRelatedIssuesWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="name"></param>
        /// <returns>string</returns>
        string ServeBuildStatisticValue (string buildLocator, string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServeBuildStatisticValueWithHttpInfo (string buildLocator, string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        PropertiesDto ServeBuildStatisticValues (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        ApiResponse<PropertiesDto> ServeBuildStatisticValuesWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns></returns>
        void ServeBuildStatusIcon (string buildLocator, string suffix);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ServeBuildStatusIconWithHttpInfo (string buildLocator, string suffix);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        void ServeSourceFile (string buildLocator, string fileName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fileName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ServeSourceFileWithHttpInfo (string buildLocator, string fileName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>TagsDto</returns>
        TagsDto ServeTagsFromBuild (string buildLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of TagsDto</returns>
        ApiResponse<TagsDto> ServeTagsFromBuildWithHttpInfo (string buildLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SetBuildNumber (string buildLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetBuildNumberWithHttpInfo (string buildLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PinInfoDto</returns>
        PinInfoDto SetBuildPinData (string buildLocator, PinInfoDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PinInfoDto</returns>
        ApiResponse<PinInfoDto> SetBuildPinDataWithHttpInfo (string buildLocator, PinInfoDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SetBuildStatusText (string buildLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetBuildStatusTextWithHttpInfo (string buildLocator, string body = null);
        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SetFinishedTime (string buildLocator, string body = null);

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetFinishedTimeWithHttpInfo (string buildLocator, string body = null);
        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>string</returns>
        string SetFinishedTime1 (string buildLocator);

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetFinishedTime1WithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>VcsLabelsDto</returns>
        VcsLabelsDto SetVcsLabel (string buildLocator, string locator = null, string fields = null, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of VcsLabelsDto</returns>
        ApiResponse<VcsLabelsDto> SetVcsLabelWithHttpInfo (string buildLocator, string locator = null, string fields = null, string body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a message to the build log. Service messages are accepted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLogMessageAsync (string buildLocator, string body = null, string fields = null);

        /// <summary>
        /// Adds a message to the build log. Service messages are accepted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLogMessageAsyncWithHttpInfo (string buildLocator, string body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProblemOccurrenceDto</returns>
        System.Threading.Tasks.Task<ProblemOccurrenceDto> AddProblemToBuildAsync (string buildLocator, string body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProblemOccurrenceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProblemOccurrenceDto>> AddProblemToBuildAsyncWithHttpInfo (string buildLocator, string body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        System.Threading.Tasks.Task<MultipleOperationResultDto> AddTagsMultipleToBuildAsync (string buildLocator, TagsDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> AddTagsMultipleToBuildAsyncWithHttpInfo (string buildLocator, TagsDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of TagsDto</returns>
        System.Threading.Tasks.Task<TagsDto> AddTagsToBuildAsync (string buildLocator, TagsDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (TagsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagsDto>> AddTagsToBuildAsyncWithHttpInfo (string buildLocator, TagsDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildDto</returns>
        System.Threading.Tasks.Task<BuildDto> CancelBuild1Async (string buildLocator, BuildCancelRequestDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildDto>> CancelBuild1AsyncWithHttpInfo (string buildLocator, BuildCancelRequestDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        System.Threading.Tasks.Task<MultipleOperationResultDto> CancelMultipleAsync (string buildLocator, BuildCancelRequestDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> CancelMultipleAsyncWithHttpInfo (string buildLocator, BuildCancelRequestDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBuildAsync (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBuildAsyncWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCommentAsync (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCommentAsyncWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        System.Threading.Tasks.Task<MultipleOperationResultDto> DeleteCommentMultipleAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> DeleteCommentMultipleAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        System.Threading.Tasks.Task<MultipleOperationResultDto> DeleteMultipleAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> DeleteMultipleAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildChangesDto</returns>
        System.Threading.Tasks.Task<BuildChangesDto> GetArtifactDependencyChangesAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildChangesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildChangesDto>> GetArtifactDependencyChangesAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetArtifactsDirectoryAsync (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetArtifactsDirectoryAsyncWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetBuildFinishDateAsync (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetBuildFinishDateAsyncWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetBuildNumberAsync (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetBuildNumberAsyncWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetBuildStatusTextAsync (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetBuildStatusTextAsyncWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CommentDto</returns>
        System.Threading.Tasks.Task<CommentDto> GetCanceledInfoAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentDto>> GetCanceledInfoAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        System.Threading.Tasks.Task<FilesDto> GetChildrenAsync (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildrenAsyncWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        System.Threading.Tasks.Task<FilesDto> GetChildren1Async (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildren1AsyncWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        System.Threading.Tasks.Task<FilesDto> GetChildrenAliasAsync (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildrenAliasAsyncWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        System.Threading.Tasks.Task<FilesDto> GetChildrenAlias1Async (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildrenAlias1AsyncWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetContentAsync (string path, string buildLocator, string responseBuilder = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContentAsyncWithHttpInfo (string path, string buildLocator, string responseBuilder = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetContent1Async (string path, string buildLocator, string responseBuilder = null, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContent1AsyncWithHttpInfo (string path, string buildLocator, string responseBuilder = null, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetContentAliasAsync (string path, string buildLocator, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContentAliasAsyncWithHttpInfo (string path, string buildLocator, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetContentAlias1Async (string path, string buildLocator, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContentAlias1AsyncWithHttpInfo (string path, string buildLocator, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FileDto</returns>
        System.Threading.Tasks.Task<FileDto> GetMetadataAsync (string path, string buildLocator, string fields = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FileDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDto>> GetMetadataAsyncWithHttpInfo (string path, string buildLocator, string fields = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FileDto</returns>
        System.Threading.Tasks.Task<FileDto> GetMetadata1Async (string path, string buildLocator, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FileDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDto>> GetMetadata1AsyncWithHttpInfo (string path, string buildLocator, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildsDto</returns>
        System.Threading.Tasks.Task<BuildsDto> GetMultipleAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildsDto>> GetMultipleAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="propertyName"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetParameterAsync (string buildLocator, string propertyName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="propertyName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetParameterAsyncWithHttpInfo (string buildLocator, string propertyName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PinInfoDto</returns>
        System.Threading.Tasks.Task<PinInfoDto> GetPinDataAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PinInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PinInfoDto>> GetPinDataAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProblemOccurrencesDto</returns>
        System.Threading.Tasks.Task<ProblemOccurrencesDto> GetProblemsAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProblemOccurrencesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProblemOccurrencesDto>> GetProblemsAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="value"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetResolvedParameterAsync (string buildLocator, string value);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="value"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetResolvedParameterAsyncWithHttpInfo (string buildLocator, string value);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        System.Threading.Tasks.Task<FilesDto> GetRootAsync (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetRootAsyncWithHttpInfo (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        System.Threading.Tasks.Task<FilesDto> GetRoot1Async (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetRoot1AsyncWithHttpInfo (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of TestOccurrencesDto</returns>
        System.Threading.Tasks.Task<TestOccurrencesDto> GetTestsAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (TestOccurrencesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestOccurrencesDto>> GetTestsAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsLabelsDto</returns>
        System.Threading.Tasks.Task<VcsLabelsDto> GetVcsLabelsAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsLabelsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsLabelsDto>> GetVcsLabelsAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetZippedAsync (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetZippedAsyncWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? logBuildUsage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetZipped1Async (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null, bool? logBuildUsage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetZipped1AsyncWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null, bool? logBuildUsage = null);
        /// <summary>
        /// Starts the queued build as an agent-less build and returns the corresponding running build.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildDto</returns>
        System.Threading.Tasks.Task<BuildDto> MarkBuildAsRunningAsync (string buildLocator, string body = null, string fields = null);

        /// <summary>
        /// Starts the queued build as an agent-less build and returns the corresponding running build.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildDto>> MarkBuildAsRunningAsyncWithHttpInfo (string buildLocator, string body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        System.Threading.Tasks.Task<MultipleOperationResultDto> PinMultipleAsync (string buildLocator, PinInfoDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> PinMultipleAsyncWithHttpInfo (string buildLocator, PinInfoDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        System.Threading.Tasks.Task<MultipleOperationResultDto> RemoveTagsMultipleAsync (string buildLocator, TagsDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> RemoveTagsMultipleAsyncWithHttpInfo (string buildLocator, TagsDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceCommentAsync (string buildLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceCommentAsyncWithHttpInfo (string buildLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        System.Threading.Tasks.Task<MultipleOperationResultDto> ReplaceCommentMultipleAsync (string buildLocator, string body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> ReplaceCommentMultipleAsyncWithHttpInfo (string buildLocator, string body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of TagsDto</returns>
        System.Threading.Tasks.Task<TagsDto> ReplaceTagsOnBuildAsync (string buildLocator, string locator = null, TagsDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (TagsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagsDto>> ReplaceTagsOnBuildAsyncWithHttpInfo (string buildLocator, string locator = null, TagsDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetBuildFinishParametersAsync (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetBuildFinishParametersAsyncWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServeAggregatedBuildStatusAsync (string buildLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServeAggregatedBuildStatusAsyncWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ServeAggregatedBuildStatusIconAsync (string buildLocator, string suffix);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ServeAggregatedBuildStatusIconAsyncWithHttpInfo (string buildLocator, string suffix);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildsDto</returns>
        System.Threading.Tasks.Task<BuildsDto> ServeAllBuildsAsync (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildsDto>> ServeAllBuildsAsyncWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildDto</returns>
        System.Threading.Tasks.Task<BuildDto> ServeBuildAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildDto>> ServeBuildAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        System.Threading.Tasks.Task<PropertiesDto> ServeBuildActualParametersAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> ServeBuildActualParametersAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServeBuildFieldFromBuildOnlyAsync (string buildLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServeBuildFieldFromBuildOnlyAsyncWithHttpInfo (string buildLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of IssuesUsagesDto</returns>
        System.Threading.Tasks.Task<IssuesUsagesDto> ServeBuildRelatedIssuesAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (IssuesUsagesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuesUsagesDto>> ServeBuildRelatedIssuesAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="name"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServeBuildStatisticValueAsync (string buildLocator, string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServeBuildStatisticValueAsyncWithHttpInfo (string buildLocator, string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        System.Threading.Tasks.Task<PropertiesDto> ServeBuildStatisticValuesAsync (string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> ServeBuildStatisticValuesAsyncWithHttpInfo (string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ServeBuildStatusIconAsync (string buildLocator, string suffix);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ServeBuildStatusIconAsyncWithHttpInfo (string buildLocator, string suffix);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ServeSourceFileAsync (string buildLocator, string fileName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ServeSourceFileAsyncWithHttpInfo (string buildLocator, string fileName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of TagsDto</returns>
        System.Threading.Tasks.Task<TagsDto> ServeTagsFromBuildAsync (string buildLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (TagsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagsDto>> ServeTagsFromBuildAsyncWithHttpInfo (string buildLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetBuildNumberAsync (string buildLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetBuildNumberAsyncWithHttpInfo (string buildLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PinInfoDto</returns>
        System.Threading.Tasks.Task<PinInfoDto> SetBuildPinDataAsync (string buildLocator, PinInfoDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PinInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PinInfoDto>> SetBuildPinDataAsyncWithHttpInfo (string buildLocator, PinInfoDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetBuildStatusTextAsync (string buildLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetBuildStatusTextAsyncWithHttpInfo (string buildLocator, string body = null);
        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetFinishedTimeAsync (string buildLocator, string body = null);

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetFinishedTimeAsyncWithHttpInfo (string buildLocator, string body = null);
        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetFinishedTime1Async (string buildLocator);

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetFinishedTime1AsyncWithHttpInfo (string buildLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of VcsLabelsDto</returns>
        System.Threading.Tasks.Task<VcsLabelsDto> SetVcsLabelAsync (string buildLocator, string locator = null, string fields = null, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsLabelsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsLabelsDto>> SetVcsLabelAsyncWithHttpInfo (string buildLocator, string locator = null, string fields = null, string body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BuildApi : IBuildApi
    {
        private TeamCity.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BuildApi(String basePath)
        {
            this.Configuration = new TeamCity.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BuildApi(TeamCity.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TeamCity.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TeamCity.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TeamCity.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a message to the build log. Service messages are accepted. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns></returns>
        public void AddLogMessage (string buildLocator, string body = null, string fields = null)
        {
             AddLogMessageWithHttpInfo(buildLocator, body, fields);
        }

        /// <summary>
        /// Adds a message to the build log. Service messages are accepted. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddLogMessageWithHttpInfo (string buildLocator, string body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->AddLogMessage");

            var localVarPath = "/app/rest/builds/{buildLocator}/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLogMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a message to the build log. Service messages are accepted. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLogMessageAsync (string buildLocator, string body = null, string fields = null)
        {
             await AddLogMessageAsyncWithHttpInfo(buildLocator, body, fields);

        }

        /// <summary>
        /// Adds a message to the build log. Service messages are accepted. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddLogMessageAsyncWithHttpInfo (string buildLocator, string body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->AddLogMessage");

            var localVarPath = "/app/rest/builds/{buildLocator}/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLogMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProblemOccurrenceDto</returns>
        public ProblemOccurrenceDto AddProblemToBuild (string buildLocator, string body = null, string fields = null)
        {
             ApiResponse<ProblemOccurrenceDto> localVarResponse = AddProblemToBuildWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProblemOccurrenceDto</returns>
        public ApiResponse< ProblemOccurrenceDto > AddProblemToBuildWithHttpInfo (string buildLocator, string body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->AddProblemToBuild");

            var localVarPath = "/app/rest/builds/{buildLocator}/problemOccurrences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProblemToBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProblemOccurrenceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProblemOccurrenceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProblemOccurrenceDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProblemOccurrenceDto</returns>
        public async System.Threading.Tasks.Task<ProblemOccurrenceDto> AddProblemToBuildAsync (string buildLocator, string body = null, string fields = null)
        {
             ApiResponse<ProblemOccurrenceDto> localVarResponse = await AddProblemToBuildAsyncWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProblemOccurrenceDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProblemOccurrenceDto>> AddProblemToBuildAsyncWithHttpInfo (string buildLocator, string body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->AddProblemToBuild");

            var localVarPath = "/app/rest/builds/{buildLocator}/problemOccurrences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProblemToBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProblemOccurrenceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProblemOccurrenceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProblemOccurrenceDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        public MultipleOperationResultDto AddTagsMultipleToBuild (string buildLocator, TagsDto body = null, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = AddTagsMultipleToBuildWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        public ApiResponse< MultipleOperationResultDto > AddTagsMultipleToBuildWithHttpInfo (string buildLocator, TagsDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->AddTagsMultipleToBuild");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTagsMultipleToBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        public async System.Threading.Tasks.Task<MultipleOperationResultDto> AddTagsMultipleToBuildAsync (string buildLocator, TagsDto body = null, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = await AddTagsMultipleToBuildAsyncWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> AddTagsMultipleToBuildAsyncWithHttpInfo (string buildLocator, TagsDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->AddTagsMultipleToBuild");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTagsMultipleToBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>TagsDto</returns>
        public TagsDto AddTagsToBuild (string buildLocator, TagsDto body = null, string fields = null)
        {
             ApiResponse<TagsDto> localVarResponse = AddTagsToBuildWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of TagsDto</returns>
        public ApiResponse< TagsDto > AddTagsToBuildWithHttpInfo (string buildLocator, TagsDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->AddTagsToBuild");

            var localVarPath = "/app/rest/builds/{buildLocator}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTagsToBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of TagsDto</returns>
        public async System.Threading.Tasks.Task<TagsDto> AddTagsToBuildAsync (string buildLocator, TagsDto body = null, string fields = null)
        {
             ApiResponse<TagsDto> localVarResponse = await AddTagsToBuildAsyncWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (TagsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagsDto>> AddTagsToBuildAsyncWithHttpInfo (string buildLocator, TagsDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->AddTagsToBuild");

            var localVarPath = "/app/rest/builds/{buildLocator}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTagsToBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildDto</returns>
        public BuildDto CancelBuild1 (string buildLocator, BuildCancelRequestDto body = null, string fields = null)
        {
             ApiResponse<BuildDto> localVarResponse = CancelBuild1WithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildDto</returns>
        public ApiResponse< BuildDto > CancelBuild1WithHttpInfo (string buildLocator, BuildCancelRequestDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->CancelBuild1");

            var localVarPath = "/app/rest/builds/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBuild1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildDto</returns>
        public async System.Threading.Tasks.Task<BuildDto> CancelBuild1Async (string buildLocator, BuildCancelRequestDto body = null, string fields = null)
        {
             ApiResponse<BuildDto> localVarResponse = await CancelBuild1AsyncWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildDto>> CancelBuild1AsyncWithHttpInfo (string buildLocator, BuildCancelRequestDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->CancelBuild1");

            var localVarPath = "/app/rest/builds/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBuild1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        public MultipleOperationResultDto CancelMultiple (string buildLocator, BuildCancelRequestDto body = null, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = CancelMultipleWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        public ApiResponse< MultipleOperationResultDto > CancelMultipleWithHttpInfo (string buildLocator, BuildCancelRequestDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->CancelMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        public async System.Threading.Tasks.Task<MultipleOperationResultDto> CancelMultipleAsync (string buildLocator, BuildCancelRequestDto body = null, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = await CancelMultipleAsyncWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> CancelMultipleAsyncWithHttpInfo (string buildLocator, BuildCancelRequestDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->CancelMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns></returns>
        public void DeleteBuild (string buildLocator)
        {
             DeleteBuildWithHttpInfo(buildLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBuildWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->DeleteBuild");

            var localVarPath = "/app/rest/builds/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBuildAsync (string buildLocator)
        {
             await DeleteBuildAsyncWithHttpInfo(buildLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBuildAsyncWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->DeleteBuild");

            var localVarPath = "/app/rest/builds/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns></returns>
        public void DeleteComment (string buildLocator)
        {
             DeleteCommentWithHttpInfo(buildLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCommentWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->DeleteComment");

            var localVarPath = "/app/rest/builds/{buildLocator}/comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCommentAsync (string buildLocator)
        {
             await DeleteCommentAsyncWithHttpInfo(buildLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCommentAsyncWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->DeleteComment");

            var localVarPath = "/app/rest/builds/{buildLocator}/comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        public MultipleOperationResultDto DeleteCommentMultiple (string buildLocator, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = DeleteCommentMultipleWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        public ApiResponse< MultipleOperationResultDto > DeleteCommentMultipleWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->DeleteCommentMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}/comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCommentMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        public async System.Threading.Tasks.Task<MultipleOperationResultDto> DeleteCommentMultipleAsync (string buildLocator, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = await DeleteCommentMultipleAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> DeleteCommentMultipleAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->DeleteCommentMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}/comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCommentMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        public MultipleOperationResultDto DeleteMultiple (string buildLocator, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = DeleteMultipleWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        public ApiResponse< MultipleOperationResultDto > DeleteMultipleWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->DeleteMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        public async System.Threading.Tasks.Task<MultipleOperationResultDto> DeleteMultipleAsync (string buildLocator, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = await DeleteMultipleAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> DeleteMultipleAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->DeleteMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildChangesDto</returns>
        public BuildChangesDto GetArtifactDependencyChanges (string buildLocator, string fields = null)
        {
             ApiResponse<BuildChangesDto> localVarResponse = GetArtifactDependencyChangesWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildChangesDto</returns>
        public ApiResponse< BuildChangesDto > GetArtifactDependencyChangesWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetArtifactDependencyChanges");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifactDependencyChanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtifactDependencyChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildChangesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildChangesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildChangesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildChangesDto</returns>
        public async System.Threading.Tasks.Task<BuildChangesDto> GetArtifactDependencyChangesAsync (string buildLocator, string fields = null)
        {
             ApiResponse<BuildChangesDto> localVarResponse = await GetArtifactDependencyChangesAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildChangesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildChangesDto>> GetArtifactDependencyChangesAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetArtifactDependencyChanges");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifactDependencyChanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtifactDependencyChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildChangesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildChangesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildChangesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>string</returns>
        public string GetArtifactsDirectory (string buildLocator)
        {
             ApiResponse<string> localVarResponse = GetArtifactsDirectoryWithHttpInfo(buildLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetArtifactsDirectoryWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetArtifactsDirectory");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifactsDirectory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtifactsDirectory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetArtifactsDirectoryAsync (string buildLocator)
        {
             ApiResponse<string> localVarResponse = await GetArtifactsDirectoryAsyncWithHttpInfo(buildLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetArtifactsDirectoryAsyncWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetArtifactsDirectory");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifactsDirectory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtifactsDirectory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>string</returns>
        public string GetBuildFinishDate (string buildLocator)
        {
             ApiResponse<string> localVarResponse = GetBuildFinishDateWithHttpInfo(buildLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetBuildFinishDateWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetBuildFinishDate");

            var localVarPath = "/app/rest/builds/{buildLocator}/finishDate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildFinishDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetBuildFinishDateAsync (string buildLocator)
        {
             ApiResponse<string> localVarResponse = await GetBuildFinishDateAsyncWithHttpInfo(buildLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetBuildFinishDateAsyncWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetBuildFinishDate");

            var localVarPath = "/app/rest/builds/{buildLocator}/finishDate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildFinishDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>string</returns>
        public string GetBuildNumber (string buildLocator)
        {
             ApiResponse<string> localVarResponse = GetBuildNumberWithHttpInfo(buildLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetBuildNumberWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetBuildNumber");

            var localVarPath = "/app/rest/builds/{buildLocator}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetBuildNumberAsync (string buildLocator)
        {
             ApiResponse<string> localVarResponse = await GetBuildNumberAsyncWithHttpInfo(buildLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetBuildNumberAsyncWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetBuildNumber");

            var localVarPath = "/app/rest/builds/{buildLocator}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>string</returns>
        public string GetBuildStatusText (string buildLocator)
        {
             ApiResponse<string> localVarResponse = GetBuildStatusTextWithHttpInfo(buildLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetBuildStatusTextWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetBuildStatusText");

            var localVarPath = "/app/rest/builds/{buildLocator}/statusText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildStatusText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetBuildStatusTextAsync (string buildLocator)
        {
             ApiResponse<string> localVarResponse = await GetBuildStatusTextAsyncWithHttpInfo(buildLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetBuildStatusTextAsyncWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetBuildStatusText");

            var localVarPath = "/app/rest/builds/{buildLocator}/statusText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildStatusText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CommentDto</returns>
        public CommentDto GetCanceledInfo (string buildLocator, string fields = null)
        {
             ApiResponse<CommentDto> localVarResponse = GetCanceledInfoWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CommentDto</returns>
        public ApiResponse< CommentDto > GetCanceledInfoWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetCanceledInfo");

            var localVarPath = "/app/rest/builds/{buildLocator}/canceledInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCanceledInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CommentDto</returns>
        public async System.Threading.Tasks.Task<CommentDto> GetCanceledInfoAsync (string buildLocator, string fields = null)
        {
             ApiResponse<CommentDto> localVarResponse = await GetCanceledInfoAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentDto>> GetCanceledInfoAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetCanceledInfo");

            var localVarPath = "/app/rest/builds/{buildLocator}/canceledInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCanceledInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FilesDto</returns>
        public FilesDto GetChildren (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null)
        {
             ApiResponse<FilesDto> localVarResponse = GetChildrenWithHttpInfo(path, buildLocator, basePath, locator, fields, logBuildUsage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        public ApiResponse< FilesDto > GetChildrenWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetChildren");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetChildren");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts/children{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        public async System.Threading.Tasks.Task<FilesDto> GetChildrenAsync (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null)
        {
             ApiResponse<FilesDto> localVarResponse = await GetChildrenAsyncWithHttpInfo(path, buildLocator, basePath, locator, fields, logBuildUsage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildrenAsyncWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetChildren");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetChildren");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts/children{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FilesDto</returns>
        public FilesDto GetChildren1 (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             ApiResponse<FilesDto> localVarResponse = GetChildren1WithHttpInfo(path, buildLocator, basePath, locator, fields, resolveParameters, logBuildUsage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        public ApiResponse< FilesDto > GetChildren1WithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetChildren1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetChildren1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts/children{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildren1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        public async System.Threading.Tasks.Task<FilesDto> GetChildren1Async (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             ApiResponse<FilesDto> localVarResponse = await GetChildren1AsyncWithHttpInfo(path, buildLocator, basePath, locator, fields, resolveParameters, logBuildUsage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildren1AsyncWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetChildren1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetChildren1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts/children{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildren1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FilesDto</returns>
        public FilesDto GetChildrenAlias (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null)
        {
             ApiResponse<FilesDto> localVarResponse = GetChildrenAliasWithHttpInfo(path, buildLocator, basePath, locator, fields, logBuildUsage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        public ApiResponse< FilesDto > GetChildrenAliasWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetChildrenAlias");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetChildrenAlias");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildrenAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        public async System.Threading.Tasks.Task<FilesDto> GetChildrenAliasAsync (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null)
        {
             ApiResponse<FilesDto> localVarResponse = await GetChildrenAliasAsyncWithHttpInfo(path, buildLocator, basePath, locator, fields, logBuildUsage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildrenAliasAsyncWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetChildrenAlias");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetChildrenAlias");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildrenAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FilesDto</returns>
        public FilesDto GetChildrenAlias1 (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             ApiResponse<FilesDto> localVarResponse = GetChildrenAlias1WithHttpInfo(path, buildLocator, basePath, locator, fields, resolveParameters, logBuildUsage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        public ApiResponse< FilesDto > GetChildrenAlias1WithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetChildrenAlias1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetChildrenAlias1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildrenAlias1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        public async System.Threading.Tasks.Task<FilesDto> GetChildrenAlias1Async (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             ApiResponse<FilesDto> localVarResponse = await GetChildrenAlias1AsyncWithHttpInfo(path, buildLocator, basePath, locator, fields, resolveParameters, logBuildUsage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildrenAlias1AsyncWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetChildrenAlias1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetChildrenAlias1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildrenAlias1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns></returns>
        public void GetContent (string path, string buildLocator, string responseBuilder = null, bool? logBuildUsage = null)
        {
             GetContentWithHttpInfo(path, buildLocator, responseBuilder, logBuildUsage);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetContentWithHttpInfo (string path, string buildLocator, string responseBuilder = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetContent");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetContent");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts/content{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (responseBuilder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseBuilder", responseBuilder)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetContentAsync (string path, string buildLocator, string responseBuilder = null, bool? logBuildUsage = null)
        {
             await GetContentAsyncWithHttpInfo(path, buildLocator, responseBuilder, logBuildUsage);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContentAsyncWithHttpInfo (string path, string buildLocator, string responseBuilder = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetContent");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetContent");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts/content{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (responseBuilder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseBuilder", responseBuilder)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns></returns>
        public void GetContent1 (string path, string buildLocator, string responseBuilder = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             GetContent1WithHttpInfo(path, buildLocator, responseBuilder, resolveParameters, logBuildUsage);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetContent1WithHttpInfo (string path, string buildLocator, string responseBuilder = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetContent1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetContent1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts/content{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (responseBuilder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseBuilder", responseBuilder)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetContent1Async (string path, string buildLocator, string responseBuilder = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             await GetContent1AsyncWithHttpInfo(path, buildLocator, responseBuilder, resolveParameters, logBuildUsage);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContent1AsyncWithHttpInfo (string path, string buildLocator, string responseBuilder = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetContent1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetContent1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts/content{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (responseBuilder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseBuilder", responseBuilder)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns></returns>
        public void GetContentAlias (string path, string buildLocator, bool? logBuildUsage = null)
        {
             GetContentAliasWithHttpInfo(path, buildLocator, logBuildUsage);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetContentAliasWithHttpInfo (string path, string buildLocator, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetContentAlias");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetContentAlias");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts/files{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetContentAliasAsync (string path, string buildLocator, bool? logBuildUsage = null)
        {
             await GetContentAliasAsyncWithHttpInfo(path, buildLocator, logBuildUsage);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContentAliasAsyncWithHttpInfo (string path, string buildLocator, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetContentAlias");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetContentAlias");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts/files{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns></returns>
        public void GetContentAlias1 (string path, string buildLocator, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             GetContentAlias1WithHttpInfo(path, buildLocator, resolveParameters, logBuildUsage);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetContentAlias1WithHttpInfo (string path, string buildLocator, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetContentAlias1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetContentAlias1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts/files{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentAlias1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetContentAlias1Async (string path, string buildLocator, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             await GetContentAlias1AsyncWithHttpInfo(path, buildLocator, resolveParameters, logBuildUsage);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContentAlias1AsyncWithHttpInfo (string path, string buildLocator, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetContentAlias1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetContentAlias1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts/files{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentAlias1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FileDto</returns>
        public FileDto GetMetadata (string path, string buildLocator, string fields = null, bool? logBuildUsage = null)
        {
             ApiResponse<FileDto> localVarResponse = GetMetadataWithHttpInfo(path, buildLocator, fields, logBuildUsage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FileDto</returns>
        public ApiResponse< FileDto > GetMetadataWithHttpInfo (string path, string buildLocator, string fields = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetMetadata");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetMetadata");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts/metadata{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FileDto</returns>
        public async System.Threading.Tasks.Task<FileDto> GetMetadataAsync (string path, string buildLocator, string fields = null, bool? logBuildUsage = null)
        {
             ApiResponse<FileDto> localVarResponse = await GetMetadataAsyncWithHttpInfo(path, buildLocator, fields, logBuildUsage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FileDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileDto>> GetMetadataAsyncWithHttpInfo (string path, string buildLocator, string fields = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetMetadata");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetMetadata");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts/metadata{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FileDto</returns>
        public FileDto GetMetadata1 (string path, string buildLocator, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             ApiResponse<FileDto> localVarResponse = GetMetadata1WithHttpInfo(path, buildLocator, fields, resolveParameters, logBuildUsage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FileDto</returns>
        public ApiResponse< FileDto > GetMetadata1WithHttpInfo (string path, string buildLocator, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetMetadata1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetMetadata1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts/metadata{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FileDto</returns>
        public async System.Threading.Tasks.Task<FileDto> GetMetadata1Async (string path, string buildLocator, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             ApiResponse<FileDto> localVarResponse = await GetMetadata1AsyncWithHttpInfo(path, buildLocator, fields, resolveParameters, logBuildUsage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FileDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileDto>> GetMetadata1AsyncWithHttpInfo (string path, string buildLocator, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetMetadata1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetMetadata1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts/metadata{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildsDto</returns>
        public BuildsDto GetMultiple (string buildLocator, string fields = null)
        {
             ApiResponse<BuildsDto> localVarResponse = GetMultipleWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildsDto</returns>
        public ApiResponse< BuildsDto > GetMultipleWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildsDto</returns>
        public async System.Threading.Tasks.Task<BuildsDto> GetMultipleAsync (string buildLocator, string fields = null)
        {
             ApiResponse<BuildsDto> localVarResponse = await GetMultipleAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildsDto>> GetMultipleAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="propertyName"></param>
        /// <returns>string</returns>
        public string GetParameter (string buildLocator, string propertyName)
        {
             ApiResponse<string> localVarResponse = GetParameterWithHttpInfo(buildLocator, propertyName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="propertyName"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetParameterWithHttpInfo (string buildLocator, string propertyName)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetParameter");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling BuildApi->GetParameter");

            var localVarPath = "/app/rest/builds/{buildLocator}/resulting-properties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", this.Configuration.ApiClient.ParameterToString(propertyName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="propertyName"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetParameterAsync (string buildLocator, string propertyName)
        {
             ApiResponse<string> localVarResponse = await GetParameterAsyncWithHttpInfo(buildLocator, propertyName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="propertyName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetParameterAsyncWithHttpInfo (string buildLocator, string propertyName)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetParameter");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling BuildApi->GetParameter");

            var localVarPath = "/app/rest/builds/{buildLocator}/resulting-properties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", this.Configuration.ApiClient.ParameterToString(propertyName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PinInfoDto</returns>
        public PinInfoDto GetPinData (string buildLocator, string fields = null)
        {
             ApiResponse<PinInfoDto> localVarResponse = GetPinDataWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PinInfoDto</returns>
        public ApiResponse< PinInfoDto > GetPinDataWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetPinData");

            var localVarPath = "/app/rest/builds/{buildLocator}/pinInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPinData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PinInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinInfoDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PinInfoDto</returns>
        public async System.Threading.Tasks.Task<PinInfoDto> GetPinDataAsync (string buildLocator, string fields = null)
        {
             ApiResponse<PinInfoDto> localVarResponse = await GetPinDataAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PinInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PinInfoDto>> GetPinDataAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetPinData");

            var localVarPath = "/app/rest/builds/{buildLocator}/pinInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPinData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PinInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinInfoDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProblemOccurrencesDto</returns>
        public ProblemOccurrencesDto GetProblems (string buildLocator, string fields = null)
        {
             ApiResponse<ProblemOccurrencesDto> localVarResponse = GetProblemsWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProblemOccurrencesDto</returns>
        public ApiResponse< ProblemOccurrencesDto > GetProblemsWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetProblems");

            var localVarPath = "/app/rest/builds/{buildLocator}/problemOccurrences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProblems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProblemOccurrencesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProblemOccurrencesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProblemOccurrencesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProblemOccurrencesDto</returns>
        public async System.Threading.Tasks.Task<ProblemOccurrencesDto> GetProblemsAsync (string buildLocator, string fields = null)
        {
             ApiResponse<ProblemOccurrencesDto> localVarResponse = await GetProblemsAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProblemOccurrencesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProblemOccurrencesDto>> GetProblemsAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetProblems");

            var localVarPath = "/app/rest/builds/{buildLocator}/problemOccurrences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProblems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProblemOccurrencesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProblemOccurrencesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProblemOccurrencesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="value"></param>
        /// <returns>string</returns>
        public string GetResolvedParameter (string buildLocator, string value)
        {
             ApiResponse<string> localVarResponse = GetResolvedParameterWithHttpInfo(buildLocator, value);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetResolvedParameterWithHttpInfo (string buildLocator, string value)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetResolvedParameter");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling BuildApi->GetResolvedParameter");

            var localVarPath = "/app/rest/builds/{buildLocator}/resolved/{value}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (value != null) localVarPathParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResolvedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="value"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetResolvedParameterAsync (string buildLocator, string value)
        {
             ApiResponse<string> localVarResponse = await GetResolvedParameterAsyncWithHttpInfo(buildLocator, value);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="value"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetResolvedParameterAsyncWithHttpInfo (string buildLocator, string value)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetResolvedParameter");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling BuildApi->GetResolvedParameter");

            var localVarPath = "/app/rest/builds/{buildLocator}/resolved/{value}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (value != null) localVarPathParams.Add("value", this.Configuration.ApiClient.ParameterToString(value)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResolvedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FilesDto</returns>
        public FilesDto GetRoot (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null)
        {
             ApiResponse<FilesDto> localVarResponse = GetRootWithHttpInfo(buildLocator, basePath, locator, fields, logBuildUsage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        public ApiResponse< FilesDto > GetRootWithHttpInfo (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetRoot");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        public async System.Threading.Tasks.Task<FilesDto> GetRootAsync (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null)
        {
             ApiResponse<FilesDto> localVarResponse = await GetRootAsyncWithHttpInfo(buildLocator, basePath, locator, fields, logBuildUsage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetRootAsyncWithHttpInfo (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetRoot");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>FilesDto</returns>
        public FilesDto GetRoot1 (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             ApiResponse<FilesDto> localVarResponse = GetRoot1WithHttpInfo(buildLocator, basePath, locator, fields, resolveParameters, logBuildUsage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        public ApiResponse< FilesDto > GetRoot1WithHttpInfo (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetRoot1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoot1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        public async System.Threading.Tasks.Task<FilesDto> GetRoot1Async (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             ApiResponse<FilesDto> localVarResponse = await GetRoot1AsyncWithHttpInfo(buildLocator, basePath, locator, fields, resolveParameters, logBuildUsage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetRoot1AsyncWithHttpInfo (string buildLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetRoot1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoot1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>TestOccurrencesDto</returns>
        public TestOccurrencesDto GetTests (string buildLocator, string fields = null)
        {
             ApiResponse<TestOccurrencesDto> localVarResponse = GetTestsWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of TestOccurrencesDto</returns>
        public ApiResponse< TestOccurrencesDto > GetTestsWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetTests");

            var localVarPath = "/app/rest/builds/{buildLocator}/testOccurrences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestOccurrencesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TestOccurrencesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestOccurrencesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of TestOccurrencesDto</returns>
        public async System.Threading.Tasks.Task<TestOccurrencesDto> GetTestsAsync (string buildLocator, string fields = null)
        {
             ApiResponse<TestOccurrencesDto> localVarResponse = await GetTestsAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (TestOccurrencesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TestOccurrencesDto>> GetTestsAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetTests");

            var localVarPath = "/app/rest/builds/{buildLocator}/testOccurrences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestOccurrencesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TestOccurrencesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestOccurrencesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsLabelsDto</returns>
        public VcsLabelsDto GetVcsLabels (string buildLocator, string fields = null)
        {
             ApiResponse<VcsLabelsDto> localVarResponse = GetVcsLabelsWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsLabelsDto</returns>
        public ApiResponse< VcsLabelsDto > GetVcsLabelsWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetVcsLabels");

            var localVarPath = "/app/rest/builds/{buildLocator}/vcsLabels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVcsLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsLabelsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsLabelsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsLabelsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsLabelsDto</returns>
        public async System.Threading.Tasks.Task<VcsLabelsDto> GetVcsLabelsAsync (string buildLocator, string fields = null)
        {
             ApiResponse<VcsLabelsDto> localVarResponse = await GetVcsLabelsAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsLabelsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsLabelsDto>> GetVcsLabelsAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetVcsLabels");

            var localVarPath = "/app/rest/builds/{buildLocator}/vcsLabels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVcsLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsLabelsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsLabelsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsLabelsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns></returns>
        public void GetZipped (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? logBuildUsage = null)
        {
             GetZippedWithHttpInfo(path, buildLocator, basePath, locator, name, logBuildUsage);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetZippedWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetZipped");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetZipped");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts/archived{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZipped", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetZippedAsync (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? logBuildUsage = null)
        {
             await GetZippedAsyncWithHttpInfo(path, buildLocator, basePath, locator, name, logBuildUsage);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetZippedAsyncWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetZipped");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetZipped");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/artifacts/archived{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZipped", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns></returns>
        public void GetZipped1 (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             GetZipped1WithHttpInfo(path, buildLocator, basePath, locator, name, resolveParameters, logBuildUsage);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetZipped1WithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetZipped1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetZipped1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts/archived{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZipped1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetZipped1Async (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
             await GetZipped1AsyncWithHttpInfo(path, buildLocator, basePath, locator, name, resolveParameters, logBuildUsage);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="buildLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <param name="logBuildUsage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetZipped1AsyncWithHttpInfo (string path, string buildLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null, bool? logBuildUsage = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildApi->GetZipped1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->GetZipped1");

            var localVarPath = "/app/rest/builds/{buildLocator}/artifacts/archived{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter
            if (logBuildUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logBuildUsage", logBuildUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZipped1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Starts the queued build as an agent-less build and returns the corresponding running build. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildDto</returns>
        public BuildDto MarkBuildAsRunning (string buildLocator, string body = null, string fields = null)
        {
             ApiResponse<BuildDto> localVarResponse = MarkBuildAsRunningWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Starts the queued build as an agent-less build and returns the corresponding running build. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildDto</returns>
        public ApiResponse< BuildDto > MarkBuildAsRunningWithHttpInfo (string buildLocator, string body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->MarkBuildAsRunning");

            var localVarPath = "/app/rest/builds/{buildLocator}/runningData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkBuildAsRunning", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildDto)));
        }

        /// <summary>
        /// Starts the queued build as an agent-less build and returns the corresponding running build. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildDto</returns>
        public async System.Threading.Tasks.Task<BuildDto> MarkBuildAsRunningAsync (string buildLocator, string body = null, string fields = null)
        {
             ApiResponse<BuildDto> localVarResponse = await MarkBuildAsRunningAsyncWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Starts the queued build as an agent-less build and returns the corresponding running build. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildDto>> MarkBuildAsRunningAsyncWithHttpInfo (string buildLocator, string body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->MarkBuildAsRunning");

            var localVarPath = "/app/rest/builds/{buildLocator}/runningData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkBuildAsRunning", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        public MultipleOperationResultDto PinMultiple (string buildLocator, PinInfoDto body = null, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = PinMultipleWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        public ApiResponse< MultipleOperationResultDto > PinMultipleWithHttpInfo (string buildLocator, PinInfoDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->PinMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}/pinInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        public async System.Threading.Tasks.Task<MultipleOperationResultDto> PinMultipleAsync (string buildLocator, PinInfoDto body = null, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = await PinMultipleAsyncWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> PinMultipleAsyncWithHttpInfo (string buildLocator, PinInfoDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->PinMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}/pinInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        public MultipleOperationResultDto RemoveTagsMultiple (string buildLocator, TagsDto body = null, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = RemoveTagsMultipleWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        public ApiResponse< MultipleOperationResultDto > RemoveTagsMultipleWithHttpInfo (string buildLocator, TagsDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->RemoveTagsMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTagsMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        public async System.Threading.Tasks.Task<MultipleOperationResultDto> RemoveTagsMultipleAsync (string buildLocator, TagsDto body = null, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = await RemoveTagsMultipleAsyncWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> RemoveTagsMultipleAsyncWithHttpInfo (string buildLocator, TagsDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->RemoveTagsMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTagsMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ReplaceComment (string buildLocator, string body = null)
        {
             ReplaceCommentWithHttpInfo(buildLocator, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReplaceCommentWithHttpInfo (string buildLocator, string body = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ReplaceComment");

            var localVarPath = "/app/rest/builds/{buildLocator}/comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceCommentAsync (string buildLocator, string body = null)
        {
             await ReplaceCommentAsyncWithHttpInfo(buildLocator, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceCommentAsyncWithHttpInfo (string buildLocator, string body = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ReplaceComment");

            var localVarPath = "/app/rest/builds/{buildLocator}/comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>MultipleOperationResultDto</returns>
        public MultipleOperationResultDto ReplaceCommentMultiple (string buildLocator, string body = null, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = ReplaceCommentMultipleWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of MultipleOperationResultDto</returns>
        public ApiResponse< MultipleOperationResultDto > ReplaceCommentMultipleWithHttpInfo (string buildLocator, string body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ReplaceCommentMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}/comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceCommentMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of MultipleOperationResultDto</returns>
        public async System.Threading.Tasks.Task<MultipleOperationResultDto> ReplaceCommentMultipleAsync (string buildLocator, string body = null, string fields = null)
        {
             ApiResponse<MultipleOperationResultDto> localVarResponse = await ReplaceCommentMultipleAsyncWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (MultipleOperationResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultipleOperationResultDto>> ReplaceCommentMultipleAsyncWithHttpInfo (string buildLocator, string body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ReplaceCommentMultiple");

            var localVarPath = "/app/rest/builds/multiple/{buildLocator}/comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceCommentMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleOperationResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultipleOperationResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleOperationResultDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>TagsDto</returns>
        public TagsDto ReplaceTagsOnBuild (string buildLocator, string locator = null, TagsDto body = null, string fields = null)
        {
             ApiResponse<TagsDto> localVarResponse = ReplaceTagsOnBuildWithHttpInfo(buildLocator, locator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of TagsDto</returns>
        public ApiResponse< TagsDto > ReplaceTagsOnBuildWithHttpInfo (string buildLocator, string locator = null, TagsDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ReplaceTagsOnBuild");

            var localVarPath = "/app/rest/builds/{buildLocator}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceTagsOnBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of TagsDto</returns>
        public async System.Threading.Tasks.Task<TagsDto> ReplaceTagsOnBuildAsync (string buildLocator, string locator = null, TagsDto body = null, string fields = null)
        {
             ApiResponse<TagsDto> localVarResponse = await ReplaceTagsOnBuildAsyncWithHttpInfo(buildLocator, locator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (TagsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagsDto>> ReplaceTagsOnBuildAsyncWithHttpInfo (string buildLocator, string locator = null, TagsDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ReplaceTagsOnBuild");

            var localVarPath = "/app/rest/builds/{buildLocator}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceTagsOnBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns></returns>
        public void ResetBuildFinishParameters (string buildLocator)
        {
             ResetBuildFinishParametersWithHttpInfo(buildLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResetBuildFinishParametersWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ResetBuildFinishParameters");

            var localVarPath = "/app/rest/builds/{buildLocator}/caches/finishProperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetBuildFinishParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetBuildFinishParametersAsync (string buildLocator)
        {
             await ResetBuildFinishParametersAsyncWithHttpInfo(buildLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResetBuildFinishParametersAsyncWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ResetBuildFinishParameters");

            var localVarPath = "/app/rest/builds/{buildLocator}/caches/finishProperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetBuildFinishParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>string</returns>
        public string ServeAggregatedBuildStatus (string buildLocator)
        {
             ApiResponse<string> localVarResponse = ServeAggregatedBuildStatusWithHttpInfo(buildLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServeAggregatedBuildStatusWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeAggregatedBuildStatus");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeAggregatedBuildStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServeAggregatedBuildStatusAsync (string buildLocator)
        {
             ApiResponse<string> localVarResponse = await ServeAggregatedBuildStatusAsyncWithHttpInfo(buildLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServeAggregatedBuildStatusAsyncWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeAggregatedBuildStatus");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeAggregatedBuildStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns></returns>
        public void ServeAggregatedBuildStatusIcon (string buildLocator, string suffix)
        {
             ServeAggregatedBuildStatusIconWithHttpInfo(buildLocator, suffix);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ServeAggregatedBuildStatusIconWithHttpInfo (string buildLocator, string suffix)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeAggregatedBuildStatusIcon");
            // verify the required parameter 'suffix' is set
            if (suffix == null)
                throw new ApiException(400, "Missing required parameter 'suffix' when calling BuildApi->ServeAggregatedBuildStatusIcon");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/statusIcon{suffix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (suffix != null) localVarPathParams.Add("suffix", this.Configuration.ApiClient.ParameterToString(suffix)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeAggregatedBuildStatusIcon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ServeAggregatedBuildStatusIconAsync (string buildLocator, string suffix)
        {
             await ServeAggregatedBuildStatusIconAsyncWithHttpInfo(buildLocator, suffix);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ServeAggregatedBuildStatusIconAsyncWithHttpInfo (string buildLocator, string suffix)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeAggregatedBuildStatusIcon");
            // verify the required parameter 'suffix' is set
            if (suffix == null)
                throw new ApiException(400, "Missing required parameter 'suffix' when calling BuildApi->ServeAggregatedBuildStatusIcon");

            var localVarPath = "/app/rest/builds/aggregated/{buildLocator}/statusIcon{suffix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (suffix != null) localVarPathParams.Add("suffix", this.Configuration.ApiClient.ParameterToString(suffix)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeAggregatedBuildStatusIcon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildsDto</returns>
        public BuildsDto ServeAllBuilds (string locator = null, string fields = null)
        {
             ApiResponse<BuildsDto> localVarResponse = ServeAllBuildsWithHttpInfo(locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildsDto</returns>
        public ApiResponse< BuildsDto > ServeAllBuildsWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeAllBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildsDto</returns>
        public async System.Threading.Tasks.Task<BuildsDto> ServeAllBuildsAsync (string locator = null, string fields = null)
        {
             ApiResponse<BuildsDto> localVarResponse = await ServeAllBuildsAsyncWithHttpInfo(locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildsDto>> ServeAllBuildsAsyncWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeAllBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildDto</returns>
        public BuildDto ServeBuild (string buildLocator, string fields = null)
        {
             ApiResponse<BuildDto> localVarResponse = ServeBuildWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildDto</returns>
        public ApiResponse< BuildDto > ServeBuildWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuild");

            var localVarPath = "/app/rest/builds/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildDto</returns>
        public async System.Threading.Tasks.Task<BuildDto> ServeBuildAsync (string buildLocator, string fields = null)
        {
             ApiResponse<BuildDto> localVarResponse = await ServeBuildAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildDto>> ServeBuildAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuild");

            var localVarPath = "/app/rest/builds/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        public PropertiesDto ServeBuildActualParameters (string buildLocator, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = ServeBuildActualParametersWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        public ApiResponse< PropertiesDto > ServeBuildActualParametersWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuildActualParameters");

            var localVarPath = "/app/rest/builds/{buildLocator}/resulting-properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildActualParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        public async System.Threading.Tasks.Task<PropertiesDto> ServeBuildActualParametersAsync (string buildLocator, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = await ServeBuildActualParametersAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> ServeBuildActualParametersAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuildActualParameters");

            var localVarPath = "/app/rest/builds/{buildLocator}/resulting-properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildActualParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        public string ServeBuildFieldFromBuildOnly (string buildLocator, string field)
        {
             ApiResponse<string> localVarResponse = ServeBuildFieldFromBuildOnlyWithHttpInfo(buildLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServeBuildFieldFromBuildOnlyWithHttpInfo (string buildLocator, string field)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuildFieldFromBuildOnly");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling BuildApi->ServeBuildFieldFromBuildOnly");

            var localVarPath = "/app/rest/builds/{buildLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildFieldFromBuildOnly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServeBuildFieldFromBuildOnlyAsync (string buildLocator, string field)
        {
             ApiResponse<string> localVarResponse = await ServeBuildFieldFromBuildOnlyAsyncWithHttpInfo(buildLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServeBuildFieldFromBuildOnlyAsyncWithHttpInfo (string buildLocator, string field)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuildFieldFromBuildOnly");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling BuildApi->ServeBuildFieldFromBuildOnly");

            var localVarPath = "/app/rest/builds/{buildLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildFieldFromBuildOnly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>IssuesUsagesDto</returns>
        public IssuesUsagesDto ServeBuildRelatedIssues (string buildLocator, string fields = null)
        {
             ApiResponse<IssuesUsagesDto> localVarResponse = ServeBuildRelatedIssuesWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of IssuesUsagesDto</returns>
        public ApiResponse< IssuesUsagesDto > ServeBuildRelatedIssuesWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuildRelatedIssues");

            var localVarPath = "/app/rest/builds/{buildLocator}/relatedIssues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildRelatedIssues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuesUsagesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuesUsagesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuesUsagesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of IssuesUsagesDto</returns>
        public async System.Threading.Tasks.Task<IssuesUsagesDto> ServeBuildRelatedIssuesAsync (string buildLocator, string fields = null)
        {
             ApiResponse<IssuesUsagesDto> localVarResponse = await ServeBuildRelatedIssuesAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (IssuesUsagesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuesUsagesDto>> ServeBuildRelatedIssuesAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuildRelatedIssues");

            var localVarPath = "/app/rest/builds/{buildLocator}/relatedIssues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildRelatedIssues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuesUsagesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuesUsagesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuesUsagesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="name"></param>
        /// <returns>string</returns>
        public string ServeBuildStatisticValue (string buildLocator, string name)
        {
             ApiResponse<string> localVarResponse = ServeBuildStatisticValueWithHttpInfo(buildLocator, name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServeBuildStatisticValueWithHttpInfo (string buildLocator, string name)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuildStatisticValue");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildApi->ServeBuildStatisticValue");

            var localVarPath = "/app/rest/builds/{buildLocator}/statistics/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildStatisticValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="name"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServeBuildStatisticValueAsync (string buildLocator, string name)
        {
             ApiResponse<string> localVarResponse = await ServeBuildStatisticValueAsyncWithHttpInfo(buildLocator, name);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServeBuildStatisticValueAsyncWithHttpInfo (string buildLocator, string name)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuildStatisticValue");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildApi->ServeBuildStatisticValue");

            var localVarPath = "/app/rest/builds/{buildLocator}/statistics/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildStatisticValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        public PropertiesDto ServeBuildStatisticValues (string buildLocator, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = ServeBuildStatisticValuesWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        public ApiResponse< PropertiesDto > ServeBuildStatisticValuesWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuildStatisticValues");

            var localVarPath = "/app/rest/builds/{buildLocator}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildStatisticValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        public async System.Threading.Tasks.Task<PropertiesDto> ServeBuildStatisticValuesAsync (string buildLocator, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = await ServeBuildStatisticValuesAsyncWithHttpInfo(buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> ServeBuildStatisticValuesAsyncWithHttpInfo (string buildLocator, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuildStatisticValues");

            var localVarPath = "/app/rest/builds/{buildLocator}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildStatisticValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns></returns>
        public void ServeBuildStatusIcon (string buildLocator, string suffix)
        {
             ServeBuildStatusIconWithHttpInfo(buildLocator, suffix);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ServeBuildStatusIconWithHttpInfo (string buildLocator, string suffix)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuildStatusIcon");
            // verify the required parameter 'suffix' is set
            if (suffix == null)
                throw new ApiException(400, "Missing required parameter 'suffix' when calling BuildApi->ServeBuildStatusIcon");

            var localVarPath = "/app/rest/builds/{buildLocator}/statusIcon{suffix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (suffix != null) localVarPathParams.Add("suffix", this.Configuration.ApiClient.ParameterToString(suffix)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildStatusIcon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ServeBuildStatusIconAsync (string buildLocator, string suffix)
        {
             await ServeBuildStatusIconAsyncWithHttpInfo(buildLocator, suffix);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="suffix"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ServeBuildStatusIconAsyncWithHttpInfo (string buildLocator, string suffix)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeBuildStatusIcon");
            // verify the required parameter 'suffix' is set
            if (suffix == null)
                throw new ApiException(400, "Missing required parameter 'suffix' when calling BuildApi->ServeBuildStatusIcon");

            var localVarPath = "/app/rest/builds/{buildLocator}/statusIcon{suffix}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (suffix != null) localVarPathParams.Add("suffix", this.Configuration.ApiClient.ParameterToString(suffix)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildStatusIcon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public void ServeSourceFile (string buildLocator, string fileName)
        {
             ServeSourceFileWithHttpInfo(buildLocator, fileName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fileName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ServeSourceFileWithHttpInfo (string buildLocator, string fileName)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeSourceFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling BuildApi->ServeSourceFile");

            var localVarPath = "/app/rest/builds/{buildLocator}/sources/files/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", this.Configuration.ApiClient.ParameterToString(fileName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeSourceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ServeSourceFileAsync (string buildLocator, string fileName)
        {
             await ServeSourceFileAsyncWithHttpInfo(buildLocator, fileName);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ServeSourceFileAsyncWithHttpInfo (string buildLocator, string fileName)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeSourceFile");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling BuildApi->ServeSourceFile");

            var localVarPath = "/app/rest/builds/{buildLocator}/sources/files/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", this.Configuration.ApiClient.ParameterToString(fileName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeSourceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>TagsDto</returns>
        public TagsDto ServeTagsFromBuild (string buildLocator, string locator = null, string fields = null)
        {
             ApiResponse<TagsDto> localVarResponse = ServeTagsFromBuildWithHttpInfo(buildLocator, locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of TagsDto</returns>
        public ApiResponse< TagsDto > ServeTagsFromBuildWithHttpInfo (string buildLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeTagsFromBuild");

            var localVarPath = "/app/rest/builds/{buildLocator}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeTagsFromBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of TagsDto</returns>
        public async System.Threading.Tasks.Task<TagsDto> ServeTagsFromBuildAsync (string buildLocator, string locator = null, string fields = null)
        {
             ApiResponse<TagsDto> localVarResponse = await ServeTagsFromBuildAsyncWithHttpInfo(buildLocator, locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (TagsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagsDto>> ServeTagsFromBuildAsyncWithHttpInfo (string buildLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->ServeTagsFromBuild");

            var localVarPath = "/app/rest/builds/{buildLocator}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeTagsFromBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SetBuildNumber (string buildLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = SetBuildNumberWithHttpInfo(buildLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetBuildNumberWithHttpInfo (string buildLocator, string body = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->SetBuildNumber");

            var localVarPath = "/app/rest/builds/{buildLocator}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBuildNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetBuildNumberAsync (string buildLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetBuildNumberAsyncWithHttpInfo(buildLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetBuildNumberAsyncWithHttpInfo (string buildLocator, string body = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->SetBuildNumber");

            var localVarPath = "/app/rest/builds/{buildLocator}/number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBuildNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PinInfoDto</returns>
        public PinInfoDto SetBuildPinData (string buildLocator, PinInfoDto body = null, string fields = null)
        {
             ApiResponse<PinInfoDto> localVarResponse = SetBuildPinDataWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PinInfoDto</returns>
        public ApiResponse< PinInfoDto > SetBuildPinDataWithHttpInfo (string buildLocator, PinInfoDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->SetBuildPinData");

            var localVarPath = "/app/rest/builds/{buildLocator}/pinInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBuildPinData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PinInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinInfoDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PinInfoDto</returns>
        public async System.Threading.Tasks.Task<PinInfoDto> SetBuildPinDataAsync (string buildLocator, PinInfoDto body = null, string fields = null)
        {
             ApiResponse<PinInfoDto> localVarResponse = await SetBuildPinDataAsyncWithHttpInfo(buildLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PinInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PinInfoDto>> SetBuildPinDataAsyncWithHttpInfo (string buildLocator, PinInfoDto body = null, string fields = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->SetBuildPinData");

            var localVarPath = "/app/rest/builds/{buildLocator}/pinInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBuildPinData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PinInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinInfoDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SetBuildStatusText (string buildLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = SetBuildStatusTextWithHttpInfo(buildLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetBuildStatusTextWithHttpInfo (string buildLocator, string body = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->SetBuildStatusText");

            var localVarPath = "/app/rest/builds/{buildLocator}/statusText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBuildStatusText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetBuildStatusTextAsync (string buildLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetBuildStatusTextAsyncWithHttpInfo(buildLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetBuildStatusTextAsyncWithHttpInfo (string buildLocator, string body = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->SetBuildStatusText");

            var localVarPath = "/app/rest/builds/{buildLocator}/statusText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBuildStatusText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SetFinishedTime (string buildLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = SetFinishedTimeWithHttpInfo(buildLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetFinishedTimeWithHttpInfo (string buildLocator, string body = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->SetFinishedTime");

            var localVarPath = "/app/rest/builds/{buildLocator}/finishDate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetFinishedTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetFinishedTimeAsync (string buildLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetFinishedTimeAsyncWithHttpInfo(buildLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetFinishedTimeAsyncWithHttpInfo (string buildLocator, string body = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->SetFinishedTime");

            var localVarPath = "/app/rest/builds/{buildLocator}/finishDate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetFinishedTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>string</returns>
        public string SetFinishedTime1 (string buildLocator)
        {
             ApiResponse<string> localVarResponse = SetFinishedTime1WithHttpInfo(buildLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetFinishedTime1WithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->SetFinishedTime1");

            var localVarPath = "/app/rest/builds/{buildLocator}/finish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetFinishedTime1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetFinishedTime1Async (string buildLocator)
        {
             ApiResponse<string> localVarResponse = await SetFinishedTime1AsyncWithHttpInfo(buildLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Marks the running build as finished by passing agent the current time of the build to finish. 
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetFinishedTime1AsyncWithHttpInfo (string buildLocator)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->SetFinishedTime1");

            var localVarPath = "/app/rest/builds/{buildLocator}/finish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetFinishedTime1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>VcsLabelsDto</returns>
        public VcsLabelsDto SetVcsLabel (string buildLocator, string locator = null, string fields = null, string body = null)
        {
             ApiResponse<VcsLabelsDto> localVarResponse = SetVcsLabelWithHttpInfo(buildLocator, locator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of VcsLabelsDto</returns>
        public ApiResponse< VcsLabelsDto > SetVcsLabelWithHttpInfo (string buildLocator, string locator = null, string fields = null, string body = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->SetVcsLabel");

            var localVarPath = "/app/rest/builds/{buildLocator}/vcsLabels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetVcsLabel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsLabelsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsLabelsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsLabelsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of VcsLabelsDto</returns>
        public async System.Threading.Tasks.Task<VcsLabelsDto> SetVcsLabelAsync (string buildLocator, string locator = null, string fields = null, string body = null)
        {
             ApiResponse<VcsLabelsDto> localVarResponse = await SetVcsLabelAsyncWithHttpInfo(buildLocator, locator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsLabelsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsLabelsDto>> SetVcsLabelAsyncWithHttpInfo (string buildLocator, string locator = null, string fields = null, string body = null)
        {
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildApi->SetVcsLabel");

            var localVarPath = "/app/rest/builds/{buildLocator}/vcsLabels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetVcsLabel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsLabelsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsLabelsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsLabelsDto)));
        }

    }
}
