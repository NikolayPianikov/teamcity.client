/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TeamCity.Client;
using TeamCity.Model;

namespace TeamCity.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <returns></returns>
        void DeleteAgent (string agentLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAgentWithHttpInfo (string agentLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CompatibilitiesDto</returns>
        CompatibilitiesDto GeIncompatibleBuildTypes (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CompatibilitiesDto</returns>
        ApiResponse<CompatibilitiesDto> GeIncompatibleBuildTypesWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentPoolDto</returns>
        AgentPoolDto GetAgentPool (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolDto</returns>
        ApiResponse<AgentPoolDto> GetAgentPoolWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CompatibilityPolicyDto</returns>
        CompatibilityPolicyDto GetAllowedRunConfigurations (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CompatibilityPolicyDto</returns>
        ApiResponse<CompatibilityPolicyDto> GetAllowedRunConfigurationsWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AuthorizedInfoDto</returns>
        AuthorizedInfoDto GetAuthorizedInfo (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AuthorizedInfoDto</returns>
        ApiResponse<AuthorizedInfoDto> GetAuthorizedInfoWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        BuildTypesDto GetCompatibleBuildTypes (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        ApiResponse<BuildTypesDto> GetCompatibleBuildTypesWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>EnabledInfoDto</returns>
        EnabledInfoDto GetEnabledInfo (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of EnabledInfoDto</returns>
        ApiResponse<EnabledInfoDto> GetEnabledInfoWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentDto</returns>
        AgentDto ServeAgent (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentDto</returns>
        ApiResponse<AgentDto> ServeAgentWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        string ServeAgentField (string agentLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServeAgentFieldWithHttpInfo (string agentLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentsDto</returns>
        AgentsDto ServeAgents (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentsDto</returns>
        ApiResponse<AgentsDto> ServeAgentsWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SetAgentField (string agentLocator, string field, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetAgentFieldWithHttpInfo (string agentLocator, string field, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentPoolDto</returns>
        AgentPoolDto SetAgentPool (string agentLocator, AgentPoolDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolDto</returns>
        ApiResponse<AgentPoolDto> SetAgentPoolWithHttpInfo (string agentLocator, AgentPoolDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CompatibilityPolicyDto</returns>
        CompatibilityPolicyDto SetAllowedRunConfigurations (string agentLocator, CompatibilityPolicyDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CompatibilityPolicyDto</returns>
        ApiResponse<CompatibilityPolicyDto> SetAllowedRunConfigurationsWithHttpInfo (string agentLocator, CompatibilityPolicyDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AuthorizedInfoDto</returns>
        AuthorizedInfoDto SetAuthorizedInfo (string agentLocator, AuthorizedInfoDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AuthorizedInfoDto</returns>
        ApiResponse<AuthorizedInfoDto> SetAuthorizedInfoWithHttpInfo (string agentLocator, AuthorizedInfoDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>EnabledInfoDto</returns>
        EnabledInfoDto SetEnabledInfo (string agentLocator, EnabledInfoDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of EnabledInfoDto</returns>
        ApiResponse<EnabledInfoDto> SetEnabledInfoWithHttpInfo (string agentLocator, EnabledInfoDto body = null, string fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAgentAsync (string agentLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAgentAsyncWithHttpInfo (string agentLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CompatibilitiesDto</returns>
        System.Threading.Tasks.Task<CompatibilitiesDto> GeIncompatibleBuildTypesAsync (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CompatibilitiesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompatibilitiesDto>> GeIncompatibleBuildTypesAsyncWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentPoolDto</returns>
        System.Threading.Tasks.Task<AgentPoolDto> GetAgentPoolAsync (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolDto>> GetAgentPoolAsyncWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CompatibilityPolicyDto</returns>
        System.Threading.Tasks.Task<CompatibilityPolicyDto> GetAllowedRunConfigurationsAsync (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CompatibilityPolicyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompatibilityPolicyDto>> GetAllowedRunConfigurationsAsyncWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AuthorizedInfoDto</returns>
        System.Threading.Tasks.Task<AuthorizedInfoDto> GetAuthorizedInfoAsync (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AuthorizedInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizedInfoDto>> GetAuthorizedInfoAsyncWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        System.Threading.Tasks.Task<BuildTypesDto> GetCompatibleBuildTypesAsync (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> GetCompatibleBuildTypesAsyncWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of EnabledInfoDto</returns>
        System.Threading.Tasks.Task<EnabledInfoDto> GetEnabledInfoAsync (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (EnabledInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnabledInfoDto>> GetEnabledInfoAsyncWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentDto</returns>
        System.Threading.Tasks.Task<AgentDto> ServeAgentAsync (string agentLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentDto>> ServeAgentAsyncWithHttpInfo (string agentLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServeAgentFieldAsync (string agentLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServeAgentFieldAsyncWithHttpInfo (string agentLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentsDto</returns>
        System.Threading.Tasks.Task<AgentsDto> ServeAgentsAsync (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentsDto>> ServeAgentsAsyncWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetAgentFieldAsync (string agentLocator, string field, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetAgentFieldAsyncWithHttpInfo (string agentLocator, string field, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentPoolDto</returns>
        System.Threading.Tasks.Task<AgentPoolDto> SetAgentPoolAsync (string agentLocator, AgentPoolDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolDto>> SetAgentPoolAsyncWithHttpInfo (string agentLocator, AgentPoolDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CompatibilityPolicyDto</returns>
        System.Threading.Tasks.Task<CompatibilityPolicyDto> SetAllowedRunConfigurationsAsync (string agentLocator, CompatibilityPolicyDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CompatibilityPolicyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompatibilityPolicyDto>> SetAllowedRunConfigurationsAsyncWithHttpInfo (string agentLocator, CompatibilityPolicyDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AuthorizedInfoDto</returns>
        System.Threading.Tasks.Task<AuthorizedInfoDto> SetAuthorizedInfoAsync (string agentLocator, AuthorizedInfoDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AuthorizedInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizedInfoDto>> SetAuthorizedInfoAsyncWithHttpInfo (string agentLocator, AuthorizedInfoDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of EnabledInfoDto</returns>
        System.Threading.Tasks.Task<EnabledInfoDto> SetEnabledInfoAsync (string agentLocator, EnabledInfoDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (EnabledInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnabledInfoDto>> SetEnabledInfoAsyncWithHttpInfo (string agentLocator, EnabledInfoDto body = null, string fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AgentApi : IAgentApi
    {
        private TeamCity.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgentApi(String basePath)
        {
            this.Configuration = new TeamCity.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AgentApi(TeamCity.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TeamCity.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TeamCity.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TeamCity.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <returns></returns>
        public void DeleteAgent (string agentLocator)
        {
             DeleteAgentWithHttpInfo(agentLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAgentWithHttpInfo (string agentLocator)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->DeleteAgent");

            var localVarPath = "/app/rest/agents/{agentLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAgentAsync (string agentLocator)
        {
             await DeleteAgentAsyncWithHttpInfo(agentLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAgentAsyncWithHttpInfo (string agentLocator)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->DeleteAgent");

            var localVarPath = "/app/rest/agents/{agentLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CompatibilitiesDto</returns>
        public CompatibilitiesDto GeIncompatibleBuildTypes (string agentLocator, string fields = null)
        {
             ApiResponse<CompatibilitiesDto> localVarResponse = GeIncompatibleBuildTypesWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CompatibilitiesDto</returns>
        public ApiResponse< CompatibilitiesDto > GeIncompatibleBuildTypesWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->GeIncompatibleBuildTypes");

            var localVarPath = "/app/rest/agents/{agentLocator}/incompatibleBuildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeIncompatibleBuildTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompatibilitiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompatibilitiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompatibilitiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CompatibilitiesDto</returns>
        public async System.Threading.Tasks.Task<CompatibilitiesDto> GeIncompatibleBuildTypesAsync (string agentLocator, string fields = null)
        {
             ApiResponse<CompatibilitiesDto> localVarResponse = await GeIncompatibleBuildTypesAsyncWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CompatibilitiesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompatibilitiesDto>> GeIncompatibleBuildTypesAsyncWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->GeIncompatibleBuildTypes");

            var localVarPath = "/app/rest/agents/{agentLocator}/incompatibleBuildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeIncompatibleBuildTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompatibilitiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompatibilitiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompatibilitiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentPoolDto</returns>
        public AgentPoolDto GetAgentPool (string agentLocator, string fields = null)
        {
             ApiResponse<AgentPoolDto> localVarResponse = GetAgentPoolWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolDto</returns>
        public ApiResponse< AgentPoolDto > GetAgentPoolWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->GetAgentPool");

            var localVarPath = "/app/rest/agents/{agentLocator}/pool";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgentPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentPoolDto</returns>
        public async System.Threading.Tasks.Task<AgentPoolDto> GetAgentPoolAsync (string agentLocator, string fields = null)
        {
             ApiResponse<AgentPoolDto> localVarResponse = await GetAgentPoolAsyncWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentPoolDto>> GetAgentPoolAsyncWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->GetAgentPool");

            var localVarPath = "/app/rest/agents/{agentLocator}/pool";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgentPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CompatibilityPolicyDto</returns>
        public CompatibilityPolicyDto GetAllowedRunConfigurations (string agentLocator, string fields = null)
        {
             ApiResponse<CompatibilityPolicyDto> localVarResponse = GetAllowedRunConfigurationsWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CompatibilityPolicyDto</returns>
        public ApiResponse< CompatibilityPolicyDto > GetAllowedRunConfigurationsWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->GetAllowedRunConfigurations");

            var localVarPath = "/app/rest/agents/{agentLocator}/compatibilityPolicy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllowedRunConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompatibilityPolicyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompatibilityPolicyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompatibilityPolicyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CompatibilityPolicyDto</returns>
        public async System.Threading.Tasks.Task<CompatibilityPolicyDto> GetAllowedRunConfigurationsAsync (string agentLocator, string fields = null)
        {
             ApiResponse<CompatibilityPolicyDto> localVarResponse = await GetAllowedRunConfigurationsAsyncWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CompatibilityPolicyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompatibilityPolicyDto>> GetAllowedRunConfigurationsAsyncWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->GetAllowedRunConfigurations");

            var localVarPath = "/app/rest/agents/{agentLocator}/compatibilityPolicy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllowedRunConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompatibilityPolicyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompatibilityPolicyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompatibilityPolicyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AuthorizedInfoDto</returns>
        public AuthorizedInfoDto GetAuthorizedInfo (string agentLocator, string fields = null)
        {
             ApiResponse<AuthorizedInfoDto> localVarResponse = GetAuthorizedInfoWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AuthorizedInfoDto</returns>
        public ApiResponse< AuthorizedInfoDto > GetAuthorizedInfoWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->GetAuthorizedInfo");

            var localVarPath = "/app/rest/agents/{agentLocator}/authorizedInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizedInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizedInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthorizedInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizedInfoDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AuthorizedInfoDto</returns>
        public async System.Threading.Tasks.Task<AuthorizedInfoDto> GetAuthorizedInfoAsync (string agentLocator, string fields = null)
        {
             ApiResponse<AuthorizedInfoDto> localVarResponse = await GetAuthorizedInfoAsyncWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AuthorizedInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizedInfoDto>> GetAuthorizedInfoAsyncWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->GetAuthorizedInfo");

            var localVarPath = "/app/rest/agents/{agentLocator}/authorizedInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizedInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizedInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthorizedInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizedInfoDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        public BuildTypesDto GetCompatibleBuildTypes (string agentLocator, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = GetCompatibleBuildTypesWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        public ApiResponse< BuildTypesDto > GetCompatibleBuildTypesWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->GetCompatibleBuildTypes");

            var localVarPath = "/app/rest/agents/{agentLocator}/compatibleBuildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompatibleBuildTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        public async System.Threading.Tasks.Task<BuildTypesDto> GetCompatibleBuildTypesAsync (string agentLocator, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = await GetCompatibleBuildTypesAsyncWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> GetCompatibleBuildTypesAsyncWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->GetCompatibleBuildTypes");

            var localVarPath = "/app/rest/agents/{agentLocator}/compatibleBuildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompatibleBuildTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>EnabledInfoDto</returns>
        public EnabledInfoDto GetEnabledInfo (string agentLocator, string fields = null)
        {
             ApiResponse<EnabledInfoDto> localVarResponse = GetEnabledInfoWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of EnabledInfoDto</returns>
        public ApiResponse< EnabledInfoDto > GetEnabledInfoWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->GetEnabledInfo");

            var localVarPath = "/app/rest/agents/{agentLocator}/enabledInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnabledInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnabledInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnabledInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnabledInfoDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of EnabledInfoDto</returns>
        public async System.Threading.Tasks.Task<EnabledInfoDto> GetEnabledInfoAsync (string agentLocator, string fields = null)
        {
             ApiResponse<EnabledInfoDto> localVarResponse = await GetEnabledInfoAsyncWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (EnabledInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnabledInfoDto>> GetEnabledInfoAsyncWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->GetEnabledInfo");

            var localVarPath = "/app/rest/agents/{agentLocator}/enabledInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnabledInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnabledInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnabledInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnabledInfoDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentDto</returns>
        public AgentDto ServeAgent (string agentLocator, string fields = null)
        {
             ApiResponse<AgentDto> localVarResponse = ServeAgentWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentDto</returns>
        public ApiResponse< AgentDto > ServeAgentWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->ServeAgent");

            var localVarPath = "/app/rest/agents/{agentLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentDto</returns>
        public async System.Threading.Tasks.Task<AgentDto> ServeAgentAsync (string agentLocator, string fields = null)
        {
             ApiResponse<AgentDto> localVarResponse = await ServeAgentAsyncWithHttpInfo(agentLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentDto>> ServeAgentAsyncWithHttpInfo (string agentLocator, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->ServeAgent");

            var localVarPath = "/app/rest/agents/{agentLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        public string ServeAgentField (string agentLocator, string field)
        {
             ApiResponse<string> localVarResponse = ServeAgentFieldWithHttpInfo(agentLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServeAgentFieldWithHttpInfo (string agentLocator, string field)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->ServeAgentField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AgentApi->ServeAgentField");

            var localVarPath = "/app/rest/agents/{agentLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeAgentField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServeAgentFieldAsync (string agentLocator, string field)
        {
             ApiResponse<string> localVarResponse = await ServeAgentFieldAsyncWithHttpInfo(agentLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServeAgentFieldAsyncWithHttpInfo (string agentLocator, string field)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->ServeAgentField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AgentApi->ServeAgentField");

            var localVarPath = "/app/rest/agents/{agentLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeAgentField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentsDto</returns>
        public AgentsDto ServeAgents (string locator = null, string fields = null)
        {
             ApiResponse<AgentsDto> localVarResponse = ServeAgentsWithHttpInfo(locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentsDto</returns>
        public ApiResponse< AgentsDto > ServeAgentsWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/agents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeAgents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentsDto</returns>
        public async System.Threading.Tasks.Task<AgentsDto> ServeAgentsAsync (string locator = null, string fields = null)
        {
             ApiResponse<AgentsDto> localVarResponse = await ServeAgentsAsyncWithHttpInfo(locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentsDto>> ServeAgentsAsyncWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/agents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeAgents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SetAgentField (string agentLocator, string field, string body = null)
        {
             ApiResponse<string> localVarResponse = SetAgentFieldWithHttpInfo(agentLocator, field, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetAgentFieldWithHttpInfo (string agentLocator, string field, string body = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->SetAgentField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AgentApi->SetAgentField");

            var localVarPath = "/app/rest/agents/{agentLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAgentField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetAgentFieldAsync (string agentLocator, string field, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetAgentFieldAsyncWithHttpInfo(agentLocator, field, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetAgentFieldAsyncWithHttpInfo (string agentLocator, string field, string body = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->SetAgentField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AgentApi->SetAgentField");

            var localVarPath = "/app/rest/agents/{agentLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAgentField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentPoolDto</returns>
        public AgentPoolDto SetAgentPool (string agentLocator, AgentPoolDto body = null, string fields = null)
        {
             ApiResponse<AgentPoolDto> localVarResponse = SetAgentPoolWithHttpInfo(agentLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolDto</returns>
        public ApiResponse< AgentPoolDto > SetAgentPoolWithHttpInfo (string agentLocator, AgentPoolDto body = null, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->SetAgentPool");

            var localVarPath = "/app/rest/agents/{agentLocator}/pool";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAgentPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentPoolDto</returns>
        public async System.Threading.Tasks.Task<AgentPoolDto> SetAgentPoolAsync (string agentLocator, AgentPoolDto body = null, string fields = null)
        {
             ApiResponse<AgentPoolDto> localVarResponse = await SetAgentPoolAsyncWithHttpInfo(agentLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentPoolDto>> SetAgentPoolAsyncWithHttpInfo (string agentLocator, AgentPoolDto body = null, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->SetAgentPool");

            var localVarPath = "/app/rest/agents/{agentLocator}/pool";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAgentPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CompatibilityPolicyDto</returns>
        public CompatibilityPolicyDto SetAllowedRunConfigurations (string agentLocator, CompatibilityPolicyDto body = null, string fields = null)
        {
             ApiResponse<CompatibilityPolicyDto> localVarResponse = SetAllowedRunConfigurationsWithHttpInfo(agentLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CompatibilityPolicyDto</returns>
        public ApiResponse< CompatibilityPolicyDto > SetAllowedRunConfigurationsWithHttpInfo (string agentLocator, CompatibilityPolicyDto body = null, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->SetAllowedRunConfigurations");

            var localVarPath = "/app/rest/agents/{agentLocator}/compatibilityPolicy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAllowedRunConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompatibilityPolicyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompatibilityPolicyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompatibilityPolicyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CompatibilityPolicyDto</returns>
        public async System.Threading.Tasks.Task<CompatibilityPolicyDto> SetAllowedRunConfigurationsAsync (string agentLocator, CompatibilityPolicyDto body = null, string fields = null)
        {
             ApiResponse<CompatibilityPolicyDto> localVarResponse = await SetAllowedRunConfigurationsAsyncWithHttpInfo(agentLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CompatibilityPolicyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompatibilityPolicyDto>> SetAllowedRunConfigurationsAsyncWithHttpInfo (string agentLocator, CompatibilityPolicyDto body = null, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->SetAllowedRunConfigurations");

            var localVarPath = "/app/rest/agents/{agentLocator}/compatibilityPolicy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAllowedRunConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompatibilityPolicyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompatibilityPolicyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompatibilityPolicyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AuthorizedInfoDto</returns>
        public AuthorizedInfoDto SetAuthorizedInfo (string agentLocator, AuthorizedInfoDto body = null, string fields = null)
        {
             ApiResponse<AuthorizedInfoDto> localVarResponse = SetAuthorizedInfoWithHttpInfo(agentLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AuthorizedInfoDto</returns>
        public ApiResponse< AuthorizedInfoDto > SetAuthorizedInfoWithHttpInfo (string agentLocator, AuthorizedInfoDto body = null, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->SetAuthorizedInfo");

            var localVarPath = "/app/rest/agents/{agentLocator}/authorizedInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAuthorizedInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizedInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthorizedInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizedInfoDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AuthorizedInfoDto</returns>
        public async System.Threading.Tasks.Task<AuthorizedInfoDto> SetAuthorizedInfoAsync (string agentLocator, AuthorizedInfoDto body = null, string fields = null)
        {
             ApiResponse<AuthorizedInfoDto> localVarResponse = await SetAuthorizedInfoAsyncWithHttpInfo(agentLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AuthorizedInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizedInfoDto>> SetAuthorizedInfoAsyncWithHttpInfo (string agentLocator, AuthorizedInfoDto body = null, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->SetAuthorizedInfo");

            var localVarPath = "/app/rest/agents/{agentLocator}/authorizedInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAuthorizedInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizedInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthorizedInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizedInfoDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>EnabledInfoDto</returns>
        public EnabledInfoDto SetEnabledInfo (string agentLocator, EnabledInfoDto body = null, string fields = null)
        {
             ApiResponse<EnabledInfoDto> localVarResponse = SetEnabledInfoWithHttpInfo(agentLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of EnabledInfoDto</returns>
        public ApiResponse< EnabledInfoDto > SetEnabledInfoWithHttpInfo (string agentLocator, EnabledInfoDto body = null, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->SetEnabledInfo");

            var localVarPath = "/app/rest/agents/{agentLocator}/enabledInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetEnabledInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnabledInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnabledInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnabledInfoDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of EnabledInfoDto</returns>
        public async System.Threading.Tasks.Task<EnabledInfoDto> SetEnabledInfoAsync (string agentLocator, EnabledInfoDto body = null, string fields = null)
        {
             ApiResponse<EnabledInfoDto> localVarResponse = await SetEnabledInfoAsyncWithHttpInfo(agentLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (EnabledInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnabledInfoDto>> SetEnabledInfoAsyncWithHttpInfo (string agentLocator, EnabledInfoDto body = null, string fields = null)
        {
            // verify the required parameter 'agentLocator' is set
            if (agentLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentLocator' when calling AgentApi->SetEnabledInfo");

            var localVarPath = "/app/rest/agents/{agentLocator}/enabledInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agentLocator != null) localVarPathParams.Add("agentLocator", this.Configuration.ApiClient.ParameterToString(agentLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetEnabledInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnabledInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnabledInfoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnabledInfoDto)));
        }

    }
}
