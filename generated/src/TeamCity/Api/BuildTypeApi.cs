/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TeamCity.Client;
using TeamCity.Model;

namespace TeamCity.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildTypeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AgentRequirementDto</returns>
        AgentRequirementDto AddAgentRequirement (string btLocator, string fields = null, AgentRequirementDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AgentRequirementDto</returns>
        ApiResponse<AgentRequirementDto> AddAgentRequirementWithHttpInfo (string btLocator, string fields = null, AgentRequirementDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ArtifactDependencyDto</returns>
        ArtifactDependencyDto AddArtifactDep (string btLocator, string fields = null, ArtifactDependencyDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ArtifactDependencyDto</returns>
        ApiResponse<ArtifactDependencyDto> AddArtifactDepWithHttpInfo (string btLocator, string fields = null, ArtifactDependencyDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        BuildTypeDto AddBuildType (BuildTypeDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        ApiResponse<BuildTypeDto> AddBuildTypeWithHttpInfo (BuildTypeDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FeatureDto</returns>
        FeatureDto AddFeature (string btLocator, string fields = null, FeatureDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FeatureDto</returns>
        ApiResponse<FeatureDto> AddFeatureWithHttpInfo (string btLocator, string fields = null, FeatureDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string AddFeatureParameter (string btLocator, string featureId, string parameterName, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddFeatureParameterWithHttpInfo (string btLocator, string featureId, string parameterName, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SnapshotDependencyDto</returns>
        SnapshotDependencyDto AddSnapshotDep (string btLocator, string fields = null, SnapshotDependencyDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SnapshotDependencyDto</returns>
        ApiResponse<SnapshotDependencyDto> AddSnapshotDepWithHttpInfo (string btLocator, string fields = null, SnapshotDependencyDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>StepDto</returns>
        StepDto AddStep (string btLocator, string fields = null, StepDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of StepDto</returns>
        ApiResponse<StepDto> AddStepWithHttpInfo (string btLocator, string fields = null, StepDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string AddStepParameter (string btLocator, string stepId, string parameterName, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AddStepParameterWithHttpInfo (string btLocator, string stepId, string parameterName, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        BuildTypeDto AddTemplate (string btLocator, BuildTypeDto body = null, bool? optimizeSettings = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        ApiResponse<BuildTypeDto> AddTemplateWithHttpInfo (string btLocator, BuildTypeDto body = null, bool? optimizeSettings = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TriggerDto</returns>
        TriggerDto AddTrigger (string btLocator, string fields = null, TriggerDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TriggerDto</returns>
        ApiResponse<TriggerDto> AddTriggerWithHttpInfo (string btLocator, string fields = null, TriggerDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootEntryDto</returns>
        VcsRootEntryDto AddVcsRootEntry (string btLocator, VcsRootEntryDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootEntryDto</returns>
        ApiResponse<VcsRootEntryDto> AddVcsRootEntryWithHttpInfo (string btLocator, VcsRootEntryDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string ChangeArtifactDepSetting (string btLocator, string artifactDepLocator, string fieldName, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ChangeArtifactDepSettingWithHttpInfo (string btLocator, string artifactDepLocator, string fieldName, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string ChangeFeatureSetting (string btLocator, string featureId, string name, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ChangeFeatureSettingWithHttpInfo (string btLocator, string featureId, string name, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string ChangeRequirementSetting (string btLocator, string agentRequirementLocator, string fieldName, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ChangeRequirementSettingWithHttpInfo (string btLocator, string agentRequirementLocator, string fieldName, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string ChangeStepSetting (string btLocator, string stepId, string fieldName, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ChangeStepSettingWithHttpInfo (string btLocator, string stepId, string fieldName, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string ChangeTriggerSetting (string btLocator, string triggerLocator, string fieldName, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ChangeTriggerSettingWithHttpInfo (string btLocator, string triggerLocator, string fieldName, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <returns></returns>
        void DeleteAgentRequirement (string btLocator, string agentRequirementLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAgentRequirementWithHttpInfo (string btLocator, string agentRequirementLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns></returns>
        void DeleteAllParameters (string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllParametersWithHttpInfo (string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <returns></returns>
        void DeleteArtifactDep (string btLocator, string artifactDepLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteArtifactDepWithHttpInfo (string btLocator, string artifactDepLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns></returns>
        void DeleteBuildType (string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBuildTypeWithHttpInfo (string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <returns></returns>
        void DeleteFeature (string btLocator, string featureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFeatureWithHttpInfo (string btLocator, string featureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns></returns>
        void DeleteParameter (string name, string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteParameterWithHttpInfo (string name, string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <returns></returns>
        void DeleteSnapshotDep (string btLocator, string snapshotDepLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSnapshotDepWithHttpInfo (string btLocator, string snapshotDepLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <returns></returns>
        void DeleteStep (string btLocator, string stepId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStepWithHttpInfo (string btLocator, string stepId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <returns></returns>
        void DeleteTrigger (string btLocator, string triggerLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTriggerWithHttpInfo (string btLocator, string triggerLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns></returns>
        void DeleteVcsRootEntry (string btLocator, string vcsRootLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVcsRootEntryWithHttpInfo (string btLocator, string vcsRootLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentRequirementDto</returns>
        AgentRequirementDto GetAgentRequirement (string btLocator, string agentRequirementLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentRequirementDto</returns>
        ApiResponse<AgentRequirementDto> GetAgentRequirementWithHttpInfo (string btLocator, string agentRequirementLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentRequirementsDto</returns>
        AgentRequirementsDto GetAgentRequirements (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentRequirementsDto</returns>
        ApiResponse<AgentRequirementsDto> GetAgentRequirementsWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>ItemsDto</returns>
        ItemsDto GetAliases (string btLocator, string field = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of ItemsDto</returns>
        ApiResponse<ItemsDto> GetAliasesWithHttpInfo (string btLocator, string field = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ArtifactDependencyDto</returns>
        ArtifactDependencyDto GetArtifactDep (string btLocator, string artifactDepLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ArtifactDependencyDto</returns>
        ApiResponse<ArtifactDependencyDto> GetArtifactDepWithHttpInfo (string btLocator, string artifactDepLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>string</returns>
        string GetArtifactDepSetting (string btLocator, string artifactDepLocator, string fieldName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetArtifactDepSettingWithHttpInfo (string btLocator, string artifactDepLocator, string fieldName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ArtifactDependenciesDto</returns>
        ArtifactDependenciesDto GetArtifactDeps (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ArtifactDependenciesDto</returns>
        ApiResponse<ArtifactDependenciesDto> GetArtifactDepsWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        BuildTypesDto GetBuildTypes (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        ApiResponse<BuildTypesDto> GetBuildTypesWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>FilesDto</returns>
        FilesDto GetChildren2 (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        ApiResponse<FilesDto> GetChildren2WithHttpInfo (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>FilesDto</returns>
        FilesDto GetChildrenAlias2 (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        ApiResponse<FilesDto> GetChildrenAlias2WithHttpInfo (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns></returns>
        void GetContent2 (string path, string btLocator, string responseBuilder = null, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetContent2WithHttpInfo (string path, string btLocator, string responseBuilder = null, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns></returns>
        void GetContentAlias2 (string path, string btLocator, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetContentAlias2WithHttpInfo (string path, string btLocator, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootInstancesDto</returns>
        VcsRootInstancesDto GetCurrentVcsInstances (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootInstancesDto</returns>
        ApiResponse<VcsRootInstancesDto> GetCurrentVcsInstancesWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootInstancesDto</returns>
        VcsRootInstancesDto GetCurrentVcsInstancesObsolete (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootInstancesDto</returns>
        ApiResponse<VcsRootInstancesDto> GetCurrentVcsInstancesObsoleteWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>FeatureDto</returns>
        FeatureDto GetFeature (string btLocator, string featureId, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of FeatureDto</returns>
        ApiResponse<FeatureDto> GetFeatureWithHttpInfo (string btLocator, string featureId, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <returns>string</returns>
        string GetFeatureParameter (string btLocator, string featureId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetFeatureParameterWithHttpInfo (string btLocator, string featureId, string parameterName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        PropertiesDto GetFeatureParameters (string btLocator, string featureId, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        ApiResponse<PropertiesDto> GetFeatureParametersWithHttpInfo (string btLocator, string featureId, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <returns>string</returns>
        string GetFeatureSetting (string btLocator, string featureId, string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetFeatureSettingWithHttpInfo (string btLocator, string featureId, string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>FeaturesDto</returns>
        FeaturesDto GetFeatures (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of FeaturesDto</returns>
        ApiResponse<FeaturesDto> GetFeaturesWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>InvestigationsDto</returns>
        InvestigationsDto GetInvestigations (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of InvestigationsDto</returns>
        ApiResponse<InvestigationsDto> GetInvestigationsWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>FileDto</returns>
        FileDto GetMetadata2 (string path, string btLocator, string fields = null, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of FileDto</returns>
        ApiResponse<FileDto> GetMetadata2WithHttpInfo (string path, string btLocator, string fields = null, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertyDto</returns>
        PropertyDto GetParameter1 (string name, string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertyDto</returns>
        ApiResponse<PropertyDto> GetParameter1WithHttpInfo (string name, string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>TypeDto</returns>
        TypeDto GetParameterType (string name, string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of TypeDto</returns>
        ApiResponse<TypeDto> GetParameterTypeWithHttpInfo (string name, string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>string</returns>
        string GetParameterTypeRawValue (string name, string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetParameterTypeRawValueWithHttpInfo (string name, string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>string</returns>
        string GetParameterValueLong (string name, string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetParameterValueLongWithHttpInfo (string name, string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        PropertiesDto GetParameters (string btLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        ApiResponse<PropertiesDto> GetParametersWithHttpInfo (string btLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>string</returns>
        string GetRequirementSetting (string btLocator, string agentRequirementLocator, string fieldName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetRequirementSettingWithHttpInfo (string btLocator, string agentRequirementLocator, string fieldName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>FilesDto</returns>
        FilesDto GetRoot2 (string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        ApiResponse<FilesDto> GetRoot2WithHttpInfo (string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>string</returns>
        string GetSettingsFile (string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetSettingsFileWithHttpInfo (string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>SnapshotDependencyDto</returns>
        SnapshotDependencyDto GetSnapshotDep (string btLocator, string snapshotDepLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of SnapshotDependencyDto</returns>
        ApiResponse<SnapshotDependencyDto> GetSnapshotDepWithHttpInfo (string btLocator, string snapshotDepLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>SnapshotDependenciesDto</returns>
        SnapshotDependenciesDto GetSnapshotDeps (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of SnapshotDependenciesDto</returns>
        ApiResponse<SnapshotDependenciesDto> GetSnapshotDepsWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>StepDto</returns>
        StepDto GetStep (string btLocator, string stepId, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of StepDto</returns>
        ApiResponse<StepDto> GetStepWithHttpInfo (string btLocator, string stepId, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <returns>string</returns>
        string GetStepParameter (string btLocator, string stepId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetStepParameterWithHttpInfo (string btLocator, string stepId, string parameterName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        PropertiesDto GetStepParameters (string btLocator, string stepId, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        ApiResponse<PropertiesDto> GetStepParametersWithHttpInfo (string btLocator, string stepId, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <returns>string</returns>
        string GetStepSetting (string btLocator, string stepId, string fieldName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetStepSettingWithHttpInfo (string btLocator, string stepId, string fieldName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>StepsDto</returns>
        StepsDto GetSteps (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of StepsDto</returns>
        ApiResponse<StepsDto> GetStepsWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        BuildTypeDto GetTemplate (string btLocator, string templateLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        ApiResponse<BuildTypeDto> GetTemplateWithHttpInfo (string btLocator, string templateLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        BuildTypesDto GetTemplates (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        ApiResponse<BuildTypesDto> GetTemplatesWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>TriggerDto</returns>
        TriggerDto GetTrigger (string btLocator, string triggerLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of TriggerDto</returns>
        ApiResponse<TriggerDto> GetTriggerWithHttpInfo (string btLocator, string triggerLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>string</returns>
        string GetTriggerSetting (string btLocator, string triggerLocator, string fieldName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetTriggerSettingWithHttpInfo (string btLocator, string triggerLocator, string fieldName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>TriggersDto</returns>
        TriggersDto GetTriggers (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of TriggersDto</returns>
        ApiResponse<TriggersDto> GetTriggersWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootEntriesDto</returns>
        VcsRootEntriesDto GetVcsRootEntries (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootEntriesDto</returns>
        ApiResponse<VcsRootEntriesDto> GetVcsRootEntriesWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootEntryDto</returns>
        VcsRootEntryDto GetVcsRootEntry (string btLocator, string vcsRootLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootEntryDto</returns>
        ApiResponse<VcsRootEntryDto> GetVcsRootEntryWithHttpInfo (string btLocator, string vcsRootLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>string</returns>
        string GetVcsRootEntryCheckoutRules (string btLocator, string vcsRootLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetVcsRootEntryCheckoutRulesWithHttpInfo (string btLocator, string vcsRootLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns></returns>
        void GetZipped2 (string path, string btLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetZipped2WithHttpInfo (string path, string btLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns></returns>
        void RemoveAllTemplates (string btLocator, bool? inlineSettings = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAllTemplatesWithHttpInfo (string btLocator, bool? inlineSettings = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns></returns>
        void RemoveTemplate (string btLocator, string templateLocator, bool? inlineSettings = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveTemplateWithHttpInfo (string btLocator, string templateLocator, bool? inlineSettings = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AgentRequirementDto</returns>
        AgentRequirementDto ReplaceAgentRequirement (string btLocator, string agentRequirementLocator, string fields = null, AgentRequirementDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AgentRequirementDto</returns>
        ApiResponse<AgentRequirementDto> ReplaceAgentRequirementWithHttpInfo (string btLocator, string agentRequirementLocator, string fields = null, AgentRequirementDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AgentRequirementsDto</returns>
        AgentRequirementsDto ReplaceAgentRequirements (string btLocator, string fields = null, AgentRequirementsDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AgentRequirementsDto</returns>
        ApiResponse<AgentRequirementsDto> ReplaceAgentRequirementsWithHttpInfo (string btLocator, string fields = null, AgentRequirementsDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ArtifactDependencyDto</returns>
        ArtifactDependencyDto ReplaceArtifactDep (string btLocator, string artifactDepLocator, string fields = null, ArtifactDependencyDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ArtifactDependencyDto</returns>
        ApiResponse<ArtifactDependencyDto> ReplaceArtifactDepWithHttpInfo (string btLocator, string artifactDepLocator, string fields = null, ArtifactDependencyDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ArtifactDependenciesDto</returns>
        ArtifactDependenciesDto ReplaceArtifactDeps (string btLocator, string fields = null, ArtifactDependenciesDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ArtifactDependenciesDto</returns>
        ApiResponse<ArtifactDependenciesDto> ReplaceArtifactDepsWithHttpInfo (string btLocator, string fields = null, ArtifactDependenciesDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FeatureDto</returns>
        FeatureDto ReplaceFeature (string btLocator, string featureId, string fields = null, FeatureDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FeatureDto</returns>
        ApiResponse<FeatureDto> ReplaceFeatureWithHttpInfo (string btLocator, string featureId, string fields = null, FeatureDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        PropertiesDto ReplaceFeatureParameters (string btLocator, string featureId, PropertiesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        ApiResponse<PropertiesDto> ReplaceFeatureParametersWithHttpInfo (string btLocator, string featureId, PropertiesDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FeaturesDto</returns>
        FeaturesDto ReplaceFeatures (string btLocator, string fields = null, FeaturesDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FeaturesDto</returns>
        ApiResponse<FeaturesDto> ReplaceFeaturesWithHttpInfo (string btLocator, string fields = null, FeaturesDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SnapshotDependencyDto</returns>
        SnapshotDependencyDto ReplaceSnapshotDep (string btLocator, string snapshotDepLocator, string fields = null, SnapshotDependencyDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SnapshotDependencyDto</returns>
        ApiResponse<SnapshotDependencyDto> ReplaceSnapshotDepWithHttpInfo (string btLocator, string snapshotDepLocator, string fields = null, SnapshotDependencyDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SnapshotDependenciesDto</returns>
        SnapshotDependenciesDto ReplaceSnapshotDeps (string btLocator, string fields = null, SnapshotDependenciesDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SnapshotDependenciesDto</returns>
        ApiResponse<SnapshotDependenciesDto> ReplaceSnapshotDepsWithHttpInfo (string btLocator, string fields = null, SnapshotDependenciesDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>StepDto</returns>
        StepDto ReplaceStep (string btLocator, string stepId, string fields = null, StepDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of StepDto</returns>
        ApiResponse<StepDto> ReplaceStepWithHttpInfo (string btLocator, string stepId, string fields = null, StepDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        PropertiesDto ReplaceStepParameters (string btLocator, string stepId, PropertiesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        ApiResponse<PropertiesDto> ReplaceStepParametersWithHttpInfo (string btLocator, string stepId, PropertiesDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>StepsDto</returns>
        StepsDto ReplaceSteps (string btLocator, string fields = null, StepsDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of StepsDto</returns>
        ApiResponse<StepsDto> ReplaceStepsWithHttpInfo (string btLocator, string fields = null, StepsDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TriggerDto</returns>
        TriggerDto ReplaceTrigger (string btLocator, string triggerLocator, string fields = null, TriggerDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TriggerDto</returns>
        ApiResponse<TriggerDto> ReplaceTriggerWithHttpInfo (string btLocator, string triggerLocator, string fields = null, TriggerDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TriggersDto</returns>
        TriggersDto ReplaceTriggers (string btLocator, string fields = null, TriggersDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TriggersDto</returns>
        ApiResponse<TriggersDto> ReplaceTriggersWithHttpInfo (string btLocator, string fields = null, TriggersDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootEntriesDto</returns>
        VcsRootEntriesDto ReplaceVcsRootEntries (string btLocator, VcsRootEntriesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootEntriesDto</returns>
        ApiResponse<VcsRootEntriesDto> ReplaceVcsRootEntriesWithHttpInfo (string btLocator, VcsRootEntriesDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BranchesDto</returns>
        BranchesDto ServeBranches (string btLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BranchesDto</returns>
        ApiResponse<BranchesDto> ServeBranchesWithHttpInfo (string btLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        string ServeBuildField (string btLocator, string buildLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServeBuildFieldWithHttpInfo (string btLocator, string buildLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>TagsDto</returns>
        TagsDto ServeBuildTypeBuildsTags (string btLocator, string field = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of TagsDto</returns>
        ApiResponse<TagsDto> ServeBuildTypeBuildsTagsWithHttpInfo (string btLocator, string field = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        string ServeBuildTypeField (string btLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServeBuildTypeFieldWithHttpInfo (string btLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        BuildTypeDto ServeBuildTypeXML (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        ApiResponse<BuildTypeDto> ServeBuildTypeXMLWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildDto</returns>
        BuildDto ServeBuildWithProject (string btLocator, string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildDto</returns>
        ApiResponse<BuildDto> ServeBuildWithProjectWithHttpInfo (string btLocator, string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildsDto</returns>
        BuildsDto ServeBuilds (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildsDto</returns>
        ApiResponse<BuildsDto> ServeBuildsWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SetBuildTypeField (string btLocator, string field, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetBuildTypeFieldWithHttpInfo (string btLocator, string field, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertyDto</returns>
        PropertyDto SetParameter (string name, string btLocator, PropertyDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertyDto</returns>
        ApiResponse<PropertyDto> SetParameterWithHttpInfo (string name, string btLocator, PropertyDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertyDto</returns>
        PropertyDto SetParameter1 (string btLocator, PropertyDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertyDto</returns>
        ApiResponse<PropertyDto> SetParameter1WithHttpInfo (string btLocator, PropertyDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>TypeDto</returns>
        TypeDto SetParameterType (string name, string btLocator, TypeDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TypeDto</returns>
        ApiResponse<TypeDto> SetParameterTypeWithHttpInfo (string name, string btLocator, TypeDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SetParameterTypeRawValue (string name, string btLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetParameterTypeRawValueWithHttpInfo (string name, string btLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SetParameterValueLong (string name, string btLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetParameterValueLongWithHttpInfo (string name, string btLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        PropertiesDto SetParameters (string btLocator, PropertiesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        ApiResponse<PropertiesDto> SetParametersWithHttpInfo (string btLocator, PropertiesDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        BuildTypesDto SetTemplates (string btLocator, BuildTypesDto body = null, bool? optimizeSettings = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        ApiResponse<BuildTypesDto> SetTemplatesWithHttpInfo (string btLocator, BuildTypesDto body = null, bool? optimizeSettings = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootEntryDto</returns>
        VcsRootEntryDto UpdateVcsRootEntry (string btLocator, string vcsRootLocator, VcsRootEntryDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootEntryDto</returns>
        ApiResponse<VcsRootEntryDto> UpdateVcsRootEntryWithHttpInfo (string btLocator, string vcsRootLocator, VcsRootEntryDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string UpdateVcsRootEntryCheckoutRules (string btLocator, string vcsRootLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UpdateVcsRootEntryCheckoutRulesWithHttpInfo (string btLocator, string vcsRootLocator, string body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AgentRequirementDto</returns>
        System.Threading.Tasks.Task<AgentRequirementDto> AddAgentRequirementAsync (string btLocator, string fields = null, AgentRequirementDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentRequirementDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentRequirementDto>> AddAgentRequirementAsyncWithHttpInfo (string btLocator, string fields = null, AgentRequirementDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ArtifactDependencyDto</returns>
        System.Threading.Tasks.Task<ArtifactDependencyDto> AddArtifactDepAsync (string btLocator, string fields = null, ArtifactDependencyDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ArtifactDependencyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArtifactDependencyDto>> AddArtifactDepAsyncWithHttpInfo (string btLocator, string fields = null, ArtifactDependencyDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        System.Threading.Tasks.Task<BuildTypeDto> AddBuildTypeAsync (BuildTypeDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> AddBuildTypeAsyncWithHttpInfo (BuildTypeDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FeatureDto</returns>
        System.Threading.Tasks.Task<FeatureDto> AddFeatureAsync (string btLocator, string fields = null, FeatureDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FeatureDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureDto>> AddFeatureAsyncWithHttpInfo (string btLocator, string fields = null, FeatureDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddFeatureParameterAsync (string btLocator, string featureId, string parameterName, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddFeatureParameterAsyncWithHttpInfo (string btLocator, string featureId, string parameterName, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SnapshotDependencyDto</returns>
        System.Threading.Tasks.Task<SnapshotDependencyDto> AddSnapshotDepAsync (string btLocator, string fields = null, SnapshotDependencyDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SnapshotDependencyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SnapshotDependencyDto>> AddSnapshotDepAsyncWithHttpInfo (string btLocator, string fields = null, SnapshotDependencyDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of StepDto</returns>
        System.Threading.Tasks.Task<StepDto> AddStepAsync (string btLocator, string fields = null, StepDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (StepDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<StepDto>> AddStepAsyncWithHttpInfo (string btLocator, string fields = null, StepDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AddStepParameterAsync (string btLocator, string stepId, string parameterName, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AddStepParameterAsyncWithHttpInfo (string btLocator, string stepId, string parameterName, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        System.Threading.Tasks.Task<BuildTypeDto> AddTemplateAsync (string btLocator, BuildTypeDto body = null, bool? optimizeSettings = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> AddTemplateAsyncWithHttpInfo (string btLocator, BuildTypeDto body = null, bool? optimizeSettings = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TriggerDto</returns>
        System.Threading.Tasks.Task<TriggerDto> AddTriggerAsync (string btLocator, string fields = null, TriggerDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TriggerDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TriggerDto>> AddTriggerAsyncWithHttpInfo (string btLocator, string fields = null, TriggerDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootEntryDto</returns>
        System.Threading.Tasks.Task<VcsRootEntryDto> AddVcsRootEntryAsync (string btLocator, VcsRootEntryDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootEntryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsRootEntryDto>> AddVcsRootEntryAsyncWithHttpInfo (string btLocator, VcsRootEntryDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ChangeArtifactDepSettingAsync (string btLocator, string artifactDepLocator, string fieldName, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ChangeArtifactDepSettingAsyncWithHttpInfo (string btLocator, string artifactDepLocator, string fieldName, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ChangeFeatureSettingAsync (string btLocator, string featureId, string name, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ChangeFeatureSettingAsyncWithHttpInfo (string btLocator, string featureId, string name, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ChangeRequirementSettingAsync (string btLocator, string agentRequirementLocator, string fieldName, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ChangeRequirementSettingAsyncWithHttpInfo (string btLocator, string agentRequirementLocator, string fieldName, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ChangeStepSettingAsync (string btLocator, string stepId, string fieldName, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ChangeStepSettingAsyncWithHttpInfo (string btLocator, string stepId, string fieldName, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ChangeTriggerSettingAsync (string btLocator, string triggerLocator, string fieldName, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ChangeTriggerSettingAsyncWithHttpInfo (string btLocator, string triggerLocator, string fieldName, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAgentRequirementAsync (string btLocator, string agentRequirementLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAgentRequirementAsyncWithHttpInfo (string btLocator, string agentRequirementLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllParametersAsync (string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllParametersAsyncWithHttpInfo (string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteArtifactDepAsync (string btLocator, string artifactDepLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteArtifactDepAsyncWithHttpInfo (string btLocator, string artifactDepLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBuildTypeAsync (string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBuildTypeAsyncWithHttpInfo (string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFeatureAsync (string btLocator, string featureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFeatureAsyncWithHttpInfo (string btLocator, string featureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteParameterAsync (string name, string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteParameterAsyncWithHttpInfo (string name, string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSnapshotDepAsync (string btLocator, string snapshotDepLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSnapshotDepAsyncWithHttpInfo (string btLocator, string snapshotDepLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStepAsync (string btLocator, string stepId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStepAsyncWithHttpInfo (string btLocator, string stepId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTriggerAsync (string btLocator, string triggerLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTriggerAsyncWithHttpInfo (string btLocator, string triggerLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVcsRootEntryAsync (string btLocator, string vcsRootLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVcsRootEntryAsyncWithHttpInfo (string btLocator, string vcsRootLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentRequirementDto</returns>
        System.Threading.Tasks.Task<AgentRequirementDto> GetAgentRequirementAsync (string btLocator, string agentRequirementLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentRequirementDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentRequirementDto>> GetAgentRequirementAsyncWithHttpInfo (string btLocator, string agentRequirementLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentRequirementsDto</returns>
        System.Threading.Tasks.Task<AgentRequirementsDto> GetAgentRequirementsAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentRequirementsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentRequirementsDto>> GetAgentRequirementsAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ItemsDto</returns>
        System.Threading.Tasks.Task<ItemsDto> GetAliasesAsync (string btLocator, string field = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (ItemsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemsDto>> GetAliasesAsyncWithHttpInfo (string btLocator, string field = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ArtifactDependencyDto</returns>
        System.Threading.Tasks.Task<ArtifactDependencyDto> GetArtifactDepAsync (string btLocator, string artifactDepLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ArtifactDependencyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArtifactDependencyDto>> GetArtifactDepAsyncWithHttpInfo (string btLocator, string artifactDepLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetArtifactDepSettingAsync (string btLocator, string artifactDepLocator, string fieldName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetArtifactDepSettingAsyncWithHttpInfo (string btLocator, string artifactDepLocator, string fieldName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ArtifactDependenciesDto</returns>
        System.Threading.Tasks.Task<ArtifactDependenciesDto> GetArtifactDepsAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ArtifactDependenciesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArtifactDependenciesDto>> GetArtifactDepsAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        System.Threading.Tasks.Task<BuildTypesDto> GetBuildTypesAsync (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> GetBuildTypesAsyncWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        System.Threading.Tasks.Task<FilesDto> GetChildren2Async (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildren2AsyncWithHttpInfo (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        System.Threading.Tasks.Task<FilesDto> GetChildrenAlias2Async (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildrenAlias2AsyncWithHttpInfo (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetContent2Async (string path, string btLocator, string responseBuilder = null, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContent2AsyncWithHttpInfo (string path, string btLocator, string responseBuilder = null, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetContentAlias2Async (string path, string btLocator, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContentAlias2AsyncWithHttpInfo (string path, string btLocator, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootInstancesDto</returns>
        System.Threading.Tasks.Task<VcsRootInstancesDto> GetCurrentVcsInstancesAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootInstancesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsRootInstancesDto>> GetCurrentVcsInstancesAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootInstancesDto</returns>
        System.Threading.Tasks.Task<VcsRootInstancesDto> GetCurrentVcsInstancesObsoleteAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootInstancesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsRootInstancesDto>> GetCurrentVcsInstancesObsoleteAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of FeatureDto</returns>
        System.Threading.Tasks.Task<FeatureDto> GetFeatureAsync (string btLocator, string featureId, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (FeatureDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureDto>> GetFeatureAsyncWithHttpInfo (string btLocator, string featureId, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetFeatureParameterAsync (string btLocator, string featureId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetFeatureParameterAsyncWithHttpInfo (string btLocator, string featureId, string parameterName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        System.Threading.Tasks.Task<PropertiesDto> GetFeatureParametersAsync (string btLocator, string featureId, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> GetFeatureParametersAsyncWithHttpInfo (string btLocator, string featureId, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetFeatureSettingAsync (string btLocator, string featureId, string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetFeatureSettingAsyncWithHttpInfo (string btLocator, string featureId, string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of FeaturesDto</returns>
        System.Threading.Tasks.Task<FeaturesDto> GetFeaturesAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (FeaturesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeaturesDto>> GetFeaturesAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of InvestigationsDto</returns>
        System.Threading.Tasks.Task<InvestigationsDto> GetInvestigationsAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (InvestigationsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvestigationsDto>> GetInvestigationsAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of FileDto</returns>
        System.Threading.Tasks.Task<FileDto> GetMetadata2Async (string path, string btLocator, string fields = null, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (FileDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDto>> GetMetadata2AsyncWithHttpInfo (string path, string btLocator, string fields = null, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertyDto</returns>
        System.Threading.Tasks.Task<PropertyDto> GetParameter1Async (string name, string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyDto>> GetParameter1AsyncWithHttpInfo (string name, string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of TypeDto</returns>
        System.Threading.Tasks.Task<TypeDto> GetParameterTypeAsync (string name, string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse (TypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TypeDto>> GetParameterTypeAsyncWithHttpInfo (string name, string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetParameterTypeRawValueAsync (string name, string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetParameterTypeRawValueAsyncWithHttpInfo (string name, string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetParameterValueLongAsync (string name, string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetParameterValueLongAsyncWithHttpInfo (string name, string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        System.Threading.Tasks.Task<PropertiesDto> GetParametersAsync (string btLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> GetParametersAsyncWithHttpInfo (string btLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetRequirementSettingAsync (string btLocator, string agentRequirementLocator, string fieldName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetRequirementSettingAsyncWithHttpInfo (string btLocator, string agentRequirementLocator, string fieldName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        System.Threading.Tasks.Task<FilesDto> GetRoot2Async (string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetRoot2AsyncWithHttpInfo (string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetSettingsFileAsync (string btLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetSettingsFileAsyncWithHttpInfo (string btLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of SnapshotDependencyDto</returns>
        System.Threading.Tasks.Task<SnapshotDependencyDto> GetSnapshotDepAsync (string btLocator, string snapshotDepLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (SnapshotDependencyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SnapshotDependencyDto>> GetSnapshotDepAsyncWithHttpInfo (string btLocator, string snapshotDepLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of SnapshotDependenciesDto</returns>
        System.Threading.Tasks.Task<SnapshotDependenciesDto> GetSnapshotDepsAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (SnapshotDependenciesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SnapshotDependenciesDto>> GetSnapshotDepsAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of StepDto</returns>
        System.Threading.Tasks.Task<StepDto> GetStepAsync (string btLocator, string stepId, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (StepDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<StepDto>> GetStepAsyncWithHttpInfo (string btLocator, string stepId, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetStepParameterAsync (string btLocator, string stepId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetStepParameterAsyncWithHttpInfo (string btLocator, string stepId, string parameterName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        System.Threading.Tasks.Task<PropertiesDto> GetStepParametersAsync (string btLocator, string stepId, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> GetStepParametersAsyncWithHttpInfo (string btLocator, string stepId, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetStepSettingAsync (string btLocator, string stepId, string fieldName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetStepSettingAsyncWithHttpInfo (string btLocator, string stepId, string fieldName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of StepsDto</returns>
        System.Threading.Tasks.Task<StepsDto> GetStepsAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (StepsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<StepsDto>> GetStepsAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        System.Threading.Tasks.Task<BuildTypeDto> GetTemplateAsync (string btLocator, string templateLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> GetTemplateAsyncWithHttpInfo (string btLocator, string templateLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        System.Threading.Tasks.Task<BuildTypesDto> GetTemplatesAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> GetTemplatesAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of TriggerDto</returns>
        System.Threading.Tasks.Task<TriggerDto> GetTriggerAsync (string btLocator, string triggerLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (TriggerDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TriggerDto>> GetTriggerAsyncWithHttpInfo (string btLocator, string triggerLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetTriggerSettingAsync (string btLocator, string triggerLocator, string fieldName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetTriggerSettingAsyncWithHttpInfo (string btLocator, string triggerLocator, string fieldName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of TriggersDto</returns>
        System.Threading.Tasks.Task<TriggersDto> GetTriggersAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (TriggersDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TriggersDto>> GetTriggersAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootEntriesDto</returns>
        System.Threading.Tasks.Task<VcsRootEntriesDto> GetVcsRootEntriesAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootEntriesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsRootEntriesDto>> GetVcsRootEntriesAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootEntryDto</returns>
        System.Threading.Tasks.Task<VcsRootEntryDto> GetVcsRootEntryAsync (string btLocator, string vcsRootLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootEntryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsRootEntryDto>> GetVcsRootEntryAsyncWithHttpInfo (string btLocator, string vcsRootLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetVcsRootEntryCheckoutRulesAsync (string btLocator, string vcsRootLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetVcsRootEntryCheckoutRulesAsyncWithHttpInfo (string btLocator, string vcsRootLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetZipped2Async (string path, string btLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetZipped2AsyncWithHttpInfo (string path, string btLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAllTemplatesAsync (string btLocator, bool? inlineSettings = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAllTemplatesAsyncWithHttpInfo (string btLocator, bool? inlineSettings = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveTemplateAsync (string btLocator, string templateLocator, bool? inlineSettings = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveTemplateAsyncWithHttpInfo (string btLocator, string templateLocator, bool? inlineSettings = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AgentRequirementDto</returns>
        System.Threading.Tasks.Task<AgentRequirementDto> ReplaceAgentRequirementAsync (string btLocator, string agentRequirementLocator, string fields = null, AgentRequirementDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentRequirementDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentRequirementDto>> ReplaceAgentRequirementAsyncWithHttpInfo (string btLocator, string agentRequirementLocator, string fields = null, AgentRequirementDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AgentRequirementsDto</returns>
        System.Threading.Tasks.Task<AgentRequirementsDto> ReplaceAgentRequirementsAsync (string btLocator, string fields = null, AgentRequirementsDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentRequirementsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentRequirementsDto>> ReplaceAgentRequirementsAsyncWithHttpInfo (string btLocator, string fields = null, AgentRequirementsDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ArtifactDependencyDto</returns>
        System.Threading.Tasks.Task<ArtifactDependencyDto> ReplaceArtifactDepAsync (string btLocator, string artifactDepLocator, string fields = null, ArtifactDependencyDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ArtifactDependencyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArtifactDependencyDto>> ReplaceArtifactDepAsyncWithHttpInfo (string btLocator, string artifactDepLocator, string fields = null, ArtifactDependencyDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ArtifactDependenciesDto</returns>
        System.Threading.Tasks.Task<ArtifactDependenciesDto> ReplaceArtifactDepsAsync (string btLocator, string fields = null, ArtifactDependenciesDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ArtifactDependenciesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArtifactDependenciesDto>> ReplaceArtifactDepsAsyncWithHttpInfo (string btLocator, string fields = null, ArtifactDependenciesDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FeatureDto</returns>
        System.Threading.Tasks.Task<FeatureDto> ReplaceFeatureAsync (string btLocator, string featureId, string fields = null, FeatureDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FeatureDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureDto>> ReplaceFeatureAsyncWithHttpInfo (string btLocator, string featureId, string fields = null, FeatureDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        System.Threading.Tasks.Task<PropertiesDto> ReplaceFeatureParametersAsync (string btLocator, string featureId, PropertiesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> ReplaceFeatureParametersAsyncWithHttpInfo (string btLocator, string featureId, PropertiesDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FeaturesDto</returns>
        System.Threading.Tasks.Task<FeaturesDto> ReplaceFeaturesAsync (string btLocator, string fields = null, FeaturesDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FeaturesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeaturesDto>> ReplaceFeaturesAsyncWithHttpInfo (string btLocator, string fields = null, FeaturesDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SnapshotDependencyDto</returns>
        System.Threading.Tasks.Task<SnapshotDependencyDto> ReplaceSnapshotDepAsync (string btLocator, string snapshotDepLocator, string fields = null, SnapshotDependencyDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SnapshotDependencyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SnapshotDependencyDto>> ReplaceSnapshotDepAsyncWithHttpInfo (string btLocator, string snapshotDepLocator, string fields = null, SnapshotDependencyDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SnapshotDependenciesDto</returns>
        System.Threading.Tasks.Task<SnapshotDependenciesDto> ReplaceSnapshotDepsAsync (string btLocator, string fields = null, SnapshotDependenciesDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SnapshotDependenciesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SnapshotDependenciesDto>> ReplaceSnapshotDepsAsyncWithHttpInfo (string btLocator, string fields = null, SnapshotDependenciesDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of StepDto</returns>
        System.Threading.Tasks.Task<StepDto> ReplaceStepAsync (string btLocator, string stepId, string fields = null, StepDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (StepDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<StepDto>> ReplaceStepAsyncWithHttpInfo (string btLocator, string stepId, string fields = null, StepDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        System.Threading.Tasks.Task<PropertiesDto> ReplaceStepParametersAsync (string btLocator, string stepId, PropertiesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> ReplaceStepParametersAsyncWithHttpInfo (string btLocator, string stepId, PropertiesDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of StepsDto</returns>
        System.Threading.Tasks.Task<StepsDto> ReplaceStepsAsync (string btLocator, string fields = null, StepsDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (StepsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<StepsDto>> ReplaceStepsAsyncWithHttpInfo (string btLocator, string fields = null, StepsDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TriggerDto</returns>
        System.Threading.Tasks.Task<TriggerDto> ReplaceTriggerAsync (string btLocator, string triggerLocator, string fields = null, TriggerDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TriggerDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TriggerDto>> ReplaceTriggerAsyncWithHttpInfo (string btLocator, string triggerLocator, string fields = null, TriggerDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TriggersDto</returns>
        System.Threading.Tasks.Task<TriggersDto> ReplaceTriggersAsync (string btLocator, string fields = null, TriggersDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TriggersDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TriggersDto>> ReplaceTriggersAsyncWithHttpInfo (string btLocator, string fields = null, TriggersDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootEntriesDto</returns>
        System.Threading.Tasks.Task<VcsRootEntriesDto> ReplaceVcsRootEntriesAsync (string btLocator, VcsRootEntriesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootEntriesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsRootEntriesDto>> ReplaceVcsRootEntriesAsyncWithHttpInfo (string btLocator, VcsRootEntriesDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BranchesDto</returns>
        System.Threading.Tasks.Task<BranchesDto> ServeBranchesAsync (string btLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BranchesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BranchesDto>> ServeBranchesAsyncWithHttpInfo (string btLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServeBuildFieldAsync (string btLocator, string buildLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServeBuildFieldAsyncWithHttpInfo (string btLocator, string buildLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of TagsDto</returns>
        System.Threading.Tasks.Task<TagsDto> ServeBuildTypeBuildsTagsAsync (string btLocator, string field = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (TagsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagsDto>> ServeBuildTypeBuildsTagsAsyncWithHttpInfo (string btLocator, string field = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServeBuildTypeFieldAsync (string btLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServeBuildTypeFieldAsyncWithHttpInfo (string btLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        System.Threading.Tasks.Task<BuildTypeDto> ServeBuildTypeXMLAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> ServeBuildTypeXMLAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildDto</returns>
        System.Threading.Tasks.Task<BuildDto> ServeBuildWithProjectAsync (string btLocator, string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildDto>> ServeBuildWithProjectAsyncWithHttpInfo (string btLocator, string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildsDto</returns>
        System.Threading.Tasks.Task<BuildsDto> ServeBuildsAsync (string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildsDto>> ServeBuildsAsyncWithHttpInfo (string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetBuildTypeFieldAsync (string btLocator, string field, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetBuildTypeFieldAsyncWithHttpInfo (string btLocator, string field, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertyDto</returns>
        System.Threading.Tasks.Task<PropertyDto> SetParameterAsync (string name, string btLocator, PropertyDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyDto>> SetParameterAsyncWithHttpInfo (string name, string btLocator, PropertyDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertyDto</returns>
        System.Threading.Tasks.Task<PropertyDto> SetParameter1Async (string btLocator, PropertyDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyDto>> SetParameter1AsyncWithHttpInfo (string btLocator, PropertyDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TypeDto</returns>
        System.Threading.Tasks.Task<TypeDto> SetParameterTypeAsync (string name, string btLocator, TypeDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TypeDto>> SetParameterTypeAsyncWithHttpInfo (string name, string btLocator, TypeDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetParameterTypeRawValueAsync (string name, string btLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetParameterTypeRawValueAsyncWithHttpInfo (string name, string btLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetParameterValueLongAsync (string name, string btLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetParameterValueLongAsyncWithHttpInfo (string name, string btLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        System.Threading.Tasks.Task<PropertiesDto> SetParametersAsync (string btLocator, PropertiesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> SetParametersAsyncWithHttpInfo (string btLocator, PropertiesDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        System.Threading.Tasks.Task<BuildTypesDto> SetTemplatesAsync (string btLocator, BuildTypesDto body = null, bool? optimizeSettings = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> SetTemplatesAsyncWithHttpInfo (string btLocator, BuildTypesDto body = null, bool? optimizeSettings = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootEntryDto</returns>
        System.Threading.Tasks.Task<VcsRootEntryDto> UpdateVcsRootEntryAsync (string btLocator, string vcsRootLocator, VcsRootEntryDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootEntryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsRootEntryDto>> UpdateVcsRootEntryAsyncWithHttpInfo (string btLocator, string vcsRootLocator, VcsRootEntryDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UpdateVcsRootEntryCheckoutRulesAsync (string btLocator, string vcsRootLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UpdateVcsRootEntryCheckoutRulesAsyncWithHttpInfo (string btLocator, string vcsRootLocator, string body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BuildTypeApi : IBuildTypeApi
    {
        private TeamCity.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildTypeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BuildTypeApi(String basePath)
        {
            this.Configuration = new TeamCity.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildTypeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BuildTypeApi(TeamCity.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TeamCity.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TeamCity.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TeamCity.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AgentRequirementDto</returns>
        public AgentRequirementDto AddAgentRequirement (string btLocator, string fields = null, AgentRequirementDto body = null)
        {
             ApiResponse<AgentRequirementDto> localVarResponse = AddAgentRequirementWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AgentRequirementDto</returns>
        public ApiResponse< AgentRequirementDto > AddAgentRequirementWithHttpInfo (string btLocator, string fields = null, AgentRequirementDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddAgentRequirement");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAgentRequirement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentRequirementDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentRequirementDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentRequirementDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AgentRequirementDto</returns>
        public async System.Threading.Tasks.Task<AgentRequirementDto> AddAgentRequirementAsync (string btLocator, string fields = null, AgentRequirementDto body = null)
        {
             ApiResponse<AgentRequirementDto> localVarResponse = await AddAgentRequirementAsyncWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentRequirementDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentRequirementDto>> AddAgentRequirementAsyncWithHttpInfo (string btLocator, string fields = null, AgentRequirementDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddAgentRequirement");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAgentRequirement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentRequirementDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentRequirementDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentRequirementDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ArtifactDependencyDto</returns>
        public ArtifactDependencyDto AddArtifactDep (string btLocator, string fields = null, ArtifactDependencyDto body = null)
        {
             ApiResponse<ArtifactDependencyDto> localVarResponse = AddArtifactDepWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ArtifactDependencyDto</returns>
        public ApiResponse< ArtifactDependencyDto > AddArtifactDepWithHttpInfo (string btLocator, string fields = null, ArtifactDependencyDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddArtifactDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddArtifactDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArtifactDependencyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArtifactDependencyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArtifactDependencyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ArtifactDependencyDto</returns>
        public async System.Threading.Tasks.Task<ArtifactDependencyDto> AddArtifactDepAsync (string btLocator, string fields = null, ArtifactDependencyDto body = null)
        {
             ApiResponse<ArtifactDependencyDto> localVarResponse = await AddArtifactDepAsyncWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ArtifactDependencyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArtifactDependencyDto>> AddArtifactDepAsyncWithHttpInfo (string btLocator, string fields = null, ArtifactDependencyDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddArtifactDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddArtifactDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArtifactDependencyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArtifactDependencyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArtifactDependencyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        public BuildTypeDto AddBuildType (BuildTypeDto body = null, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = AddBuildTypeWithHttpInfo(body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        public ApiResponse< BuildTypeDto > AddBuildTypeWithHttpInfo (BuildTypeDto body = null, string fields = null)
        {

            var localVarPath = "/app/rest/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBuildType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        public async System.Threading.Tasks.Task<BuildTypeDto> AddBuildTypeAsync (BuildTypeDto body = null, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = await AddBuildTypeAsyncWithHttpInfo(body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> AddBuildTypeAsyncWithHttpInfo (BuildTypeDto body = null, string fields = null)
        {

            var localVarPath = "/app/rest/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBuildType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FeatureDto</returns>
        public FeatureDto AddFeature (string btLocator, string fields = null, FeatureDto body = null)
        {
             ApiResponse<FeatureDto> localVarResponse = AddFeatureWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FeatureDto</returns>
        public ApiResponse< FeatureDto > AddFeatureWithHttpInfo (string btLocator, string fields = null, FeatureDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddFeature");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FeatureDto</returns>
        public async System.Threading.Tasks.Task<FeatureDto> AddFeatureAsync (string btLocator, string fields = null, FeatureDto body = null)
        {
             ApiResponse<FeatureDto> localVarResponse = await AddFeatureAsyncWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FeatureDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureDto>> AddFeatureAsyncWithHttpInfo (string btLocator, string fields = null, FeatureDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddFeature");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string AddFeatureParameter (string btLocator, string featureId, string parameterName, string body = null)
        {
             ApiResponse<string> localVarResponse = AddFeatureParameterWithHttpInfo(btLocator, featureId, parameterName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AddFeatureParameterWithHttpInfo (string btLocator, string featureId, string parameterName, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddFeatureParameter");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->AddFeatureParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling BuildTypeApi->AddFeatureParameter");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFeatureParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddFeatureParameterAsync (string btLocator, string featureId, string parameterName, string body = null)
        {
             ApiResponse<string> localVarResponse = await AddFeatureParameterAsyncWithHttpInfo(btLocator, featureId, parameterName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AddFeatureParameterAsyncWithHttpInfo (string btLocator, string featureId, string parameterName, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddFeatureParameter");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->AddFeatureParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling BuildTypeApi->AddFeatureParameter");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFeatureParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SnapshotDependencyDto</returns>
        public SnapshotDependencyDto AddSnapshotDep (string btLocator, string fields = null, SnapshotDependencyDto body = null)
        {
             ApiResponse<SnapshotDependencyDto> localVarResponse = AddSnapshotDepWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SnapshotDependencyDto</returns>
        public ApiResponse< SnapshotDependencyDto > AddSnapshotDepWithHttpInfo (string btLocator, string fields = null, SnapshotDependencyDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddSnapshotDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSnapshotDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnapshotDependencyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnapshotDependencyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnapshotDependencyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SnapshotDependencyDto</returns>
        public async System.Threading.Tasks.Task<SnapshotDependencyDto> AddSnapshotDepAsync (string btLocator, string fields = null, SnapshotDependencyDto body = null)
        {
             ApiResponse<SnapshotDependencyDto> localVarResponse = await AddSnapshotDepAsyncWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SnapshotDependencyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SnapshotDependencyDto>> AddSnapshotDepAsyncWithHttpInfo (string btLocator, string fields = null, SnapshotDependencyDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddSnapshotDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSnapshotDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnapshotDependencyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnapshotDependencyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnapshotDependencyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>StepDto</returns>
        public StepDto AddStep (string btLocator, string fields = null, StepDto body = null)
        {
             ApiResponse<StepDto> localVarResponse = AddStepWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of StepDto</returns>
        public ApiResponse< StepDto > AddStepWithHttpInfo (string btLocator, string fields = null, StepDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddStep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StepDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StepDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StepDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of StepDto</returns>
        public async System.Threading.Tasks.Task<StepDto> AddStepAsync (string btLocator, string fields = null, StepDto body = null)
        {
             ApiResponse<StepDto> localVarResponse = await AddStepAsyncWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (StepDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StepDto>> AddStepAsyncWithHttpInfo (string btLocator, string fields = null, StepDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddStep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StepDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StepDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StepDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string AddStepParameter (string btLocator, string stepId, string parameterName, string body = null)
        {
             ApiResponse<string> localVarResponse = AddStepParameterWithHttpInfo(btLocator, stepId, parameterName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AddStepParameterWithHttpInfo (string btLocator, string stepId, string parameterName, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddStepParameter");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->AddStepParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling BuildTypeApi->AddStepParameter");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStepParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AddStepParameterAsync (string btLocator, string stepId, string parameterName, string body = null)
        {
             ApiResponse<string> localVarResponse = await AddStepParameterAsyncWithHttpInfo(btLocator, stepId, parameterName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AddStepParameterAsyncWithHttpInfo (string btLocator, string stepId, string parameterName, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddStepParameter");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->AddStepParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling BuildTypeApi->AddStepParameter");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStepParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        public BuildTypeDto AddTemplate (string btLocator, BuildTypeDto body = null, bool? optimizeSettings = null, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = AddTemplateWithHttpInfo(btLocator, body, optimizeSettings, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        public ApiResponse< BuildTypeDto > AddTemplateWithHttpInfo (string btLocator, BuildTypeDto body = null, bool? optimizeSettings = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddTemplate");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (optimizeSettings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "optimizeSettings", optimizeSettings)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        public async System.Threading.Tasks.Task<BuildTypeDto> AddTemplateAsync (string btLocator, BuildTypeDto body = null, bool? optimizeSettings = null, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = await AddTemplateAsyncWithHttpInfo(btLocator, body, optimizeSettings, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> AddTemplateAsyncWithHttpInfo (string btLocator, BuildTypeDto body = null, bool? optimizeSettings = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddTemplate");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (optimizeSettings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "optimizeSettings", optimizeSettings)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TriggerDto</returns>
        public TriggerDto AddTrigger (string btLocator, string fields = null, TriggerDto body = null)
        {
             ApiResponse<TriggerDto> localVarResponse = AddTriggerWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TriggerDto</returns>
        public ApiResponse< TriggerDto > AddTriggerWithHttpInfo (string btLocator, string fields = null, TriggerDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddTrigger");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TriggerDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TriggerDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TriggerDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TriggerDto</returns>
        public async System.Threading.Tasks.Task<TriggerDto> AddTriggerAsync (string btLocator, string fields = null, TriggerDto body = null)
        {
             ApiResponse<TriggerDto> localVarResponse = await AddTriggerAsyncWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TriggerDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TriggerDto>> AddTriggerAsyncWithHttpInfo (string btLocator, string fields = null, TriggerDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddTrigger");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TriggerDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TriggerDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TriggerDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootEntryDto</returns>
        public VcsRootEntryDto AddVcsRootEntry (string btLocator, VcsRootEntryDto body = null, string fields = null)
        {
             ApiResponse<VcsRootEntryDto> localVarResponse = AddVcsRootEntryWithHttpInfo(btLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootEntryDto</returns>
        public ApiResponse< VcsRootEntryDto > AddVcsRootEntryWithHttpInfo (string btLocator, VcsRootEntryDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddVcsRootEntry");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVcsRootEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootEntryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootEntryDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootEntryDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootEntryDto</returns>
        public async System.Threading.Tasks.Task<VcsRootEntryDto> AddVcsRootEntryAsync (string btLocator, VcsRootEntryDto body = null, string fields = null)
        {
             ApiResponse<VcsRootEntryDto> localVarResponse = await AddVcsRootEntryAsyncWithHttpInfo(btLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootEntryDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsRootEntryDto>> AddVcsRootEntryAsyncWithHttpInfo (string btLocator, VcsRootEntryDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->AddVcsRootEntry");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVcsRootEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootEntryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootEntryDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootEntryDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string ChangeArtifactDepSetting (string btLocator, string artifactDepLocator, string fieldName, string body = null)
        {
             ApiResponse<string> localVarResponse = ChangeArtifactDepSettingWithHttpInfo(btLocator, artifactDepLocator, fieldName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ChangeArtifactDepSettingWithHttpInfo (string btLocator, string artifactDepLocator, string fieldName, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ChangeArtifactDepSetting");
            // verify the required parameter 'artifactDepLocator' is set
            if (artifactDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'artifactDepLocator' when calling BuildTypeApi->ChangeArtifactDepSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->ChangeArtifactDepSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (artifactDepLocator != null) localVarPathParams.Add("artifactDepLocator", this.Configuration.ApiClient.ParameterToString(artifactDepLocator)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeArtifactDepSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ChangeArtifactDepSettingAsync (string btLocator, string artifactDepLocator, string fieldName, string body = null)
        {
             ApiResponse<string> localVarResponse = await ChangeArtifactDepSettingAsyncWithHttpInfo(btLocator, artifactDepLocator, fieldName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ChangeArtifactDepSettingAsyncWithHttpInfo (string btLocator, string artifactDepLocator, string fieldName, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ChangeArtifactDepSetting");
            // verify the required parameter 'artifactDepLocator' is set
            if (artifactDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'artifactDepLocator' when calling BuildTypeApi->ChangeArtifactDepSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->ChangeArtifactDepSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (artifactDepLocator != null) localVarPathParams.Add("artifactDepLocator", this.Configuration.ApiClient.ParameterToString(artifactDepLocator)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeArtifactDepSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string ChangeFeatureSetting (string btLocator, string featureId, string name, string body = null)
        {
             ApiResponse<string> localVarResponse = ChangeFeatureSettingWithHttpInfo(btLocator, featureId, name, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ChangeFeatureSettingWithHttpInfo (string btLocator, string featureId, string name, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ChangeFeatureSetting");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->ChangeFeatureSetting");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->ChangeFeatureSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeFeatureSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ChangeFeatureSettingAsync (string btLocator, string featureId, string name, string body = null)
        {
             ApiResponse<string> localVarResponse = await ChangeFeatureSettingAsyncWithHttpInfo(btLocator, featureId, name, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ChangeFeatureSettingAsyncWithHttpInfo (string btLocator, string featureId, string name, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ChangeFeatureSetting");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->ChangeFeatureSetting");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->ChangeFeatureSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeFeatureSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string ChangeRequirementSetting (string btLocator, string agentRequirementLocator, string fieldName, string body = null)
        {
             ApiResponse<string> localVarResponse = ChangeRequirementSettingWithHttpInfo(btLocator, agentRequirementLocator, fieldName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ChangeRequirementSettingWithHttpInfo (string btLocator, string agentRequirementLocator, string fieldName, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ChangeRequirementSetting");
            // verify the required parameter 'agentRequirementLocator' is set
            if (agentRequirementLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentRequirementLocator' when calling BuildTypeApi->ChangeRequirementSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->ChangeRequirementSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (agentRequirementLocator != null) localVarPathParams.Add("agentRequirementLocator", this.Configuration.ApiClient.ParameterToString(agentRequirementLocator)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeRequirementSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ChangeRequirementSettingAsync (string btLocator, string agentRequirementLocator, string fieldName, string body = null)
        {
             ApiResponse<string> localVarResponse = await ChangeRequirementSettingAsyncWithHttpInfo(btLocator, agentRequirementLocator, fieldName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ChangeRequirementSettingAsyncWithHttpInfo (string btLocator, string agentRequirementLocator, string fieldName, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ChangeRequirementSetting");
            // verify the required parameter 'agentRequirementLocator' is set
            if (agentRequirementLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentRequirementLocator' when calling BuildTypeApi->ChangeRequirementSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->ChangeRequirementSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (agentRequirementLocator != null) localVarPathParams.Add("agentRequirementLocator", this.Configuration.ApiClient.ParameterToString(agentRequirementLocator)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeRequirementSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string ChangeStepSetting (string btLocator, string stepId, string fieldName, string body = null)
        {
             ApiResponse<string> localVarResponse = ChangeStepSettingWithHttpInfo(btLocator, stepId, fieldName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ChangeStepSettingWithHttpInfo (string btLocator, string stepId, string fieldName, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ChangeStepSetting");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->ChangeStepSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->ChangeStepSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeStepSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ChangeStepSettingAsync (string btLocator, string stepId, string fieldName, string body = null)
        {
             ApiResponse<string> localVarResponse = await ChangeStepSettingAsyncWithHttpInfo(btLocator, stepId, fieldName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ChangeStepSettingAsyncWithHttpInfo (string btLocator, string stepId, string fieldName, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ChangeStepSetting");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->ChangeStepSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->ChangeStepSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeStepSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string ChangeTriggerSetting (string btLocator, string triggerLocator, string fieldName, string body = null)
        {
             ApiResponse<string> localVarResponse = ChangeTriggerSettingWithHttpInfo(btLocator, triggerLocator, fieldName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ChangeTriggerSettingWithHttpInfo (string btLocator, string triggerLocator, string fieldName, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ChangeTriggerSetting");
            // verify the required parameter 'triggerLocator' is set
            if (triggerLocator == null)
                throw new ApiException(400, "Missing required parameter 'triggerLocator' when calling BuildTypeApi->ChangeTriggerSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->ChangeTriggerSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (triggerLocator != null) localVarPathParams.Add("triggerLocator", this.Configuration.ApiClient.ParameterToString(triggerLocator)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeTriggerSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ChangeTriggerSettingAsync (string btLocator, string triggerLocator, string fieldName, string body = null)
        {
             ApiResponse<string> localVarResponse = await ChangeTriggerSettingAsyncWithHttpInfo(btLocator, triggerLocator, fieldName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ChangeTriggerSettingAsyncWithHttpInfo (string btLocator, string triggerLocator, string fieldName, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ChangeTriggerSetting");
            // verify the required parameter 'triggerLocator' is set
            if (triggerLocator == null)
                throw new ApiException(400, "Missing required parameter 'triggerLocator' when calling BuildTypeApi->ChangeTriggerSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->ChangeTriggerSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (triggerLocator != null) localVarPathParams.Add("triggerLocator", this.Configuration.ApiClient.ParameterToString(triggerLocator)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeTriggerSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <returns></returns>
        public void DeleteAgentRequirement (string btLocator, string agentRequirementLocator)
        {
             DeleteAgentRequirementWithHttpInfo(btLocator, agentRequirementLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAgentRequirementWithHttpInfo (string btLocator, string agentRequirementLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteAgentRequirement");
            // verify the required parameter 'agentRequirementLocator' is set
            if (agentRequirementLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentRequirementLocator' when calling BuildTypeApi->DeleteAgentRequirement");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (agentRequirementLocator != null) localVarPathParams.Add("agentRequirementLocator", this.Configuration.ApiClient.ParameterToString(agentRequirementLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAgentRequirement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAgentRequirementAsync (string btLocator, string agentRequirementLocator)
        {
             await DeleteAgentRequirementAsyncWithHttpInfo(btLocator, agentRequirementLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAgentRequirementAsyncWithHttpInfo (string btLocator, string agentRequirementLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteAgentRequirement");
            // verify the required parameter 'agentRequirementLocator' is set
            if (agentRequirementLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentRequirementLocator' when calling BuildTypeApi->DeleteAgentRequirement");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (agentRequirementLocator != null) localVarPathParams.Add("agentRequirementLocator", this.Configuration.ApiClient.ParameterToString(agentRequirementLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAgentRequirement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns></returns>
        public void DeleteAllParameters (string btLocator)
        {
             DeleteAllParametersWithHttpInfo(btLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllParametersWithHttpInfo (string btLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteAllParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllParametersAsync (string btLocator)
        {
             await DeleteAllParametersAsyncWithHttpInfo(btLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllParametersAsyncWithHttpInfo (string btLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteAllParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <returns></returns>
        public void DeleteArtifactDep (string btLocator, string artifactDepLocator)
        {
             DeleteArtifactDepWithHttpInfo(btLocator, artifactDepLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteArtifactDepWithHttpInfo (string btLocator, string artifactDepLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteArtifactDep");
            // verify the required parameter 'artifactDepLocator' is set
            if (artifactDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'artifactDepLocator' when calling BuildTypeApi->DeleteArtifactDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (artifactDepLocator != null) localVarPathParams.Add("artifactDepLocator", this.Configuration.ApiClient.ParameterToString(artifactDepLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteArtifactDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteArtifactDepAsync (string btLocator, string artifactDepLocator)
        {
             await DeleteArtifactDepAsyncWithHttpInfo(btLocator, artifactDepLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteArtifactDepAsyncWithHttpInfo (string btLocator, string artifactDepLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteArtifactDep");
            // verify the required parameter 'artifactDepLocator' is set
            if (artifactDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'artifactDepLocator' when calling BuildTypeApi->DeleteArtifactDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (artifactDepLocator != null) localVarPathParams.Add("artifactDepLocator", this.Configuration.ApiClient.ParameterToString(artifactDepLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteArtifactDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns></returns>
        public void DeleteBuildType (string btLocator)
        {
             DeleteBuildTypeWithHttpInfo(btLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBuildTypeWithHttpInfo (string btLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteBuildType");

            var localVarPath = "/app/rest/buildTypes/{btLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBuildType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBuildTypeAsync (string btLocator)
        {
             await DeleteBuildTypeAsyncWithHttpInfo(btLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBuildTypeAsyncWithHttpInfo (string btLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteBuildType");

            var localVarPath = "/app/rest/buildTypes/{btLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBuildType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <returns></returns>
        public void DeleteFeature (string btLocator, string featureId)
        {
             DeleteFeatureWithHttpInfo(btLocator, featureId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFeatureWithHttpInfo (string btLocator, string featureId)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteFeature");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->DeleteFeature");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFeatureAsync (string btLocator, string featureId)
        {
             await DeleteFeatureAsyncWithHttpInfo(btLocator, featureId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFeatureAsyncWithHttpInfo (string btLocator, string featureId)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteFeature");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->DeleteFeature");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns></returns>
        public void DeleteParameter (string name, string btLocator)
        {
             DeleteParameterWithHttpInfo(name, btLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteParameterWithHttpInfo (string name, string btLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->DeleteParameter");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteParameter");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteParameterAsync (string name, string btLocator)
        {
             await DeleteParameterAsyncWithHttpInfo(name, btLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteParameterAsyncWithHttpInfo (string name, string btLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->DeleteParameter");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteParameter");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <returns></returns>
        public void DeleteSnapshotDep (string btLocator, string snapshotDepLocator)
        {
             DeleteSnapshotDepWithHttpInfo(btLocator, snapshotDepLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSnapshotDepWithHttpInfo (string btLocator, string snapshotDepLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteSnapshotDep");
            // verify the required parameter 'snapshotDepLocator' is set
            if (snapshotDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'snapshotDepLocator' when calling BuildTypeApi->DeleteSnapshotDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (snapshotDepLocator != null) localVarPathParams.Add("snapshotDepLocator", this.Configuration.ApiClient.ParameterToString(snapshotDepLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSnapshotDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSnapshotDepAsync (string btLocator, string snapshotDepLocator)
        {
             await DeleteSnapshotDepAsyncWithHttpInfo(btLocator, snapshotDepLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSnapshotDepAsyncWithHttpInfo (string btLocator, string snapshotDepLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteSnapshotDep");
            // verify the required parameter 'snapshotDepLocator' is set
            if (snapshotDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'snapshotDepLocator' when calling BuildTypeApi->DeleteSnapshotDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (snapshotDepLocator != null) localVarPathParams.Add("snapshotDepLocator", this.Configuration.ApiClient.ParameterToString(snapshotDepLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSnapshotDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <returns></returns>
        public void DeleteStep (string btLocator, string stepId)
        {
             DeleteStepWithHttpInfo(btLocator, stepId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteStepWithHttpInfo (string btLocator, string stepId)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteStep");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->DeleteStep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStepAsync (string btLocator, string stepId)
        {
             await DeleteStepAsyncWithHttpInfo(btLocator, stepId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStepAsyncWithHttpInfo (string btLocator, string stepId)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteStep");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->DeleteStep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <returns></returns>
        public void DeleteTrigger (string btLocator, string triggerLocator)
        {
             DeleteTriggerWithHttpInfo(btLocator, triggerLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTriggerWithHttpInfo (string btLocator, string triggerLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteTrigger");
            // verify the required parameter 'triggerLocator' is set
            if (triggerLocator == null)
                throw new ApiException(400, "Missing required parameter 'triggerLocator' when calling BuildTypeApi->DeleteTrigger");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (triggerLocator != null) localVarPathParams.Add("triggerLocator", this.Configuration.ApiClient.ParameterToString(triggerLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTriggerAsync (string btLocator, string triggerLocator)
        {
             await DeleteTriggerAsyncWithHttpInfo(btLocator, triggerLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTriggerAsyncWithHttpInfo (string btLocator, string triggerLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteTrigger");
            // verify the required parameter 'triggerLocator' is set
            if (triggerLocator == null)
                throw new ApiException(400, "Missing required parameter 'triggerLocator' when calling BuildTypeApi->DeleteTrigger");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (triggerLocator != null) localVarPathParams.Add("triggerLocator", this.Configuration.ApiClient.ParameterToString(triggerLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns></returns>
        public void DeleteVcsRootEntry (string btLocator, string vcsRootLocator)
        {
             DeleteVcsRootEntryWithHttpInfo(btLocator, vcsRootLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteVcsRootEntryWithHttpInfo (string btLocator, string vcsRootLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteVcsRootEntry");
            // verify the required parameter 'vcsRootLocator' is set
            if (vcsRootLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootLocator' when calling BuildTypeApi->DeleteVcsRootEntry");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (vcsRootLocator != null) localVarPathParams.Add("vcsRootLocator", this.Configuration.ApiClient.ParameterToString(vcsRootLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVcsRootEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVcsRootEntryAsync (string btLocator, string vcsRootLocator)
        {
             await DeleteVcsRootEntryAsyncWithHttpInfo(btLocator, vcsRootLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVcsRootEntryAsyncWithHttpInfo (string btLocator, string vcsRootLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->DeleteVcsRootEntry");
            // verify the required parameter 'vcsRootLocator' is set
            if (vcsRootLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootLocator' when calling BuildTypeApi->DeleteVcsRootEntry");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (vcsRootLocator != null) localVarPathParams.Add("vcsRootLocator", this.Configuration.ApiClient.ParameterToString(vcsRootLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVcsRootEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentRequirementDto</returns>
        public AgentRequirementDto GetAgentRequirement (string btLocator, string agentRequirementLocator, string fields = null)
        {
             ApiResponse<AgentRequirementDto> localVarResponse = GetAgentRequirementWithHttpInfo(btLocator, agentRequirementLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentRequirementDto</returns>
        public ApiResponse< AgentRequirementDto > GetAgentRequirementWithHttpInfo (string btLocator, string agentRequirementLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetAgentRequirement");
            // verify the required parameter 'agentRequirementLocator' is set
            if (agentRequirementLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentRequirementLocator' when calling BuildTypeApi->GetAgentRequirement");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (agentRequirementLocator != null) localVarPathParams.Add("agentRequirementLocator", this.Configuration.ApiClient.ParameterToString(agentRequirementLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgentRequirement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentRequirementDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentRequirementDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentRequirementDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentRequirementDto</returns>
        public async System.Threading.Tasks.Task<AgentRequirementDto> GetAgentRequirementAsync (string btLocator, string agentRequirementLocator, string fields = null)
        {
             ApiResponse<AgentRequirementDto> localVarResponse = await GetAgentRequirementAsyncWithHttpInfo(btLocator, agentRequirementLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentRequirementDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentRequirementDto>> GetAgentRequirementAsyncWithHttpInfo (string btLocator, string agentRequirementLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetAgentRequirement");
            // verify the required parameter 'agentRequirementLocator' is set
            if (agentRequirementLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentRequirementLocator' when calling BuildTypeApi->GetAgentRequirement");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (agentRequirementLocator != null) localVarPathParams.Add("agentRequirementLocator", this.Configuration.ApiClient.ParameterToString(agentRequirementLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgentRequirement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentRequirementDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentRequirementDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentRequirementDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentRequirementsDto</returns>
        public AgentRequirementsDto GetAgentRequirements (string btLocator, string fields = null)
        {
             ApiResponse<AgentRequirementsDto> localVarResponse = GetAgentRequirementsWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentRequirementsDto</returns>
        public ApiResponse< AgentRequirementsDto > GetAgentRequirementsWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetAgentRequirements");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgentRequirements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentRequirementsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentRequirementsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentRequirementsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentRequirementsDto</returns>
        public async System.Threading.Tasks.Task<AgentRequirementsDto> GetAgentRequirementsAsync (string btLocator, string fields = null)
        {
             ApiResponse<AgentRequirementsDto> localVarResponse = await GetAgentRequirementsAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentRequirementsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentRequirementsDto>> GetAgentRequirementsAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetAgentRequirements");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgentRequirements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentRequirementsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentRequirementsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentRequirementsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>ItemsDto</returns>
        public ItemsDto GetAliases (string btLocator, string field = null)
        {
             ApiResponse<ItemsDto> localVarResponse = GetAliasesWithHttpInfo(btLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of ItemsDto</returns>
        public ApiResponse< ItemsDto > GetAliasesWithHttpInfo (string btLocator, string field = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetAliases");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAliases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ItemsDto</returns>
        public async System.Threading.Tasks.Task<ItemsDto> GetAliasesAsync (string btLocator, string field = null)
        {
             ApiResponse<ItemsDto> localVarResponse = await GetAliasesAsyncWithHttpInfo(btLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (ItemsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemsDto>> GetAliasesAsyncWithHttpInfo (string btLocator, string field = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetAliases");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAliases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ArtifactDependencyDto</returns>
        public ArtifactDependencyDto GetArtifactDep (string btLocator, string artifactDepLocator, string fields = null)
        {
             ApiResponse<ArtifactDependencyDto> localVarResponse = GetArtifactDepWithHttpInfo(btLocator, artifactDepLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ArtifactDependencyDto</returns>
        public ApiResponse< ArtifactDependencyDto > GetArtifactDepWithHttpInfo (string btLocator, string artifactDepLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetArtifactDep");
            // verify the required parameter 'artifactDepLocator' is set
            if (artifactDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'artifactDepLocator' when calling BuildTypeApi->GetArtifactDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (artifactDepLocator != null) localVarPathParams.Add("artifactDepLocator", this.Configuration.ApiClient.ParameterToString(artifactDepLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtifactDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArtifactDependencyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArtifactDependencyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArtifactDependencyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ArtifactDependencyDto</returns>
        public async System.Threading.Tasks.Task<ArtifactDependencyDto> GetArtifactDepAsync (string btLocator, string artifactDepLocator, string fields = null)
        {
             ApiResponse<ArtifactDependencyDto> localVarResponse = await GetArtifactDepAsyncWithHttpInfo(btLocator, artifactDepLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ArtifactDependencyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArtifactDependencyDto>> GetArtifactDepAsyncWithHttpInfo (string btLocator, string artifactDepLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetArtifactDep");
            // verify the required parameter 'artifactDepLocator' is set
            if (artifactDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'artifactDepLocator' when calling BuildTypeApi->GetArtifactDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (artifactDepLocator != null) localVarPathParams.Add("artifactDepLocator", this.Configuration.ApiClient.ParameterToString(artifactDepLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtifactDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArtifactDependencyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArtifactDependencyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArtifactDependencyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>string</returns>
        public string GetArtifactDepSetting (string btLocator, string artifactDepLocator, string fieldName)
        {
             ApiResponse<string> localVarResponse = GetArtifactDepSettingWithHttpInfo(btLocator, artifactDepLocator, fieldName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetArtifactDepSettingWithHttpInfo (string btLocator, string artifactDepLocator, string fieldName)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetArtifactDepSetting");
            // verify the required parameter 'artifactDepLocator' is set
            if (artifactDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'artifactDepLocator' when calling BuildTypeApi->GetArtifactDepSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->GetArtifactDepSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (artifactDepLocator != null) localVarPathParams.Add("artifactDepLocator", this.Configuration.ApiClient.ParameterToString(artifactDepLocator)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtifactDepSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetArtifactDepSettingAsync (string btLocator, string artifactDepLocator, string fieldName)
        {
             ApiResponse<string> localVarResponse = await GetArtifactDepSettingAsyncWithHttpInfo(btLocator, artifactDepLocator, fieldName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetArtifactDepSettingAsyncWithHttpInfo (string btLocator, string artifactDepLocator, string fieldName)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetArtifactDepSetting");
            // verify the required parameter 'artifactDepLocator' is set
            if (artifactDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'artifactDepLocator' when calling BuildTypeApi->GetArtifactDepSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->GetArtifactDepSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (artifactDepLocator != null) localVarPathParams.Add("artifactDepLocator", this.Configuration.ApiClient.ParameterToString(artifactDepLocator)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtifactDepSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ArtifactDependenciesDto</returns>
        public ArtifactDependenciesDto GetArtifactDeps (string btLocator, string fields = null)
        {
             ApiResponse<ArtifactDependenciesDto> localVarResponse = GetArtifactDepsWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ArtifactDependenciesDto</returns>
        public ApiResponse< ArtifactDependenciesDto > GetArtifactDepsWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetArtifactDeps");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtifactDeps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArtifactDependenciesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArtifactDependenciesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArtifactDependenciesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ArtifactDependenciesDto</returns>
        public async System.Threading.Tasks.Task<ArtifactDependenciesDto> GetArtifactDepsAsync (string btLocator, string fields = null)
        {
             ApiResponse<ArtifactDependenciesDto> localVarResponse = await GetArtifactDepsAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ArtifactDependenciesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArtifactDependenciesDto>> GetArtifactDepsAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetArtifactDeps");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtifactDeps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArtifactDependenciesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArtifactDependenciesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArtifactDependenciesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        public BuildTypesDto GetBuildTypes (string locator = null, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = GetBuildTypesWithHttpInfo(locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        public ApiResponse< BuildTypesDto > GetBuildTypesWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        public async System.Threading.Tasks.Task<BuildTypesDto> GetBuildTypesAsync (string locator = null, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = await GetBuildTypesAsyncWithHttpInfo(locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> GetBuildTypesAsyncWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>FilesDto</returns>
        public FilesDto GetChildren2 (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null)
        {
             ApiResponse<FilesDto> localVarResponse = GetChildren2WithHttpInfo(path, btLocator, basePath, locator, fields, resolveParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        public ApiResponse< FilesDto > GetChildren2WithHttpInfo (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildTypeApi->GetChildren2");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetChildren2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/children{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildren2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        public async System.Threading.Tasks.Task<FilesDto> GetChildren2Async (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null)
        {
             ApiResponse<FilesDto> localVarResponse = await GetChildren2AsyncWithHttpInfo(path, btLocator, basePath, locator, fields, resolveParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildren2AsyncWithHttpInfo (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildTypeApi->GetChildren2");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetChildren2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/children{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildren2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>FilesDto</returns>
        public FilesDto GetChildrenAlias2 (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null)
        {
             ApiResponse<FilesDto> localVarResponse = GetChildrenAlias2WithHttpInfo(path, btLocator, basePath, locator, fields, resolveParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        public ApiResponse< FilesDto > GetChildrenAlias2WithHttpInfo (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildTypeApi->GetChildrenAlias2");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetChildrenAlias2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildrenAlias2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        public async System.Threading.Tasks.Task<FilesDto> GetChildrenAlias2Async (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null)
        {
             ApiResponse<FilesDto> localVarResponse = await GetChildrenAlias2AsyncWithHttpInfo(path, btLocator, basePath, locator, fields, resolveParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetChildrenAlias2AsyncWithHttpInfo (string path, string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildTypeApi->GetChildrenAlias2");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetChildrenAlias2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildrenAlias2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns></returns>
        public void GetContent2 (string path, string btLocator, string responseBuilder = null, bool? resolveParameters = null)
        {
             GetContent2WithHttpInfo(path, btLocator, responseBuilder, resolveParameters);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetContent2WithHttpInfo (string path, string btLocator, string responseBuilder = null, bool? resolveParameters = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildTypeApi->GetContent2");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetContent2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/content{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (responseBuilder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseBuilder", responseBuilder)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetContent2Async (string path, string btLocator, string responseBuilder = null, bool? resolveParameters = null)
        {
             await GetContent2AsyncWithHttpInfo(path, btLocator, responseBuilder, resolveParameters);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="responseBuilder"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContent2AsyncWithHttpInfo (string path, string btLocator, string responseBuilder = null, bool? resolveParameters = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildTypeApi->GetContent2");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetContent2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/content{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (responseBuilder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseBuilder", responseBuilder)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns></returns>
        public void GetContentAlias2 (string path, string btLocator, bool? resolveParameters = null)
        {
             GetContentAlias2WithHttpInfo(path, btLocator, resolveParameters);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetContentAlias2WithHttpInfo (string path, string btLocator, bool? resolveParameters = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildTypeApi->GetContentAlias2");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetContentAlias2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/files{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentAlias2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetContentAlias2Async (string path, string btLocator, bool? resolveParameters = null)
        {
             await GetContentAlias2AsyncWithHttpInfo(path, btLocator, resolveParameters);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContentAlias2AsyncWithHttpInfo (string path, string btLocator, bool? resolveParameters = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildTypeApi->GetContentAlias2");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetContentAlias2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/files{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentAlias2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootInstancesDto</returns>
        public VcsRootInstancesDto GetCurrentVcsInstances (string btLocator, string fields = null)
        {
             ApiResponse<VcsRootInstancesDto> localVarResponse = GetCurrentVcsInstancesWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootInstancesDto</returns>
        public ApiResponse< VcsRootInstancesDto > GetCurrentVcsInstancesWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetCurrentVcsInstances");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcsRootInstances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentVcsInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootInstancesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootInstancesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootInstancesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootInstancesDto</returns>
        public async System.Threading.Tasks.Task<VcsRootInstancesDto> GetCurrentVcsInstancesAsync (string btLocator, string fields = null)
        {
             ApiResponse<VcsRootInstancesDto> localVarResponse = await GetCurrentVcsInstancesAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootInstancesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsRootInstancesDto>> GetCurrentVcsInstancesAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetCurrentVcsInstances");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcsRootInstances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentVcsInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootInstancesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootInstancesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootInstancesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootInstancesDto</returns>
        public VcsRootInstancesDto GetCurrentVcsInstancesObsolete (string btLocator, string fields = null)
        {
             ApiResponse<VcsRootInstancesDto> localVarResponse = GetCurrentVcsInstancesObsoleteWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootInstancesDto</returns>
        public ApiResponse< VcsRootInstancesDto > GetCurrentVcsInstancesObsoleteWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetCurrentVcsInstancesObsolete");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentVcsInstancesObsolete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootInstancesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootInstancesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootInstancesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootInstancesDto</returns>
        public async System.Threading.Tasks.Task<VcsRootInstancesDto> GetCurrentVcsInstancesObsoleteAsync (string btLocator, string fields = null)
        {
             ApiResponse<VcsRootInstancesDto> localVarResponse = await GetCurrentVcsInstancesObsoleteAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootInstancesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsRootInstancesDto>> GetCurrentVcsInstancesObsoleteAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetCurrentVcsInstancesObsolete");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentVcsInstancesObsolete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootInstancesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootInstancesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootInstancesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>FeatureDto</returns>
        public FeatureDto GetFeature (string btLocator, string featureId, string fields = null)
        {
             ApiResponse<FeatureDto> localVarResponse = GetFeatureWithHttpInfo(btLocator, featureId, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of FeatureDto</returns>
        public ApiResponse< FeatureDto > GetFeatureWithHttpInfo (string btLocator, string featureId, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetFeature");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->GetFeature");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of FeatureDto</returns>
        public async System.Threading.Tasks.Task<FeatureDto> GetFeatureAsync (string btLocator, string featureId, string fields = null)
        {
             ApiResponse<FeatureDto> localVarResponse = await GetFeatureAsyncWithHttpInfo(btLocator, featureId, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (FeatureDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureDto>> GetFeatureAsyncWithHttpInfo (string btLocator, string featureId, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetFeature");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->GetFeature");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <returns>string</returns>
        public string GetFeatureParameter (string btLocator, string featureId, string parameterName)
        {
             ApiResponse<string> localVarResponse = GetFeatureParameterWithHttpInfo(btLocator, featureId, parameterName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetFeatureParameterWithHttpInfo (string btLocator, string featureId, string parameterName)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetFeatureParameter");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->GetFeatureParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling BuildTypeApi->GetFeatureParameter");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetFeatureParameterAsync (string btLocator, string featureId, string parameterName)
        {
             ApiResponse<string> localVarResponse = await GetFeatureParameterAsyncWithHttpInfo(btLocator, featureId, parameterName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetFeatureParameterAsyncWithHttpInfo (string btLocator, string featureId, string parameterName)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetFeatureParameter");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->GetFeatureParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling BuildTypeApi->GetFeatureParameter");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        public PropertiesDto GetFeatureParameters (string btLocator, string featureId, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = GetFeatureParametersWithHttpInfo(btLocator, featureId, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        public ApiResponse< PropertiesDto > GetFeatureParametersWithHttpInfo (string btLocator, string featureId, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetFeatureParameters");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->GetFeatureParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        public async System.Threading.Tasks.Task<PropertiesDto> GetFeatureParametersAsync (string btLocator, string featureId, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = await GetFeatureParametersAsyncWithHttpInfo(btLocator, featureId, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> GetFeatureParametersAsyncWithHttpInfo (string btLocator, string featureId, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetFeatureParameters");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->GetFeatureParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <returns>string</returns>
        public string GetFeatureSetting (string btLocator, string featureId, string name)
        {
             ApiResponse<string> localVarResponse = GetFeatureSettingWithHttpInfo(btLocator, featureId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetFeatureSettingWithHttpInfo (string btLocator, string featureId, string name)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetFeatureSetting");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->GetFeatureSetting");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->GetFeatureSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetFeatureSettingAsync (string btLocator, string featureId, string name)
        {
             ApiResponse<string> localVarResponse = await GetFeatureSettingAsyncWithHttpInfo(btLocator, featureId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetFeatureSettingAsyncWithHttpInfo (string btLocator, string featureId, string name)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetFeatureSetting");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->GetFeatureSetting");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->GetFeatureSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>FeaturesDto</returns>
        public FeaturesDto GetFeatures (string btLocator, string fields = null)
        {
             ApiResponse<FeaturesDto> localVarResponse = GetFeaturesWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of FeaturesDto</returns>
        public ApiResponse< FeaturesDto > GetFeaturesWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetFeatures");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeaturesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeaturesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeaturesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of FeaturesDto</returns>
        public async System.Threading.Tasks.Task<FeaturesDto> GetFeaturesAsync (string btLocator, string fields = null)
        {
             ApiResponse<FeaturesDto> localVarResponse = await GetFeaturesAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (FeaturesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeaturesDto>> GetFeaturesAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetFeatures");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeaturesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeaturesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeaturesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>InvestigationsDto</returns>
        public InvestigationsDto GetInvestigations (string btLocator, string fields = null)
        {
             ApiResponse<InvestigationsDto> localVarResponse = GetInvestigationsWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of InvestigationsDto</returns>
        public ApiResponse< InvestigationsDto > GetInvestigationsWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetInvestigations");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/investigations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvestigations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvestigationsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvestigationsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvestigationsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of InvestigationsDto</returns>
        public async System.Threading.Tasks.Task<InvestigationsDto> GetInvestigationsAsync (string btLocator, string fields = null)
        {
             ApiResponse<InvestigationsDto> localVarResponse = await GetInvestigationsAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (InvestigationsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvestigationsDto>> GetInvestigationsAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetInvestigations");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/investigations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvestigations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvestigationsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvestigationsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvestigationsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>FileDto</returns>
        public FileDto GetMetadata2 (string path, string btLocator, string fields = null, bool? resolveParameters = null)
        {
             ApiResponse<FileDto> localVarResponse = GetMetadata2WithHttpInfo(path, btLocator, fields, resolveParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of FileDto</returns>
        public ApiResponse< FileDto > GetMetadata2WithHttpInfo (string path, string btLocator, string fields = null, bool? resolveParameters = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildTypeApi->GetMetadata2");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetMetadata2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of FileDto</returns>
        public async System.Threading.Tasks.Task<FileDto> GetMetadata2Async (string path, string btLocator, string fields = null, bool? resolveParameters = null)
        {
             ApiResponse<FileDto> localVarResponse = await GetMetadata2AsyncWithHttpInfo(path, btLocator, fields, resolveParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (FileDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileDto>> GetMetadata2AsyncWithHttpInfo (string path, string btLocator, string fields = null, bool? resolveParameters = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildTypeApi->GetMetadata2");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetMetadata2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertyDto</returns>
        public PropertyDto GetParameter1 (string name, string btLocator, string fields = null)
        {
             ApiResponse<PropertyDto> localVarResponse = GetParameter1WithHttpInfo(name, btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertyDto</returns>
        public ApiResponse< PropertyDto > GetParameter1WithHttpInfo (string name, string btLocator, string fields = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->GetParameter1");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetParameter1");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameter1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertyDto</returns>
        public async System.Threading.Tasks.Task<PropertyDto> GetParameter1Async (string name, string btLocator, string fields = null)
        {
             ApiResponse<PropertyDto> localVarResponse = await GetParameter1AsyncWithHttpInfo(name, btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyDto>> GetParameter1AsyncWithHttpInfo (string name, string btLocator, string fields = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->GetParameter1");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetParameter1");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameter1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>TypeDto</returns>
        public TypeDto GetParameterType (string name, string btLocator)
        {
             ApiResponse<TypeDto> localVarResponse = GetParameterTypeWithHttpInfo(name, btLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of TypeDto</returns>
        public ApiResponse< TypeDto > GetParameterTypeWithHttpInfo (string name, string btLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->GetParameterType");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetParameterType");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of TypeDto</returns>
        public async System.Threading.Tasks.Task<TypeDto> GetParameterTypeAsync (string name, string btLocator)
        {
             ApiResponse<TypeDto> localVarResponse = await GetParameterTypeAsyncWithHttpInfo(name, btLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse (TypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TypeDto>> GetParameterTypeAsyncWithHttpInfo (string name, string btLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->GetParameterType");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetParameterType");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>string</returns>
        public string GetParameterTypeRawValue (string name, string btLocator)
        {
             ApiResponse<string> localVarResponse = GetParameterTypeRawValueWithHttpInfo(name, btLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetParameterTypeRawValueWithHttpInfo (string name, string btLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->GetParameterTypeRawValue");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetParameterTypeRawValue");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterTypeRawValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetParameterTypeRawValueAsync (string name, string btLocator)
        {
             ApiResponse<string> localVarResponse = await GetParameterTypeRawValueAsyncWithHttpInfo(name, btLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetParameterTypeRawValueAsyncWithHttpInfo (string name, string btLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->GetParameterTypeRawValue");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetParameterTypeRawValue");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterTypeRawValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>string</returns>
        public string GetParameterValueLong (string name, string btLocator)
        {
             ApiResponse<string> localVarResponse = GetParameterValueLongWithHttpInfo(name, btLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetParameterValueLongWithHttpInfo (string name, string btLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->GetParameterValueLong");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetParameterValueLong");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterValueLong", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetParameterValueLongAsync (string name, string btLocator)
        {
             ApiResponse<string> localVarResponse = await GetParameterValueLongAsyncWithHttpInfo(name, btLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetParameterValueLongAsyncWithHttpInfo (string name, string btLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->GetParameterValueLong");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetParameterValueLong");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterValueLong", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        public PropertiesDto GetParameters (string btLocator, string locator = null, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = GetParametersWithHttpInfo(btLocator, locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        public ApiResponse< PropertiesDto > GetParametersWithHttpInfo (string btLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        public async System.Threading.Tasks.Task<PropertiesDto> GetParametersAsync (string btLocator, string locator = null, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = await GetParametersAsyncWithHttpInfo(btLocator, locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> GetParametersAsyncWithHttpInfo (string btLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>string</returns>
        public string GetRequirementSetting (string btLocator, string agentRequirementLocator, string fieldName)
        {
             ApiResponse<string> localVarResponse = GetRequirementSettingWithHttpInfo(btLocator, agentRequirementLocator, fieldName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetRequirementSettingWithHttpInfo (string btLocator, string agentRequirementLocator, string fieldName)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetRequirementSetting");
            // verify the required parameter 'agentRequirementLocator' is set
            if (agentRequirementLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentRequirementLocator' when calling BuildTypeApi->GetRequirementSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->GetRequirementSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (agentRequirementLocator != null) localVarPathParams.Add("agentRequirementLocator", this.Configuration.ApiClient.ParameterToString(agentRequirementLocator)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRequirementSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetRequirementSettingAsync (string btLocator, string agentRequirementLocator, string fieldName)
        {
             ApiResponse<string> localVarResponse = await GetRequirementSettingAsyncWithHttpInfo(btLocator, agentRequirementLocator, fieldName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetRequirementSettingAsyncWithHttpInfo (string btLocator, string agentRequirementLocator, string fieldName)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetRequirementSetting");
            // verify the required parameter 'agentRequirementLocator' is set
            if (agentRequirementLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentRequirementLocator' when calling BuildTypeApi->GetRequirementSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->GetRequirementSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (agentRequirementLocator != null) localVarPathParams.Add("agentRequirementLocator", this.Configuration.ApiClient.ParameterToString(agentRequirementLocator)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRequirementSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>FilesDto</returns>
        public FilesDto GetRoot2 (string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null)
        {
             ApiResponse<FilesDto> localVarResponse = GetRoot2WithHttpInfo(btLocator, basePath, locator, fields, resolveParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of FilesDto</returns>
        public ApiResponse< FilesDto > GetRoot2WithHttpInfo (string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetRoot2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoot2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of FilesDto</returns>
        public async System.Threading.Tasks.Task<FilesDto> GetRoot2Async (string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null)
        {
             ApiResponse<FilesDto> localVarResponse = await GetRoot2AsyncWithHttpInfo(btLocator, basePath, locator, fields, resolveParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse (FilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FilesDto>> GetRoot2AsyncWithHttpInfo (string btLocator, string basePath = null, string locator = null, string fields = null, bool? resolveParameters = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetRoot2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoot2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>string</returns>
        public string GetSettingsFile (string btLocator)
        {
             ApiResponse<string> localVarResponse = GetSettingsFileWithHttpInfo(btLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetSettingsFileWithHttpInfo (string btLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetSettingsFile");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/settingsFile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettingsFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetSettingsFileAsync (string btLocator)
        {
             ApiResponse<string> localVarResponse = await GetSettingsFileAsyncWithHttpInfo(btLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetSettingsFileAsyncWithHttpInfo (string btLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetSettingsFile");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/settingsFile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettingsFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>SnapshotDependencyDto</returns>
        public SnapshotDependencyDto GetSnapshotDep (string btLocator, string snapshotDepLocator, string fields = null)
        {
             ApiResponse<SnapshotDependencyDto> localVarResponse = GetSnapshotDepWithHttpInfo(btLocator, snapshotDepLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of SnapshotDependencyDto</returns>
        public ApiResponse< SnapshotDependencyDto > GetSnapshotDepWithHttpInfo (string btLocator, string snapshotDepLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetSnapshotDep");
            // verify the required parameter 'snapshotDepLocator' is set
            if (snapshotDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'snapshotDepLocator' when calling BuildTypeApi->GetSnapshotDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (snapshotDepLocator != null) localVarPathParams.Add("snapshotDepLocator", this.Configuration.ApiClient.ParameterToString(snapshotDepLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSnapshotDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnapshotDependencyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnapshotDependencyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnapshotDependencyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of SnapshotDependencyDto</returns>
        public async System.Threading.Tasks.Task<SnapshotDependencyDto> GetSnapshotDepAsync (string btLocator, string snapshotDepLocator, string fields = null)
        {
             ApiResponse<SnapshotDependencyDto> localVarResponse = await GetSnapshotDepAsyncWithHttpInfo(btLocator, snapshotDepLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (SnapshotDependencyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SnapshotDependencyDto>> GetSnapshotDepAsyncWithHttpInfo (string btLocator, string snapshotDepLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetSnapshotDep");
            // verify the required parameter 'snapshotDepLocator' is set
            if (snapshotDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'snapshotDepLocator' when calling BuildTypeApi->GetSnapshotDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (snapshotDepLocator != null) localVarPathParams.Add("snapshotDepLocator", this.Configuration.ApiClient.ParameterToString(snapshotDepLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSnapshotDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnapshotDependencyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnapshotDependencyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnapshotDependencyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>SnapshotDependenciesDto</returns>
        public SnapshotDependenciesDto GetSnapshotDeps (string btLocator, string fields = null)
        {
             ApiResponse<SnapshotDependenciesDto> localVarResponse = GetSnapshotDepsWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of SnapshotDependenciesDto</returns>
        public ApiResponse< SnapshotDependenciesDto > GetSnapshotDepsWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetSnapshotDeps");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSnapshotDeps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnapshotDependenciesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnapshotDependenciesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnapshotDependenciesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of SnapshotDependenciesDto</returns>
        public async System.Threading.Tasks.Task<SnapshotDependenciesDto> GetSnapshotDepsAsync (string btLocator, string fields = null)
        {
             ApiResponse<SnapshotDependenciesDto> localVarResponse = await GetSnapshotDepsAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (SnapshotDependenciesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SnapshotDependenciesDto>> GetSnapshotDepsAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetSnapshotDeps");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSnapshotDeps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnapshotDependenciesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnapshotDependenciesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnapshotDependenciesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>StepDto</returns>
        public StepDto GetStep (string btLocator, string stepId, string fields = null)
        {
             ApiResponse<StepDto> localVarResponse = GetStepWithHttpInfo(btLocator, stepId, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of StepDto</returns>
        public ApiResponse< StepDto > GetStepWithHttpInfo (string btLocator, string stepId, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetStep");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->GetStep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StepDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StepDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StepDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of StepDto</returns>
        public async System.Threading.Tasks.Task<StepDto> GetStepAsync (string btLocator, string stepId, string fields = null)
        {
             ApiResponse<StepDto> localVarResponse = await GetStepAsyncWithHttpInfo(btLocator, stepId, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (StepDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StepDto>> GetStepAsyncWithHttpInfo (string btLocator, string stepId, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetStep");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->GetStep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StepDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StepDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StepDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <returns>string</returns>
        public string GetStepParameter (string btLocator, string stepId, string parameterName)
        {
             ApiResponse<string> localVarResponse = GetStepParameterWithHttpInfo(btLocator, stepId, parameterName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetStepParameterWithHttpInfo (string btLocator, string stepId, string parameterName)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetStepParameter");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->GetStepParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling BuildTypeApi->GetStepParameter");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStepParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetStepParameterAsync (string btLocator, string stepId, string parameterName)
        {
             ApiResponse<string> localVarResponse = await GetStepParameterAsyncWithHttpInfo(btLocator, stepId, parameterName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetStepParameterAsyncWithHttpInfo (string btLocator, string stepId, string parameterName)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetStepParameter");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->GetStepParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling BuildTypeApi->GetStepParameter");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStepParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        public PropertiesDto GetStepParameters (string btLocator, string stepId, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = GetStepParametersWithHttpInfo(btLocator, stepId, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        public ApiResponse< PropertiesDto > GetStepParametersWithHttpInfo (string btLocator, string stepId, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetStepParameters");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->GetStepParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStepParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        public async System.Threading.Tasks.Task<PropertiesDto> GetStepParametersAsync (string btLocator, string stepId, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = await GetStepParametersAsyncWithHttpInfo(btLocator, stepId, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> GetStepParametersAsyncWithHttpInfo (string btLocator, string stepId, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetStepParameters");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->GetStepParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStepParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <returns>string</returns>
        public string GetStepSetting (string btLocator, string stepId, string fieldName)
        {
             ApiResponse<string> localVarResponse = GetStepSettingWithHttpInfo(btLocator, stepId, fieldName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetStepSettingWithHttpInfo (string btLocator, string stepId, string fieldName)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetStepSetting");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->GetStepSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->GetStepSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStepSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetStepSettingAsync (string btLocator, string stepId, string fieldName)
        {
             ApiResponse<string> localVarResponse = await GetStepSettingAsyncWithHttpInfo(btLocator, stepId, fieldName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetStepSettingAsyncWithHttpInfo (string btLocator, string stepId, string fieldName)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetStepSetting");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->GetStepSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->GetStepSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStepSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>StepsDto</returns>
        public StepsDto GetSteps (string btLocator, string fields = null)
        {
             ApiResponse<StepsDto> localVarResponse = GetStepsWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of StepsDto</returns>
        public ApiResponse< StepsDto > GetStepsWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetSteps");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StepsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StepsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StepsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of StepsDto</returns>
        public async System.Threading.Tasks.Task<StepsDto> GetStepsAsync (string btLocator, string fields = null)
        {
             ApiResponse<StepsDto> localVarResponse = await GetStepsAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (StepsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StepsDto>> GetStepsAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetSteps");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StepsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StepsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StepsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        public BuildTypeDto GetTemplate (string btLocator, string templateLocator, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = GetTemplateWithHttpInfo(btLocator, templateLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        public ApiResponse< BuildTypeDto > GetTemplateWithHttpInfo (string btLocator, string templateLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetTemplate");
            // verify the required parameter 'templateLocator' is set
            if (templateLocator == null)
                throw new ApiException(400, "Missing required parameter 'templateLocator' when calling BuildTypeApi->GetTemplate");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (templateLocator != null) localVarPathParams.Add("templateLocator", this.Configuration.ApiClient.ParameterToString(templateLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        public async System.Threading.Tasks.Task<BuildTypeDto> GetTemplateAsync (string btLocator, string templateLocator, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = await GetTemplateAsyncWithHttpInfo(btLocator, templateLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> GetTemplateAsyncWithHttpInfo (string btLocator, string templateLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetTemplate");
            // verify the required parameter 'templateLocator' is set
            if (templateLocator == null)
                throw new ApiException(400, "Missing required parameter 'templateLocator' when calling BuildTypeApi->GetTemplate");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (templateLocator != null) localVarPathParams.Add("templateLocator", this.Configuration.ApiClient.ParameterToString(templateLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        public BuildTypesDto GetTemplates (string btLocator, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = GetTemplatesWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        public ApiResponse< BuildTypesDto > GetTemplatesWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetTemplates");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        public async System.Threading.Tasks.Task<BuildTypesDto> GetTemplatesAsync (string btLocator, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = await GetTemplatesAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> GetTemplatesAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetTemplates");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>TriggerDto</returns>
        public TriggerDto GetTrigger (string btLocator, string triggerLocator, string fields = null)
        {
             ApiResponse<TriggerDto> localVarResponse = GetTriggerWithHttpInfo(btLocator, triggerLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of TriggerDto</returns>
        public ApiResponse< TriggerDto > GetTriggerWithHttpInfo (string btLocator, string triggerLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetTrigger");
            // verify the required parameter 'triggerLocator' is set
            if (triggerLocator == null)
                throw new ApiException(400, "Missing required parameter 'triggerLocator' when calling BuildTypeApi->GetTrigger");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (triggerLocator != null) localVarPathParams.Add("triggerLocator", this.Configuration.ApiClient.ParameterToString(triggerLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TriggerDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TriggerDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TriggerDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of TriggerDto</returns>
        public async System.Threading.Tasks.Task<TriggerDto> GetTriggerAsync (string btLocator, string triggerLocator, string fields = null)
        {
             ApiResponse<TriggerDto> localVarResponse = await GetTriggerAsyncWithHttpInfo(btLocator, triggerLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (TriggerDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TriggerDto>> GetTriggerAsyncWithHttpInfo (string btLocator, string triggerLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetTrigger");
            // verify the required parameter 'triggerLocator' is set
            if (triggerLocator == null)
                throw new ApiException(400, "Missing required parameter 'triggerLocator' when calling BuildTypeApi->GetTrigger");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (triggerLocator != null) localVarPathParams.Add("triggerLocator", this.Configuration.ApiClient.ParameterToString(triggerLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TriggerDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TriggerDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TriggerDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>string</returns>
        public string GetTriggerSetting (string btLocator, string triggerLocator, string fieldName)
        {
             ApiResponse<string> localVarResponse = GetTriggerSettingWithHttpInfo(btLocator, triggerLocator, fieldName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetTriggerSettingWithHttpInfo (string btLocator, string triggerLocator, string fieldName)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetTriggerSetting");
            // verify the required parameter 'triggerLocator' is set
            if (triggerLocator == null)
                throw new ApiException(400, "Missing required parameter 'triggerLocator' when calling BuildTypeApi->GetTriggerSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->GetTriggerSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (triggerLocator != null) localVarPathParams.Add("triggerLocator", this.Configuration.ApiClient.ParameterToString(triggerLocator)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggerSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetTriggerSettingAsync (string btLocator, string triggerLocator, string fieldName)
        {
             ApiResponse<string> localVarResponse = await GetTriggerSettingAsyncWithHttpInfo(btLocator, triggerLocator, fieldName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fieldName"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetTriggerSettingAsyncWithHttpInfo (string btLocator, string triggerLocator, string fieldName)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetTriggerSetting");
            // verify the required parameter 'triggerLocator' is set
            if (triggerLocator == null)
                throw new ApiException(400, "Missing required parameter 'triggerLocator' when calling BuildTypeApi->GetTriggerSetting");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling BuildTypeApi->GetTriggerSetting");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (triggerLocator != null) localVarPathParams.Add("triggerLocator", this.Configuration.ApiClient.ParameterToString(triggerLocator)); // path parameter
            if (fieldName != null) localVarPathParams.Add("fieldName", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggerSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>TriggersDto</returns>
        public TriggersDto GetTriggers (string btLocator, string fields = null)
        {
             ApiResponse<TriggersDto> localVarResponse = GetTriggersWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of TriggersDto</returns>
        public ApiResponse< TriggersDto > GetTriggersWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetTriggers");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TriggersDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TriggersDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TriggersDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of TriggersDto</returns>
        public async System.Threading.Tasks.Task<TriggersDto> GetTriggersAsync (string btLocator, string fields = null)
        {
             ApiResponse<TriggersDto> localVarResponse = await GetTriggersAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (TriggersDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TriggersDto>> GetTriggersAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetTriggers");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TriggersDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TriggersDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TriggersDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootEntriesDto</returns>
        public VcsRootEntriesDto GetVcsRootEntries (string btLocator, string fields = null)
        {
             ApiResponse<VcsRootEntriesDto> localVarResponse = GetVcsRootEntriesWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootEntriesDto</returns>
        public ApiResponse< VcsRootEntriesDto > GetVcsRootEntriesWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetVcsRootEntries");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVcsRootEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootEntriesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootEntriesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootEntriesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootEntriesDto</returns>
        public async System.Threading.Tasks.Task<VcsRootEntriesDto> GetVcsRootEntriesAsync (string btLocator, string fields = null)
        {
             ApiResponse<VcsRootEntriesDto> localVarResponse = await GetVcsRootEntriesAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootEntriesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsRootEntriesDto>> GetVcsRootEntriesAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetVcsRootEntries");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVcsRootEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootEntriesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootEntriesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootEntriesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootEntryDto</returns>
        public VcsRootEntryDto GetVcsRootEntry (string btLocator, string vcsRootLocator, string fields = null)
        {
             ApiResponse<VcsRootEntryDto> localVarResponse = GetVcsRootEntryWithHttpInfo(btLocator, vcsRootLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootEntryDto</returns>
        public ApiResponse< VcsRootEntryDto > GetVcsRootEntryWithHttpInfo (string btLocator, string vcsRootLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetVcsRootEntry");
            // verify the required parameter 'vcsRootLocator' is set
            if (vcsRootLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootLocator' when calling BuildTypeApi->GetVcsRootEntry");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (vcsRootLocator != null) localVarPathParams.Add("vcsRootLocator", this.Configuration.ApiClient.ParameterToString(vcsRootLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVcsRootEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootEntryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootEntryDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootEntryDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootEntryDto</returns>
        public async System.Threading.Tasks.Task<VcsRootEntryDto> GetVcsRootEntryAsync (string btLocator, string vcsRootLocator, string fields = null)
        {
             ApiResponse<VcsRootEntryDto> localVarResponse = await GetVcsRootEntryAsyncWithHttpInfo(btLocator, vcsRootLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootEntryDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsRootEntryDto>> GetVcsRootEntryAsyncWithHttpInfo (string btLocator, string vcsRootLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetVcsRootEntry");
            // verify the required parameter 'vcsRootLocator' is set
            if (vcsRootLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootLocator' when calling BuildTypeApi->GetVcsRootEntry");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (vcsRootLocator != null) localVarPathParams.Add("vcsRootLocator", this.Configuration.ApiClient.ParameterToString(vcsRootLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVcsRootEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootEntryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootEntryDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootEntryDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>string</returns>
        public string GetVcsRootEntryCheckoutRules (string btLocator, string vcsRootLocator)
        {
             ApiResponse<string> localVarResponse = GetVcsRootEntryCheckoutRulesWithHttpInfo(btLocator, vcsRootLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetVcsRootEntryCheckoutRulesWithHttpInfo (string btLocator, string vcsRootLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetVcsRootEntryCheckoutRules");
            // verify the required parameter 'vcsRootLocator' is set
            if (vcsRootLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootLocator' when calling BuildTypeApi->GetVcsRootEntryCheckoutRules");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (vcsRootLocator != null) localVarPathParams.Add("vcsRootLocator", this.Configuration.ApiClient.ParameterToString(vcsRootLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVcsRootEntryCheckoutRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetVcsRootEntryCheckoutRulesAsync (string btLocator, string vcsRootLocator)
        {
             ApiResponse<string> localVarResponse = await GetVcsRootEntryCheckoutRulesAsyncWithHttpInfo(btLocator, vcsRootLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetVcsRootEntryCheckoutRulesAsyncWithHttpInfo (string btLocator, string vcsRootLocator)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetVcsRootEntryCheckoutRules");
            // verify the required parameter 'vcsRootLocator' is set
            if (vcsRootLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootLocator' when calling BuildTypeApi->GetVcsRootEntryCheckoutRules");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (vcsRootLocator != null) localVarPathParams.Add("vcsRootLocator", this.Configuration.ApiClient.ParameterToString(vcsRootLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVcsRootEntryCheckoutRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns></returns>
        public void GetZipped2 (string path, string btLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null)
        {
             GetZipped2WithHttpInfo(path, btLocator, basePath, locator, name, resolveParameters);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetZipped2WithHttpInfo (string path, string btLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildTypeApi->GetZipped2");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetZipped2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/archived{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZipped2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetZipped2Async (string path, string btLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null)
        {
             await GetZipped2AsyncWithHttpInfo(path, btLocator, basePath, locator, name, resolveParameters);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="btLocator"></param>
        /// <param name="basePath"> (optional)</param>
        /// <param name="locator"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="resolveParameters"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetZipped2AsyncWithHttpInfo (string path, string btLocator, string basePath = null, string locator = null, string name = null, bool? resolveParameters = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling BuildTypeApi->GetZipped2");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->GetZipped2");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs/files/latest/archived{path}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (path != null) localVarPathParams.Add("path", this.Configuration.ApiClient.ParameterToString(path)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (basePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "basePath", basePath)); // query parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (resolveParameters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolveParameters", resolveParameters)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZipped2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns></returns>
        public void RemoveAllTemplates (string btLocator, bool? inlineSettings = null)
        {
             RemoveAllTemplatesWithHttpInfo(btLocator, inlineSettings);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveAllTemplatesWithHttpInfo (string btLocator, bool? inlineSettings = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->RemoveAllTemplates");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (inlineSettings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inlineSettings", inlineSettings)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAllTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAllTemplatesAsync (string btLocator, bool? inlineSettings = null)
        {
             await RemoveAllTemplatesAsyncWithHttpInfo(btLocator, inlineSettings);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAllTemplatesAsyncWithHttpInfo (string btLocator, bool? inlineSettings = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->RemoveAllTemplates");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (inlineSettings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inlineSettings", inlineSettings)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAllTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns></returns>
        public void RemoveTemplate (string btLocator, string templateLocator, bool? inlineSettings = null)
        {
             RemoveTemplateWithHttpInfo(btLocator, templateLocator, inlineSettings);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveTemplateWithHttpInfo (string btLocator, string templateLocator, bool? inlineSettings = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->RemoveTemplate");
            // verify the required parameter 'templateLocator' is set
            if (templateLocator == null)
                throw new ApiException(400, "Missing required parameter 'templateLocator' when calling BuildTypeApi->RemoveTemplate");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (templateLocator != null) localVarPathParams.Add("templateLocator", this.Configuration.ApiClient.ParameterToString(templateLocator)); // path parameter
            if (inlineSettings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inlineSettings", inlineSettings)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveTemplateAsync (string btLocator, string templateLocator, bool? inlineSettings = null)
        {
             await RemoveTemplateAsyncWithHttpInfo(btLocator, templateLocator, inlineSettings);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="templateLocator"></param>
        /// <param name="inlineSettings"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveTemplateAsyncWithHttpInfo (string btLocator, string templateLocator, bool? inlineSettings = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->RemoveTemplate");
            // verify the required parameter 'templateLocator' is set
            if (templateLocator == null)
                throw new ApiException(400, "Missing required parameter 'templateLocator' when calling BuildTypeApi->RemoveTemplate");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (templateLocator != null) localVarPathParams.Add("templateLocator", this.Configuration.ApiClient.ParameterToString(templateLocator)); // path parameter
            if (inlineSettings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inlineSettings", inlineSettings)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AgentRequirementDto</returns>
        public AgentRequirementDto ReplaceAgentRequirement (string btLocator, string agentRequirementLocator, string fields = null, AgentRequirementDto body = null)
        {
             ApiResponse<AgentRequirementDto> localVarResponse = ReplaceAgentRequirementWithHttpInfo(btLocator, agentRequirementLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AgentRequirementDto</returns>
        public ApiResponse< AgentRequirementDto > ReplaceAgentRequirementWithHttpInfo (string btLocator, string agentRequirementLocator, string fields = null, AgentRequirementDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceAgentRequirement");
            // verify the required parameter 'agentRequirementLocator' is set
            if (agentRequirementLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentRequirementLocator' when calling BuildTypeApi->ReplaceAgentRequirement");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (agentRequirementLocator != null) localVarPathParams.Add("agentRequirementLocator", this.Configuration.ApiClient.ParameterToString(agentRequirementLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAgentRequirement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentRequirementDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentRequirementDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentRequirementDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AgentRequirementDto</returns>
        public async System.Threading.Tasks.Task<AgentRequirementDto> ReplaceAgentRequirementAsync (string btLocator, string agentRequirementLocator, string fields = null, AgentRequirementDto body = null)
        {
             ApiResponse<AgentRequirementDto> localVarResponse = await ReplaceAgentRequirementAsyncWithHttpInfo(btLocator, agentRequirementLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="agentRequirementLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentRequirementDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentRequirementDto>> ReplaceAgentRequirementAsyncWithHttpInfo (string btLocator, string agentRequirementLocator, string fields = null, AgentRequirementDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceAgentRequirement");
            // verify the required parameter 'agentRequirementLocator' is set
            if (agentRequirementLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentRequirementLocator' when calling BuildTypeApi->ReplaceAgentRequirement");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (agentRequirementLocator != null) localVarPathParams.Add("agentRequirementLocator", this.Configuration.ApiClient.ParameterToString(agentRequirementLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAgentRequirement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentRequirementDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentRequirementDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentRequirementDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AgentRequirementsDto</returns>
        public AgentRequirementsDto ReplaceAgentRequirements (string btLocator, string fields = null, AgentRequirementsDto body = null)
        {
             ApiResponse<AgentRequirementsDto> localVarResponse = ReplaceAgentRequirementsWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AgentRequirementsDto</returns>
        public ApiResponse< AgentRequirementsDto > ReplaceAgentRequirementsWithHttpInfo (string btLocator, string fields = null, AgentRequirementsDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceAgentRequirements");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAgentRequirements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentRequirementsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentRequirementsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentRequirementsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AgentRequirementsDto</returns>
        public async System.Threading.Tasks.Task<AgentRequirementsDto> ReplaceAgentRequirementsAsync (string btLocator, string fields = null, AgentRequirementsDto body = null)
        {
             ApiResponse<AgentRequirementsDto> localVarResponse = await ReplaceAgentRequirementsAsyncWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentRequirementsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentRequirementsDto>> ReplaceAgentRequirementsAsyncWithHttpInfo (string btLocator, string fields = null, AgentRequirementsDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceAgentRequirements");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/agent-requirements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAgentRequirements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentRequirementsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentRequirementsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentRequirementsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ArtifactDependencyDto</returns>
        public ArtifactDependencyDto ReplaceArtifactDep (string btLocator, string artifactDepLocator, string fields = null, ArtifactDependencyDto body = null)
        {
             ApiResponse<ArtifactDependencyDto> localVarResponse = ReplaceArtifactDepWithHttpInfo(btLocator, artifactDepLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ArtifactDependencyDto</returns>
        public ApiResponse< ArtifactDependencyDto > ReplaceArtifactDepWithHttpInfo (string btLocator, string artifactDepLocator, string fields = null, ArtifactDependencyDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceArtifactDep");
            // verify the required parameter 'artifactDepLocator' is set
            if (artifactDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'artifactDepLocator' when calling BuildTypeApi->ReplaceArtifactDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (artifactDepLocator != null) localVarPathParams.Add("artifactDepLocator", this.Configuration.ApiClient.ParameterToString(artifactDepLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceArtifactDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArtifactDependencyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArtifactDependencyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArtifactDependencyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ArtifactDependencyDto</returns>
        public async System.Threading.Tasks.Task<ArtifactDependencyDto> ReplaceArtifactDepAsync (string btLocator, string artifactDepLocator, string fields = null, ArtifactDependencyDto body = null)
        {
             ApiResponse<ArtifactDependencyDto> localVarResponse = await ReplaceArtifactDepAsyncWithHttpInfo(btLocator, artifactDepLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="artifactDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ArtifactDependencyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArtifactDependencyDto>> ReplaceArtifactDepAsyncWithHttpInfo (string btLocator, string artifactDepLocator, string fields = null, ArtifactDependencyDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceArtifactDep");
            // verify the required parameter 'artifactDepLocator' is set
            if (artifactDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'artifactDepLocator' when calling BuildTypeApi->ReplaceArtifactDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (artifactDepLocator != null) localVarPathParams.Add("artifactDepLocator", this.Configuration.ApiClient.ParameterToString(artifactDepLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceArtifactDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArtifactDependencyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArtifactDependencyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArtifactDependencyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ArtifactDependenciesDto</returns>
        public ArtifactDependenciesDto ReplaceArtifactDeps (string btLocator, string fields = null, ArtifactDependenciesDto body = null)
        {
             ApiResponse<ArtifactDependenciesDto> localVarResponse = ReplaceArtifactDepsWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ArtifactDependenciesDto</returns>
        public ApiResponse< ArtifactDependenciesDto > ReplaceArtifactDepsWithHttpInfo (string btLocator, string fields = null, ArtifactDependenciesDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceArtifactDeps");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceArtifactDeps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArtifactDependenciesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArtifactDependenciesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArtifactDependenciesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ArtifactDependenciesDto</returns>
        public async System.Threading.Tasks.Task<ArtifactDependenciesDto> ReplaceArtifactDepsAsync (string btLocator, string fields = null, ArtifactDependenciesDto body = null)
        {
             ApiResponse<ArtifactDependenciesDto> localVarResponse = await ReplaceArtifactDepsAsyncWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ArtifactDependenciesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArtifactDependenciesDto>> ReplaceArtifactDepsAsyncWithHttpInfo (string btLocator, string fields = null, ArtifactDependenciesDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceArtifactDeps");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/artifact-dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceArtifactDeps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArtifactDependenciesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ArtifactDependenciesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArtifactDependenciesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FeatureDto</returns>
        public FeatureDto ReplaceFeature (string btLocator, string featureId, string fields = null, FeatureDto body = null)
        {
             ApiResponse<FeatureDto> localVarResponse = ReplaceFeatureWithHttpInfo(btLocator, featureId, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FeatureDto</returns>
        public ApiResponse< FeatureDto > ReplaceFeatureWithHttpInfo (string btLocator, string featureId, string fields = null, FeatureDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceFeature");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->ReplaceFeature");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FeatureDto</returns>
        public async System.Threading.Tasks.Task<FeatureDto> ReplaceFeatureAsync (string btLocator, string featureId, string fields = null, FeatureDto body = null)
        {
             ApiResponse<FeatureDto> localVarResponse = await ReplaceFeatureAsyncWithHttpInfo(btLocator, featureId, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FeatureDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureDto>> ReplaceFeatureAsyncWithHttpInfo (string btLocator, string featureId, string fields = null, FeatureDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceFeature");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->ReplaceFeature");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        public PropertiesDto ReplaceFeatureParameters (string btLocator, string featureId, PropertiesDto body = null, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = ReplaceFeatureParametersWithHttpInfo(btLocator, featureId, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        public ApiResponse< PropertiesDto > ReplaceFeatureParametersWithHttpInfo (string btLocator, string featureId, PropertiesDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceFeatureParameters");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->ReplaceFeatureParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceFeatureParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        public async System.Threading.Tasks.Task<PropertiesDto> ReplaceFeatureParametersAsync (string btLocator, string featureId, PropertiesDto body = null, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = await ReplaceFeatureParametersAsyncWithHttpInfo(btLocator, featureId, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="featureId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> ReplaceFeatureParametersAsyncWithHttpInfo (string btLocator, string featureId, PropertiesDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceFeatureParameters");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling BuildTypeApi->ReplaceFeatureParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (featureId != null) localVarPathParams.Add("featureId", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceFeatureParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>FeaturesDto</returns>
        public FeaturesDto ReplaceFeatures (string btLocator, string fields = null, FeaturesDto body = null)
        {
             ApiResponse<FeaturesDto> localVarResponse = ReplaceFeaturesWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FeaturesDto</returns>
        public ApiResponse< FeaturesDto > ReplaceFeaturesWithHttpInfo (string btLocator, string fields = null, FeaturesDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceFeatures");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeaturesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeaturesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeaturesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FeaturesDto</returns>
        public async System.Threading.Tasks.Task<FeaturesDto> ReplaceFeaturesAsync (string btLocator, string fields = null, FeaturesDto body = null)
        {
             ApiResponse<FeaturesDto> localVarResponse = await ReplaceFeaturesAsyncWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FeaturesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeaturesDto>> ReplaceFeaturesAsyncWithHttpInfo (string btLocator, string fields = null, FeaturesDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceFeatures");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeaturesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeaturesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeaturesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SnapshotDependencyDto</returns>
        public SnapshotDependencyDto ReplaceSnapshotDep (string btLocator, string snapshotDepLocator, string fields = null, SnapshotDependencyDto body = null)
        {
             ApiResponse<SnapshotDependencyDto> localVarResponse = ReplaceSnapshotDepWithHttpInfo(btLocator, snapshotDepLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SnapshotDependencyDto</returns>
        public ApiResponse< SnapshotDependencyDto > ReplaceSnapshotDepWithHttpInfo (string btLocator, string snapshotDepLocator, string fields = null, SnapshotDependencyDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceSnapshotDep");
            // verify the required parameter 'snapshotDepLocator' is set
            if (snapshotDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'snapshotDepLocator' when calling BuildTypeApi->ReplaceSnapshotDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (snapshotDepLocator != null) localVarPathParams.Add("snapshotDepLocator", this.Configuration.ApiClient.ParameterToString(snapshotDepLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceSnapshotDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnapshotDependencyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnapshotDependencyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnapshotDependencyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SnapshotDependencyDto</returns>
        public async System.Threading.Tasks.Task<SnapshotDependencyDto> ReplaceSnapshotDepAsync (string btLocator, string snapshotDepLocator, string fields = null, SnapshotDependencyDto body = null)
        {
             ApiResponse<SnapshotDependencyDto> localVarResponse = await ReplaceSnapshotDepAsyncWithHttpInfo(btLocator, snapshotDepLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="snapshotDepLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SnapshotDependencyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SnapshotDependencyDto>> ReplaceSnapshotDepAsyncWithHttpInfo (string btLocator, string snapshotDepLocator, string fields = null, SnapshotDependencyDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceSnapshotDep");
            // verify the required parameter 'snapshotDepLocator' is set
            if (snapshotDepLocator == null)
                throw new ApiException(400, "Missing required parameter 'snapshotDepLocator' when calling BuildTypeApi->ReplaceSnapshotDep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (snapshotDepLocator != null) localVarPathParams.Add("snapshotDepLocator", this.Configuration.ApiClient.ParameterToString(snapshotDepLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceSnapshotDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnapshotDependencyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnapshotDependencyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnapshotDependencyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SnapshotDependenciesDto</returns>
        public SnapshotDependenciesDto ReplaceSnapshotDeps (string btLocator, string fields = null, SnapshotDependenciesDto body = null)
        {
             ApiResponse<SnapshotDependenciesDto> localVarResponse = ReplaceSnapshotDepsWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SnapshotDependenciesDto</returns>
        public ApiResponse< SnapshotDependenciesDto > ReplaceSnapshotDepsWithHttpInfo (string btLocator, string fields = null, SnapshotDependenciesDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceSnapshotDeps");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceSnapshotDeps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnapshotDependenciesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnapshotDependenciesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnapshotDependenciesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SnapshotDependenciesDto</returns>
        public async System.Threading.Tasks.Task<SnapshotDependenciesDto> ReplaceSnapshotDepsAsync (string btLocator, string fields = null, SnapshotDependenciesDto body = null)
        {
             ApiResponse<SnapshotDependenciesDto> localVarResponse = await ReplaceSnapshotDepsAsyncWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SnapshotDependenciesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SnapshotDependenciesDto>> ReplaceSnapshotDepsAsyncWithHttpInfo (string btLocator, string fields = null, SnapshotDependenciesDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceSnapshotDeps");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/snapshot-dependencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceSnapshotDeps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnapshotDependenciesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnapshotDependenciesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnapshotDependenciesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>StepDto</returns>
        public StepDto ReplaceStep (string btLocator, string stepId, string fields = null, StepDto body = null)
        {
             ApiResponse<StepDto> localVarResponse = ReplaceStepWithHttpInfo(btLocator, stepId, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of StepDto</returns>
        public ApiResponse< StepDto > ReplaceStepWithHttpInfo (string btLocator, string stepId, string fields = null, StepDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceStep");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->ReplaceStep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StepDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StepDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StepDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of StepDto</returns>
        public async System.Threading.Tasks.Task<StepDto> ReplaceStepAsync (string btLocator, string stepId, string fields = null, StepDto body = null)
        {
             ApiResponse<StepDto> localVarResponse = await ReplaceStepAsyncWithHttpInfo(btLocator, stepId, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (StepDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StepDto>> ReplaceStepAsyncWithHttpInfo (string btLocator, string stepId, string fields = null, StepDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceStep");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->ReplaceStep");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StepDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StepDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StepDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        public PropertiesDto ReplaceStepParameters (string btLocator, string stepId, PropertiesDto body = null, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = ReplaceStepParametersWithHttpInfo(btLocator, stepId, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        public ApiResponse< PropertiesDto > ReplaceStepParametersWithHttpInfo (string btLocator, string stepId, PropertiesDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceStepParameters");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->ReplaceStepParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceStepParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        public async System.Threading.Tasks.Task<PropertiesDto> ReplaceStepParametersAsync (string btLocator, string stepId, PropertiesDto body = null, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = await ReplaceStepParametersAsyncWithHttpInfo(btLocator, stepId, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="stepId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> ReplaceStepParametersAsyncWithHttpInfo (string btLocator, string stepId, PropertiesDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceStepParameters");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling BuildTypeApi->ReplaceStepParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceStepParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>StepsDto</returns>
        public StepsDto ReplaceSteps (string btLocator, string fields = null, StepsDto body = null)
        {
             ApiResponse<StepsDto> localVarResponse = ReplaceStepsWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of StepsDto</returns>
        public ApiResponse< StepsDto > ReplaceStepsWithHttpInfo (string btLocator, string fields = null, StepsDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceSteps");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StepsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StepsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StepsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of StepsDto</returns>
        public async System.Threading.Tasks.Task<StepsDto> ReplaceStepsAsync (string btLocator, string fields = null, StepsDto body = null)
        {
             ApiResponse<StepsDto> localVarResponse = await ReplaceStepsAsyncWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (StepsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StepsDto>> ReplaceStepsAsyncWithHttpInfo (string btLocator, string fields = null, StepsDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceSteps");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StepsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StepsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StepsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TriggerDto</returns>
        public TriggerDto ReplaceTrigger (string btLocator, string triggerLocator, string fields = null, TriggerDto body = null)
        {
             ApiResponse<TriggerDto> localVarResponse = ReplaceTriggerWithHttpInfo(btLocator, triggerLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TriggerDto</returns>
        public ApiResponse< TriggerDto > ReplaceTriggerWithHttpInfo (string btLocator, string triggerLocator, string fields = null, TriggerDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceTrigger");
            // verify the required parameter 'triggerLocator' is set
            if (triggerLocator == null)
                throw new ApiException(400, "Missing required parameter 'triggerLocator' when calling BuildTypeApi->ReplaceTrigger");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (triggerLocator != null) localVarPathParams.Add("triggerLocator", this.Configuration.ApiClient.ParameterToString(triggerLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TriggerDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TriggerDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TriggerDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TriggerDto</returns>
        public async System.Threading.Tasks.Task<TriggerDto> ReplaceTriggerAsync (string btLocator, string triggerLocator, string fields = null, TriggerDto body = null)
        {
             ApiResponse<TriggerDto> localVarResponse = await ReplaceTriggerAsyncWithHttpInfo(btLocator, triggerLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="triggerLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TriggerDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TriggerDto>> ReplaceTriggerAsyncWithHttpInfo (string btLocator, string triggerLocator, string fields = null, TriggerDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceTrigger");
            // verify the required parameter 'triggerLocator' is set
            if (triggerLocator == null)
                throw new ApiException(400, "Missing required parameter 'triggerLocator' when calling BuildTypeApi->ReplaceTrigger");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (triggerLocator != null) localVarPathParams.Add("triggerLocator", this.Configuration.ApiClient.ParameterToString(triggerLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TriggerDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TriggerDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TriggerDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>TriggersDto</returns>
        public TriggersDto ReplaceTriggers (string btLocator, string fields = null, TriggersDto body = null)
        {
             ApiResponse<TriggersDto> localVarResponse = ReplaceTriggersWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TriggersDto</returns>
        public ApiResponse< TriggersDto > ReplaceTriggersWithHttpInfo (string btLocator, string fields = null, TriggersDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceTriggers");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TriggersDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TriggersDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TriggersDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TriggersDto</returns>
        public async System.Threading.Tasks.Task<TriggersDto> ReplaceTriggersAsync (string btLocator, string fields = null, TriggersDto body = null)
        {
             ApiResponse<TriggersDto> localVarResponse = await ReplaceTriggersAsyncWithHttpInfo(btLocator, fields, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TriggersDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TriggersDto>> ReplaceTriggersAsyncWithHttpInfo (string btLocator, string fields = null, TriggersDto body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceTriggers");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/triggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TriggersDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TriggersDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TriggersDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootEntriesDto</returns>
        public VcsRootEntriesDto ReplaceVcsRootEntries (string btLocator, VcsRootEntriesDto body = null, string fields = null)
        {
             ApiResponse<VcsRootEntriesDto> localVarResponse = ReplaceVcsRootEntriesWithHttpInfo(btLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootEntriesDto</returns>
        public ApiResponse< VcsRootEntriesDto > ReplaceVcsRootEntriesWithHttpInfo (string btLocator, VcsRootEntriesDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceVcsRootEntries");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceVcsRootEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootEntriesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootEntriesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootEntriesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootEntriesDto</returns>
        public async System.Threading.Tasks.Task<VcsRootEntriesDto> ReplaceVcsRootEntriesAsync (string btLocator, VcsRootEntriesDto body = null, string fields = null)
        {
             ApiResponse<VcsRootEntriesDto> localVarResponse = await ReplaceVcsRootEntriesAsyncWithHttpInfo(btLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootEntriesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsRootEntriesDto>> ReplaceVcsRootEntriesAsyncWithHttpInfo (string btLocator, VcsRootEntriesDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ReplaceVcsRootEntries");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceVcsRootEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootEntriesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootEntriesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootEntriesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BranchesDto</returns>
        public BranchesDto ServeBranches (string btLocator, string locator = null, string fields = null)
        {
             ApiResponse<BranchesDto> localVarResponse = ServeBranchesWithHttpInfo(btLocator, locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BranchesDto</returns>
        public ApiResponse< BranchesDto > ServeBranchesWithHttpInfo (string btLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBranches");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBranches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BranchesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BranchesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BranchesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BranchesDto</returns>
        public async System.Threading.Tasks.Task<BranchesDto> ServeBranchesAsync (string btLocator, string locator = null, string fields = null)
        {
             ApiResponse<BranchesDto> localVarResponse = await ServeBranchesAsyncWithHttpInfo(btLocator, locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BranchesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BranchesDto>> ServeBranchesAsyncWithHttpInfo (string btLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBranches");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBranches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BranchesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BranchesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BranchesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        public string ServeBuildField (string btLocator, string buildLocator, string field)
        {
             ApiResponse<string> localVarResponse = ServeBuildFieldWithHttpInfo(btLocator, buildLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServeBuildFieldWithHttpInfo (string btLocator, string buildLocator, string field)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBuildField");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildTypeApi->ServeBuildField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling BuildTypeApi->ServeBuildField");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/builds/{buildLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServeBuildFieldAsync (string btLocator, string buildLocator, string field)
        {
             ApiResponse<string> localVarResponse = await ServeBuildFieldAsyncWithHttpInfo(btLocator, buildLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServeBuildFieldAsyncWithHttpInfo (string btLocator, string buildLocator, string field)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBuildField");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildTypeApi->ServeBuildField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling BuildTypeApi->ServeBuildField");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/builds/{buildLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>TagsDto</returns>
        public TagsDto ServeBuildTypeBuildsTags (string btLocator, string field = null)
        {
             ApiResponse<TagsDto> localVarResponse = ServeBuildTypeBuildsTagsWithHttpInfo(btLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of TagsDto</returns>
        public ApiResponse< TagsDto > ServeBuildTypeBuildsTagsWithHttpInfo (string btLocator, string field = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBuildTypeBuildsTags");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/buildTags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildTypeBuildsTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of TagsDto</returns>
        public async System.Threading.Tasks.Task<TagsDto> ServeBuildTypeBuildsTagsAsync (string btLocator, string field = null)
        {
             ApiResponse<TagsDto> localVarResponse = await ServeBuildTypeBuildsTagsAsyncWithHttpInfo(btLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (TagsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagsDto>> ServeBuildTypeBuildsTagsAsyncWithHttpInfo (string btLocator, string field = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBuildTypeBuildsTags");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/buildTags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildTypeBuildsTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        public string ServeBuildTypeField (string btLocator, string field)
        {
             ApiResponse<string> localVarResponse = ServeBuildTypeFieldWithHttpInfo(btLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServeBuildTypeFieldWithHttpInfo (string btLocator, string field)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBuildTypeField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling BuildTypeApi->ServeBuildTypeField");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildTypeField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServeBuildTypeFieldAsync (string btLocator, string field)
        {
             ApiResponse<string> localVarResponse = await ServeBuildTypeFieldAsyncWithHttpInfo(btLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServeBuildTypeFieldAsyncWithHttpInfo (string btLocator, string field)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBuildTypeField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling BuildTypeApi->ServeBuildTypeField");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildTypeField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        public BuildTypeDto ServeBuildTypeXML (string btLocator, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = ServeBuildTypeXMLWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        public ApiResponse< BuildTypeDto > ServeBuildTypeXMLWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBuildTypeXML");

            var localVarPath = "/app/rest/buildTypes/{btLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildTypeXML", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        public async System.Threading.Tasks.Task<BuildTypeDto> ServeBuildTypeXMLAsync (string btLocator, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = await ServeBuildTypeXMLAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> ServeBuildTypeXMLAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBuildTypeXML");

            var localVarPath = "/app/rest/buildTypes/{btLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildTypeXML", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildDto</returns>
        public BuildDto ServeBuildWithProject (string btLocator, string buildLocator, string fields = null)
        {
             ApiResponse<BuildDto> localVarResponse = ServeBuildWithProjectWithHttpInfo(btLocator, buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildDto</returns>
        public ApiResponse< BuildDto > ServeBuildWithProjectWithHttpInfo (string btLocator, string buildLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBuildWithProject");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildTypeApi->ServeBuildWithProject");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/builds/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildWithProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildDto</returns>
        public async System.Threading.Tasks.Task<BuildDto> ServeBuildWithProjectAsync (string btLocator, string buildLocator, string fields = null)
        {
             ApiResponse<BuildDto> localVarResponse = await ServeBuildWithProjectAsyncWithHttpInfo(btLocator, buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildDto>> ServeBuildWithProjectAsyncWithHttpInfo (string btLocator, string buildLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBuildWithProject");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling BuildTypeApi->ServeBuildWithProject");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/builds/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildWithProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildsDto</returns>
        public BuildsDto ServeBuilds (string btLocator, string fields = null)
        {
             ApiResponse<BuildsDto> localVarResponse = ServeBuildsWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildsDto</returns>
        public ApiResponse< BuildsDto > ServeBuildsWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBuilds");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildsDto</returns>
        public async System.Threading.Tasks.Task<BuildsDto> ServeBuildsAsync (string btLocator, string fields = null)
        {
             ApiResponse<BuildsDto> localVarResponse = await ServeBuildsAsyncWithHttpInfo(btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildsDto>> ServeBuildsAsyncWithHttpInfo (string btLocator, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->ServeBuilds");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SetBuildTypeField (string btLocator, string field, string body = null)
        {
             ApiResponse<string> localVarResponse = SetBuildTypeFieldWithHttpInfo(btLocator, field, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetBuildTypeFieldWithHttpInfo (string btLocator, string field, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetBuildTypeField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling BuildTypeApi->SetBuildTypeField");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBuildTypeField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetBuildTypeFieldAsync (string btLocator, string field, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetBuildTypeFieldAsyncWithHttpInfo(btLocator, field, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetBuildTypeFieldAsyncWithHttpInfo (string btLocator, string field, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetBuildTypeField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling BuildTypeApi->SetBuildTypeField");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBuildTypeField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertyDto</returns>
        public PropertyDto SetParameter (string name, string btLocator, PropertyDto body = null, string fields = null)
        {
             ApiResponse<PropertyDto> localVarResponse = SetParameterWithHttpInfo(name, btLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertyDto</returns>
        public ApiResponse< PropertyDto > SetParameterWithHttpInfo (string name, string btLocator, PropertyDto body = null, string fields = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->SetParameter");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetParameter");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertyDto</returns>
        public async System.Threading.Tasks.Task<PropertyDto> SetParameterAsync (string name, string btLocator, PropertyDto body = null, string fields = null)
        {
             ApiResponse<PropertyDto> localVarResponse = await SetParameterAsyncWithHttpInfo(name, btLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyDto>> SetParameterAsyncWithHttpInfo (string name, string btLocator, PropertyDto body = null, string fields = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->SetParameter");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetParameter");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertyDto</returns>
        public PropertyDto SetParameter1 (string btLocator, PropertyDto body = null, string fields = null)
        {
             ApiResponse<PropertyDto> localVarResponse = SetParameter1WithHttpInfo(btLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertyDto</returns>
        public ApiResponse< PropertyDto > SetParameter1WithHttpInfo (string btLocator, PropertyDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetParameter1");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameter1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertyDto</returns>
        public async System.Threading.Tasks.Task<PropertyDto> SetParameter1Async (string btLocator, PropertyDto body = null, string fields = null)
        {
             ApiResponse<PropertyDto> localVarResponse = await SetParameter1AsyncWithHttpInfo(btLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyDto>> SetParameter1AsyncWithHttpInfo (string btLocator, PropertyDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetParameter1");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameter1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>TypeDto</returns>
        public TypeDto SetParameterType (string name, string btLocator, TypeDto body = null)
        {
             ApiResponse<TypeDto> localVarResponse = SetParameterTypeWithHttpInfo(name, btLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TypeDto</returns>
        public ApiResponse< TypeDto > SetParameterTypeWithHttpInfo (string name, string btLocator, TypeDto body = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->SetParameterType");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetParameterType");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameterType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TypeDto</returns>
        public async System.Threading.Tasks.Task<TypeDto> SetParameterTypeAsync (string name, string btLocator, TypeDto body = null)
        {
             ApiResponse<TypeDto> localVarResponse = await SetParameterTypeAsyncWithHttpInfo(name, btLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TypeDto>> SetParameterTypeAsyncWithHttpInfo (string name, string btLocator, TypeDto body = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->SetParameterType");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetParameterType");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameterType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SetParameterTypeRawValue (string name, string btLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = SetParameterTypeRawValueWithHttpInfo(name, btLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetParameterTypeRawValueWithHttpInfo (string name, string btLocator, string body = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->SetParameterTypeRawValue");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetParameterTypeRawValue");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameterTypeRawValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetParameterTypeRawValueAsync (string name, string btLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetParameterTypeRawValueAsyncWithHttpInfo(name, btLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetParameterTypeRawValueAsyncWithHttpInfo (string name, string btLocator, string body = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->SetParameterTypeRawValue");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetParameterTypeRawValue");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameterTypeRawValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SetParameterValueLong (string name, string btLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = SetParameterValueLongWithHttpInfo(name, btLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetParameterValueLongWithHttpInfo (string name, string btLocator, string body = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->SetParameterValueLong");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetParameterValueLong");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameterValueLong", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetParameterValueLongAsync (string name, string btLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetParameterValueLongAsyncWithHttpInfo(name, btLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetParameterValueLongAsyncWithHttpInfo (string name, string btLocator, string body = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BuildTypeApi->SetParameterValueLong");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetParameterValueLong");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters/{name}/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameterValueLong", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        public PropertiesDto SetParameters (string btLocator, PropertiesDto body = null, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = SetParametersWithHttpInfo(btLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        public ApiResponse< PropertiesDto > SetParametersWithHttpInfo (string btLocator, PropertiesDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        public async System.Threading.Tasks.Task<PropertiesDto> SetParametersAsync (string btLocator, PropertiesDto body = null, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = await SetParametersAsyncWithHttpInfo(btLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> SetParametersAsyncWithHttpInfo (string btLocator, PropertiesDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetParameters");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        public BuildTypesDto SetTemplates (string btLocator, BuildTypesDto body = null, bool? optimizeSettings = null, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = SetTemplatesWithHttpInfo(btLocator, body, optimizeSettings, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        public ApiResponse< BuildTypesDto > SetTemplatesWithHttpInfo (string btLocator, BuildTypesDto body = null, bool? optimizeSettings = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetTemplates");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (optimizeSettings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "optimizeSettings", optimizeSettings)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        public async System.Threading.Tasks.Task<BuildTypesDto> SetTemplatesAsync (string btLocator, BuildTypesDto body = null, bool? optimizeSettings = null, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = await SetTemplatesAsyncWithHttpInfo(btLocator, body, optimizeSettings, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="optimizeSettings"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> SetTemplatesAsyncWithHttpInfo (string btLocator, BuildTypesDto body = null, bool? optimizeSettings = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->SetTemplates");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (optimizeSettings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "optimizeSettings", optimizeSettings)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootEntryDto</returns>
        public VcsRootEntryDto UpdateVcsRootEntry (string btLocator, string vcsRootLocator, VcsRootEntryDto body = null, string fields = null)
        {
             ApiResponse<VcsRootEntryDto> localVarResponse = UpdateVcsRootEntryWithHttpInfo(btLocator, vcsRootLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootEntryDto</returns>
        public ApiResponse< VcsRootEntryDto > UpdateVcsRootEntryWithHttpInfo (string btLocator, string vcsRootLocator, VcsRootEntryDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->UpdateVcsRootEntry");
            // verify the required parameter 'vcsRootLocator' is set
            if (vcsRootLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootLocator' when calling BuildTypeApi->UpdateVcsRootEntry");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (vcsRootLocator != null) localVarPathParams.Add("vcsRootLocator", this.Configuration.ApiClient.ParameterToString(vcsRootLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVcsRootEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootEntryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootEntryDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootEntryDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootEntryDto</returns>
        public async System.Threading.Tasks.Task<VcsRootEntryDto> UpdateVcsRootEntryAsync (string btLocator, string vcsRootLocator, VcsRootEntryDto body = null, string fields = null)
        {
             ApiResponse<VcsRootEntryDto> localVarResponse = await UpdateVcsRootEntryAsyncWithHttpInfo(btLocator, vcsRootLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootEntryDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsRootEntryDto>> UpdateVcsRootEntryAsyncWithHttpInfo (string btLocator, string vcsRootLocator, VcsRootEntryDto body = null, string fields = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->UpdateVcsRootEntry");
            // verify the required parameter 'vcsRootLocator' is set
            if (vcsRootLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootLocator' when calling BuildTypeApi->UpdateVcsRootEntry");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (vcsRootLocator != null) localVarPathParams.Add("vcsRootLocator", this.Configuration.ApiClient.ParameterToString(vcsRootLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVcsRootEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootEntryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootEntryDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootEntryDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string UpdateVcsRootEntryCheckoutRules (string btLocator, string vcsRootLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = UpdateVcsRootEntryCheckoutRulesWithHttpInfo(btLocator, vcsRootLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > UpdateVcsRootEntryCheckoutRulesWithHttpInfo (string btLocator, string vcsRootLocator, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->UpdateVcsRootEntryCheckoutRules");
            // verify the required parameter 'vcsRootLocator' is set
            if (vcsRootLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootLocator' when calling BuildTypeApi->UpdateVcsRootEntryCheckoutRules");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (vcsRootLocator != null) localVarPathParams.Add("vcsRootLocator", this.Configuration.ApiClient.ParameterToString(vcsRootLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVcsRootEntryCheckoutRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UpdateVcsRootEntryCheckoutRulesAsync (string btLocator, string vcsRootLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = await UpdateVcsRootEntryCheckoutRulesAsyncWithHttpInfo(btLocator, vcsRootLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="btLocator"></param>
        /// <param name="vcsRootLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> UpdateVcsRootEntryCheckoutRulesAsyncWithHttpInfo (string btLocator, string vcsRootLocator, string body = null)
        {
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling BuildTypeApi->UpdateVcsRootEntryCheckoutRules");
            // verify the required parameter 'vcsRootLocator' is set
            if (vcsRootLocator == null)
                throw new ApiException(400, "Missing required parameter 'vcsRootLocator' when calling BuildTypeApi->UpdateVcsRootEntryCheckoutRules");

            var localVarPath = "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (vcsRootLocator != null) localVarPathParams.Add("vcsRootLocator", this.Configuration.ApiClient.ParameterToString(vcsRootLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVcsRootEntryCheckoutRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
