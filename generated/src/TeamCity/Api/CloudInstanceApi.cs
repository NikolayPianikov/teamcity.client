/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TeamCity.Client;
using TeamCity.Model;

namespace TeamCity.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICloudInstanceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CloudImageDto</returns>
        CloudImageDto ServeImage (string imageLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CloudImageDto</returns>
        ApiResponse<CloudImageDto> ServeImageWithHttpInfo (string imageLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CloudImagesDto</returns>
        CloudImagesDto ServeImages (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CloudImagesDto</returns>
        ApiResponse<CloudImagesDto> ServeImagesWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CloudInstanceDto</returns>
        CloudInstanceDto ServeInstance (string instanceLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CloudInstanceDto</returns>
        ApiResponse<CloudInstanceDto> ServeInstanceWithHttpInfo (string instanceLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CloudInstancesDto</returns>
        CloudInstancesDto ServeInstances (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CloudInstancesDto</returns>
        ApiResponse<CloudInstancesDto> ServeInstancesWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CloudProfileDto</returns>
        CloudProfileDto ServeProfile (string profileLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CloudProfileDto</returns>
        ApiResponse<CloudProfileDto> ServeProfileWithHttpInfo (string profileLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CloudProfilesDto</returns>
        CloudProfilesDto ServeProfiles (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CloudProfilesDto</returns>
        ApiResponse<CloudProfilesDto> ServeProfilesWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns></returns>
        void StartInstance (CloudInstanceDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StartInstanceWithHttpInfo (CloudInstanceDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <returns></returns>
        void StopInstance (string instanceLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StopInstanceWithHttpInfo (string instanceLocator);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CloudImageDto</returns>
        System.Threading.Tasks.Task<CloudImageDto> ServeImageAsync (string imageLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudImageDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudImageDto>> ServeImageAsyncWithHttpInfo (string imageLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CloudImagesDto</returns>
        System.Threading.Tasks.Task<CloudImagesDto> ServeImagesAsync (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudImagesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudImagesDto>> ServeImagesAsyncWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CloudInstanceDto</returns>
        System.Threading.Tasks.Task<CloudInstanceDto> ServeInstanceAsync (string instanceLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudInstanceDto>> ServeInstanceAsyncWithHttpInfo (string instanceLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CloudInstancesDto</returns>
        System.Threading.Tasks.Task<CloudInstancesDto> ServeInstancesAsync (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudInstancesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudInstancesDto>> ServeInstancesAsyncWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CloudProfileDto</returns>
        System.Threading.Tasks.Task<CloudProfileDto> ServeProfileAsync (string profileLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudProfileDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudProfileDto>> ServeProfileAsyncWithHttpInfo (string profileLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CloudProfilesDto</returns>
        System.Threading.Tasks.Task<CloudProfilesDto> ServeProfilesAsync (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudProfilesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudProfilesDto>> ServeProfilesAsyncWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StartInstanceAsync (CloudInstanceDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartInstanceAsyncWithHttpInfo (CloudInstanceDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StopInstanceAsync (string instanceLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StopInstanceAsyncWithHttpInfo (string instanceLocator);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CloudInstanceApi : ICloudInstanceApi
    {
        private TeamCity.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CloudInstanceApi(String basePath)
        {
            this.Configuration = new TeamCity.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudInstanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CloudInstanceApi(TeamCity.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TeamCity.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TeamCity.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TeamCity.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CloudImageDto</returns>
        public CloudImageDto ServeImage (string imageLocator, string fields = null)
        {
             ApiResponse<CloudImageDto> localVarResponse = ServeImageWithHttpInfo(imageLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CloudImageDto</returns>
        public ApiResponse< CloudImageDto > ServeImageWithHttpInfo (string imageLocator, string fields = null)
        {
            // verify the required parameter 'imageLocator' is set
            if (imageLocator == null)
                throw new ApiException(400, "Missing required parameter 'imageLocator' when calling CloudInstanceApi->ServeImage");

            var localVarPath = "/app/rest/cloud/images/{imageLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageLocator != null) localVarPathParams.Add("imageLocator", this.Configuration.ApiClient.ParameterToString(imageLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudImageDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudImageDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudImageDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CloudImageDto</returns>
        public async System.Threading.Tasks.Task<CloudImageDto> ServeImageAsync (string imageLocator, string fields = null)
        {
             ApiResponse<CloudImageDto> localVarResponse = await ServeImageAsyncWithHttpInfo(imageLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudImageDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudImageDto>> ServeImageAsyncWithHttpInfo (string imageLocator, string fields = null)
        {
            // verify the required parameter 'imageLocator' is set
            if (imageLocator == null)
                throw new ApiException(400, "Missing required parameter 'imageLocator' when calling CloudInstanceApi->ServeImage");

            var localVarPath = "/app/rest/cloud/images/{imageLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageLocator != null) localVarPathParams.Add("imageLocator", this.Configuration.ApiClient.ParameterToString(imageLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudImageDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudImageDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudImageDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CloudImagesDto</returns>
        public CloudImagesDto ServeImages (string locator = null, string fields = null)
        {
             ApiResponse<CloudImagesDto> localVarResponse = ServeImagesWithHttpInfo(locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CloudImagesDto</returns>
        public ApiResponse< CloudImagesDto > ServeImagesWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/cloud/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudImagesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudImagesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudImagesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CloudImagesDto</returns>
        public async System.Threading.Tasks.Task<CloudImagesDto> ServeImagesAsync (string locator = null, string fields = null)
        {
             ApiResponse<CloudImagesDto> localVarResponse = await ServeImagesAsyncWithHttpInfo(locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudImagesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudImagesDto>> ServeImagesAsyncWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/cloud/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudImagesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudImagesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudImagesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CloudInstanceDto</returns>
        public CloudInstanceDto ServeInstance (string instanceLocator, string fields = null)
        {
             ApiResponse<CloudInstanceDto> localVarResponse = ServeInstanceWithHttpInfo(instanceLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CloudInstanceDto</returns>
        public ApiResponse< CloudInstanceDto > ServeInstanceWithHttpInfo (string instanceLocator, string fields = null)
        {
            // verify the required parameter 'instanceLocator' is set
            if (instanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'instanceLocator' when calling CloudInstanceApi->ServeInstance");

            var localVarPath = "/app/rest/cloud/instances/{instanceLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceLocator != null) localVarPathParams.Add("instanceLocator", this.Configuration.ApiClient.ParameterToString(instanceLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudInstanceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudInstanceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudInstanceDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CloudInstanceDto</returns>
        public async System.Threading.Tasks.Task<CloudInstanceDto> ServeInstanceAsync (string instanceLocator, string fields = null)
        {
             ApiResponse<CloudInstanceDto> localVarResponse = await ServeInstanceAsyncWithHttpInfo(instanceLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudInstanceDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudInstanceDto>> ServeInstanceAsyncWithHttpInfo (string instanceLocator, string fields = null)
        {
            // verify the required parameter 'instanceLocator' is set
            if (instanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'instanceLocator' when calling CloudInstanceApi->ServeInstance");

            var localVarPath = "/app/rest/cloud/instances/{instanceLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceLocator != null) localVarPathParams.Add("instanceLocator", this.Configuration.ApiClient.ParameterToString(instanceLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudInstanceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudInstanceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudInstanceDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CloudInstancesDto</returns>
        public CloudInstancesDto ServeInstances (string locator = null, string fields = null)
        {
             ApiResponse<CloudInstancesDto> localVarResponse = ServeInstancesWithHttpInfo(locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CloudInstancesDto</returns>
        public ApiResponse< CloudInstancesDto > ServeInstancesWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/cloud/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudInstancesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudInstancesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudInstancesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CloudInstancesDto</returns>
        public async System.Threading.Tasks.Task<CloudInstancesDto> ServeInstancesAsync (string locator = null, string fields = null)
        {
             ApiResponse<CloudInstancesDto> localVarResponse = await ServeInstancesAsyncWithHttpInfo(locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudInstancesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudInstancesDto>> ServeInstancesAsyncWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/cloud/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudInstancesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudInstancesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudInstancesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CloudProfileDto</returns>
        public CloudProfileDto ServeProfile (string profileLocator, string fields = null)
        {
             ApiResponse<CloudProfileDto> localVarResponse = ServeProfileWithHttpInfo(profileLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CloudProfileDto</returns>
        public ApiResponse< CloudProfileDto > ServeProfileWithHttpInfo (string profileLocator, string fields = null)
        {
            // verify the required parameter 'profileLocator' is set
            if (profileLocator == null)
                throw new ApiException(400, "Missing required parameter 'profileLocator' when calling CloudInstanceApi->ServeProfile");

            var localVarPath = "/app/rest/cloud/profiles/{profileLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileLocator != null) localVarPathParams.Add("profileLocator", this.Configuration.ApiClient.ParameterToString(profileLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudProfileDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudProfileDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudProfileDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CloudProfileDto</returns>
        public async System.Threading.Tasks.Task<CloudProfileDto> ServeProfileAsync (string profileLocator, string fields = null)
        {
             ApiResponse<CloudProfileDto> localVarResponse = await ServeProfileAsyncWithHttpInfo(profileLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudProfileDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudProfileDto>> ServeProfileAsyncWithHttpInfo (string profileLocator, string fields = null)
        {
            // verify the required parameter 'profileLocator' is set
            if (profileLocator == null)
                throw new ApiException(400, "Missing required parameter 'profileLocator' when calling CloudInstanceApi->ServeProfile");

            var localVarPath = "/app/rest/cloud/profiles/{profileLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileLocator != null) localVarPathParams.Add("profileLocator", this.Configuration.ApiClient.ParameterToString(profileLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudProfileDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudProfileDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudProfileDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>CloudProfilesDto</returns>
        public CloudProfilesDto ServeProfiles (string locator = null, string fields = null)
        {
             ApiResponse<CloudProfilesDto> localVarResponse = ServeProfilesWithHttpInfo(locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of CloudProfilesDto</returns>
        public ApiResponse< CloudProfilesDto > ServeProfilesWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/cloud/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudProfilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudProfilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudProfilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of CloudProfilesDto</returns>
        public async System.Threading.Tasks.Task<CloudProfilesDto> ServeProfilesAsync (string locator = null, string fields = null)
        {
             ApiResponse<CloudProfilesDto> localVarResponse = await ServeProfilesAsyncWithHttpInfo(locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudProfilesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudProfilesDto>> ServeProfilesAsyncWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/cloud/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudProfilesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudProfilesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudProfilesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns></returns>
        public void StartInstance (CloudInstanceDto body = null, string fields = null)
        {
             StartInstanceWithHttpInfo(body, fields);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StartInstanceWithHttpInfo (CloudInstanceDto body = null, string fields = null)
        {

            var localVarPath = "/app/rest/cloud/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StartInstanceAsync (CloudInstanceDto body = null, string fields = null)
        {
             await StartInstanceAsyncWithHttpInfo(body, fields);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StartInstanceAsyncWithHttpInfo (CloudInstanceDto body = null, string fields = null)
        {

            var localVarPath = "/app/rest/cloud/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <returns></returns>
        public void StopInstance (string instanceLocator)
        {
             StopInstanceWithHttpInfo(instanceLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StopInstanceWithHttpInfo (string instanceLocator)
        {
            // verify the required parameter 'instanceLocator' is set
            if (instanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'instanceLocator' when calling CloudInstanceApi->StopInstance");

            var localVarPath = "/app/rest/cloud/instances/{instanceLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceLocator != null) localVarPathParams.Add("instanceLocator", this.Configuration.ApiClient.ParameterToString(instanceLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StopInstanceAsync (string instanceLocator)
        {
             await StopInstanceAsyncWithHttpInfo(instanceLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StopInstanceAsyncWithHttpInfo (string instanceLocator)
        {
            // verify the required parameter 'instanceLocator' is set
            if (instanceLocator == null)
                throw new ApiException(400, "Missing required parameter 'instanceLocator' when calling CloudInstanceApi->StopInstance");

            var localVarPath = "/app/rest/cloud/instances/{instanceLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceLocator != null) localVarPathParams.Add("instanceLocator", this.Configuration.ApiClient.ParameterToString(instanceLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
