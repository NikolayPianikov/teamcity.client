/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TeamCity.Client;
using TeamCity.Model;

namespace TeamCity.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChangeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>EntriesDto</returns>
        EntriesDto GetChangeAttributes (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of EntriesDto</returns>
        ApiResponse<EntriesDto> GetChangeAttributesWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ChangesDto</returns>
        ChangesDto GetChangeDuplicates (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ChangesDto</returns>
        ApiResponse<ChangesDto> GetChangeDuplicatesWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        string GetChangeField (string changeLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetChangeFieldWithHttpInfo (string changeLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildsDto</returns>
        BuildsDto GetChangeFirstBuilds (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildsDto</returns>
        ApiResponse<BuildsDto> GetChangeFirstBuildsWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>IssuesDto</returns>
        IssuesDto GetChangeIssue (string changeLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>ApiResponse of IssuesDto</returns>
        ApiResponse<IssuesDto> GetChangeIssueWithHttpInfo (string changeLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>ItemsDto</returns>
        ItemsDto GetChangeParentRevisions (string changeLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>ApiResponse of ItemsDto</returns>
        ApiResponse<ItemsDto> GetChangeParentRevisionsWithHttpInfo (string changeLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootInstanceDto</returns>
        VcsRootInstanceDto GetChangeVCSRootInstance (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootInstanceDto</returns>
        ApiResponse<VcsRootInstanceDto> GetChangeVCSRootInstanceWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ChangesDto</returns>
        ChangesDto GetParentChanges (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ChangesDto</returns>
        ApiResponse<ChangesDto> GetParentChangesWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        BuildTypesDto GetRelatedBuildTypes (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        ApiResponse<BuildTypesDto> GetRelatedBuildTypesWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ChangeDto</returns>
        ChangeDto ServeChange (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ChangeDto</returns>
        ApiResponse<ChangeDto> ServeChangeWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ChangesDto</returns>
        ChangesDto ServeChanges (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ChangesDto</returns>
        ApiResponse<ChangesDto> ServeChangesWithHttpInfo (string locator = null, string fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of EntriesDto</returns>
        System.Threading.Tasks.Task<EntriesDto> GetChangeAttributesAsync (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (EntriesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntriesDto>> GetChangeAttributesAsyncWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ChangesDto</returns>
        System.Threading.Tasks.Task<ChangesDto> GetChangeDuplicatesAsync (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangesDto>> GetChangeDuplicatesAsyncWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetChangeFieldAsync (string changeLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetChangeFieldAsyncWithHttpInfo (string changeLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildsDto</returns>
        System.Threading.Tasks.Task<BuildsDto> GetChangeFirstBuildsAsync (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildsDto>> GetChangeFirstBuildsAsyncWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>Task of IssuesDto</returns>
        System.Threading.Tasks.Task<IssuesDto> GetChangeIssueAsync (string changeLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>Task of ApiResponse (IssuesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssuesDto>> GetChangeIssueAsyncWithHttpInfo (string changeLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>Task of ItemsDto</returns>
        System.Threading.Tasks.Task<ItemsDto> GetChangeParentRevisionsAsync (string changeLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>Task of ApiResponse (ItemsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemsDto>> GetChangeParentRevisionsAsyncWithHttpInfo (string changeLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootInstanceDto</returns>
        System.Threading.Tasks.Task<VcsRootInstanceDto> GetChangeVCSRootInstanceAsync (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootInstanceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VcsRootInstanceDto>> GetChangeVCSRootInstanceAsyncWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ChangesDto</returns>
        System.Threading.Tasks.Task<ChangesDto> GetParentChangesAsync (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangesDto>> GetParentChangesAsyncWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        System.Threading.Tasks.Task<BuildTypesDto> GetRelatedBuildTypesAsync (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> GetRelatedBuildTypesAsyncWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ChangeDto</returns>
        System.Threading.Tasks.Task<ChangeDto> ServeChangeAsync (string changeLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeDto>> ServeChangeAsyncWithHttpInfo (string changeLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ChangesDto</returns>
        System.Threading.Tasks.Task<ChangesDto> ServeChangesAsync (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangesDto>> ServeChangesAsyncWithHttpInfo (string locator = null, string fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChangeApi : IChangeApi
    {
        private TeamCity.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChangeApi(String basePath)
        {
            this.Configuration = new TeamCity.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChangeApi(TeamCity.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TeamCity.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TeamCity.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TeamCity.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>EntriesDto</returns>
        public EntriesDto GetChangeAttributes (string changeLocator, string fields = null)
        {
             ApiResponse<EntriesDto> localVarResponse = GetChangeAttributesWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of EntriesDto</returns>
        public ApiResponse< EntriesDto > GetChangeAttributesWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeAttributes");

            var localVarPath = "/app/rest/changes/{changeLocator}/attributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntriesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntriesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntriesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of EntriesDto</returns>
        public async System.Threading.Tasks.Task<EntriesDto> GetChangeAttributesAsync (string changeLocator, string fields = null)
        {
             ApiResponse<EntriesDto> localVarResponse = await GetChangeAttributesAsyncWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (EntriesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntriesDto>> GetChangeAttributesAsyncWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeAttributes");

            var localVarPath = "/app/rest/changes/{changeLocator}/attributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntriesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntriesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntriesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ChangesDto</returns>
        public ChangesDto GetChangeDuplicates (string changeLocator, string fields = null)
        {
             ApiResponse<ChangesDto> localVarResponse = GetChangeDuplicatesWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ChangesDto</returns>
        public ApiResponse< ChangesDto > GetChangeDuplicatesWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeDuplicates");

            var localVarPath = "/app/rest/changes/{changeLocator}/duplicates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeDuplicates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChangesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ChangesDto</returns>
        public async System.Threading.Tasks.Task<ChangesDto> GetChangeDuplicatesAsync (string changeLocator, string fields = null)
        {
             ApiResponse<ChangesDto> localVarResponse = await GetChangeDuplicatesAsyncWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChangesDto>> GetChangeDuplicatesAsyncWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeDuplicates");

            var localVarPath = "/app/rest/changes/{changeLocator}/duplicates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeDuplicates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChangesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        public string GetChangeField (string changeLocator, string field)
        {
             ApiResponse<string> localVarResponse = GetChangeFieldWithHttpInfo(changeLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetChangeFieldWithHttpInfo (string changeLocator, string field)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling ChangeApi->GetChangeField");

            var localVarPath = "/app/rest/changes/{changeLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetChangeFieldAsync (string changeLocator, string field)
        {
             ApiResponse<string> localVarResponse = await GetChangeFieldAsyncWithHttpInfo(changeLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetChangeFieldAsyncWithHttpInfo (string changeLocator, string field)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling ChangeApi->GetChangeField");

            var localVarPath = "/app/rest/changes/{changeLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildsDto</returns>
        public BuildsDto GetChangeFirstBuilds (string changeLocator, string fields = null)
        {
             ApiResponse<BuildsDto> localVarResponse = GetChangeFirstBuildsWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildsDto</returns>
        public ApiResponse< BuildsDto > GetChangeFirstBuildsWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeFirstBuilds");

            var localVarPath = "/app/rest/changes/{changeLocator}/firstBuilds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeFirstBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildsDto</returns>
        public async System.Threading.Tasks.Task<BuildsDto> GetChangeFirstBuildsAsync (string changeLocator, string fields = null)
        {
             ApiResponse<BuildsDto> localVarResponse = await GetChangeFirstBuildsAsyncWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildsDto>> GetChangeFirstBuildsAsyncWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeFirstBuilds");

            var localVarPath = "/app/rest/changes/{changeLocator}/firstBuilds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeFirstBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>IssuesDto</returns>
        public IssuesDto GetChangeIssue (string changeLocator)
        {
             ApiResponse<IssuesDto> localVarResponse = GetChangeIssueWithHttpInfo(changeLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>ApiResponse of IssuesDto</returns>
        public ApiResponse< IssuesDto > GetChangeIssueWithHttpInfo (string changeLocator)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeIssue");

            var localVarPath = "/app/rest/changes/{changeLocator}/issues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeIssue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>Task of IssuesDto</returns>
        public async System.Threading.Tasks.Task<IssuesDto> GetChangeIssueAsync (string changeLocator)
        {
             ApiResponse<IssuesDto> localVarResponse = await GetChangeIssueAsyncWithHttpInfo(changeLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>Task of ApiResponse (IssuesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IssuesDto>> GetChangeIssueAsyncWithHttpInfo (string changeLocator)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeIssue");

            var localVarPath = "/app/rest/changes/{changeLocator}/issues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeIssue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IssuesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IssuesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IssuesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>ItemsDto</returns>
        public ItemsDto GetChangeParentRevisions (string changeLocator)
        {
             ApiResponse<ItemsDto> localVarResponse = GetChangeParentRevisionsWithHttpInfo(changeLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>ApiResponse of ItemsDto</returns>
        public ApiResponse< ItemsDto > GetChangeParentRevisionsWithHttpInfo (string changeLocator)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeParentRevisions");

            var localVarPath = "/app/rest/changes/{changeLocator}/parentRevisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeParentRevisions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>Task of ItemsDto</returns>
        public async System.Threading.Tasks.Task<ItemsDto> GetChangeParentRevisionsAsync (string changeLocator)
        {
             ApiResponse<ItemsDto> localVarResponse = await GetChangeParentRevisionsAsyncWithHttpInfo(changeLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <returns>Task of ApiResponse (ItemsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemsDto>> GetChangeParentRevisionsAsyncWithHttpInfo (string changeLocator)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeParentRevisions");

            var localVarPath = "/app/rest/changes/{changeLocator}/parentRevisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeParentRevisions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>VcsRootInstanceDto</returns>
        public VcsRootInstanceDto GetChangeVCSRootInstance (string changeLocator, string fields = null)
        {
             ApiResponse<VcsRootInstanceDto> localVarResponse = GetChangeVCSRootInstanceWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of VcsRootInstanceDto</returns>
        public ApiResponse< VcsRootInstanceDto > GetChangeVCSRootInstanceWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeVCSRootInstance");

            var localVarPath = "/app/rest/changes/{changeLocator}/vcsRootInstance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeVCSRootInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootInstanceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootInstanceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootInstanceDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of VcsRootInstanceDto</returns>
        public async System.Threading.Tasks.Task<VcsRootInstanceDto> GetChangeVCSRootInstanceAsync (string changeLocator, string fields = null)
        {
             ApiResponse<VcsRootInstanceDto> localVarResponse = await GetChangeVCSRootInstanceAsyncWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (VcsRootInstanceDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VcsRootInstanceDto>> GetChangeVCSRootInstanceAsyncWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetChangeVCSRootInstance");

            var localVarPath = "/app/rest/changes/{changeLocator}/vcsRootInstance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChangeVCSRootInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VcsRootInstanceDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VcsRootInstanceDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VcsRootInstanceDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ChangesDto</returns>
        public ChangesDto GetParentChanges (string changeLocator, string fields = null)
        {
             ApiResponse<ChangesDto> localVarResponse = GetParentChangesWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ChangesDto</returns>
        public ApiResponse< ChangesDto > GetParentChangesWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetParentChanges");

            var localVarPath = "/app/rest/changes/{changeLocator}/parentChanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParentChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChangesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ChangesDto</returns>
        public async System.Threading.Tasks.Task<ChangesDto> GetParentChangesAsync (string changeLocator, string fields = null)
        {
             ApiResponse<ChangesDto> localVarResponse = await GetParentChangesAsyncWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChangesDto>> GetParentChangesAsyncWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetParentChanges");

            var localVarPath = "/app/rest/changes/{changeLocator}/parentChanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParentChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChangesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        public BuildTypesDto GetRelatedBuildTypes (string changeLocator, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = GetRelatedBuildTypesWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        public ApiResponse< BuildTypesDto > GetRelatedBuildTypesWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetRelatedBuildTypes");

            var localVarPath = "/app/rest/changes/{changeLocator}/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRelatedBuildTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        public async System.Threading.Tasks.Task<BuildTypesDto> GetRelatedBuildTypesAsync (string changeLocator, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = await GetRelatedBuildTypesAsyncWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> GetRelatedBuildTypesAsyncWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->GetRelatedBuildTypes");

            var localVarPath = "/app/rest/changes/{changeLocator}/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRelatedBuildTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ChangeDto</returns>
        public ChangeDto ServeChange (string changeLocator, string fields = null)
        {
             ApiResponse<ChangeDto> localVarResponse = ServeChangeWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ChangeDto</returns>
        public ApiResponse< ChangeDto > ServeChangeWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->ServeChange");

            var localVarPath = "/app/rest/changes/{changeLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeChange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChangeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ChangeDto</returns>
        public async System.Threading.Tasks.Task<ChangeDto> ServeChangeAsync (string changeLocator, string fields = null)
        {
             ApiResponse<ChangeDto> localVarResponse = await ServeChangeAsyncWithHttpInfo(changeLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChangeDto>> ServeChangeAsyncWithHttpInfo (string changeLocator, string fields = null)
        {
            // verify the required parameter 'changeLocator' is set
            if (changeLocator == null)
                throw new ApiException(400, "Missing required parameter 'changeLocator' when calling ChangeApi->ServeChange");

            var localVarPath = "/app/rest/changes/{changeLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changeLocator != null) localVarPathParams.Add("changeLocator", this.Configuration.ApiClient.ParameterToString(changeLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeChange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChangeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ChangesDto</returns>
        public ChangesDto ServeChanges (string locator = null, string fields = null)
        {
             ApiResponse<ChangesDto> localVarResponse = ServeChangesWithHttpInfo(locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ChangesDto</returns>
        public ApiResponse< ChangesDto > ServeChangesWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/changes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChangesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ChangesDto</returns>
        public async System.Threading.Tasks.Task<ChangesDto> ServeChangesAsync (string locator = null, string fields = null)
        {
             ApiResponse<ChangesDto> localVarResponse = await ServeChangesAsyncWithHttpInfo(locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ChangesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChangesDto>> ServeChangesAsyncWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/changes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChangesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangesDto)));
        }

    }
}
