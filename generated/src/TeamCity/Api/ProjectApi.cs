/* 
 * TeamCity REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TeamCity.Client;
using TeamCity.Model;

namespace TeamCity.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Object</returns>
        Object Add (string projectLocator, ProjectFeatureDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddWithHttpInfo (string projectLocator, ProjectFeatureDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        BuildTypeDto CreateBuildType (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        ApiResponse<BuildTypeDto> CreateBuildTypeWithHttpInfo (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        BuildTypeDto CreateBuildTypeTemplate (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        ApiResponse<BuildTypeDto> CreateBuildTypeTemplateWithHttpInfo (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ProjectDto</returns>
        ProjectDto CreateProject (NewProjectDescriptionDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        ApiResponse<ProjectDto> CreateProjectWithHttpInfo (NewProjectDescriptionDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string CreateSecureToken (string projectLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateSecureTokenWithHttpInfo (string projectLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns></returns>
        void Delete (string featureLocator, string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string featureLocator, string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns></returns>
        void DeleteAllParameters1 (string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllParameters1WithHttpInfo (string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns></returns>
        void DeleteParameter1 (string name, string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteParameter1WithHttpInfo (string name, string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns></returns>
        void DeleteProject (string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectWithHttpInfo (string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="agentPoolLocator"></param>
        /// <returns></returns>
        void DeleteProjectAgentPools (string projectLocator, string agentPoolLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="agentPoolLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectAgentPoolsWithHttpInfo (string projectLocator, string agentPoolLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Object</returns>
        Object Get1 (string projectLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> Get1WithHttpInfo (string projectLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BranchesDto</returns>
        BranchesDto GetBranches (string projectLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BranchesDto</returns>
        ApiResponse<BranchesDto> GetBranchesWithHttpInfo (string projectLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        BuildTypesDto GetBuildTypesOrder (string projectLocator, string field = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        ApiResponse<BuildTypesDto> GetBuildTypesOrderWithHttpInfo (string projectLocator, string field = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        BuildTypeDto GetDefaultTemplate (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        ApiResponse<BuildTypeDto> GetDefaultTemplateWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertyDto</returns>
        PropertyDto GetParameter2 (string name, string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertyDto</returns>
        ApiResponse<PropertyDto> GetParameter2WithHttpInfo (string name, string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>TypeDto</returns>
        TypeDto GetParameterType1 (string name, string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of TypeDto</returns>
        ApiResponse<TypeDto> GetParameterType1WithHttpInfo (string name, string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>string</returns>
        string GetParameterTypeRawValue1 (string name, string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetParameterTypeRawValue1WithHttpInfo (string name, string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>string</returns>
        string GetParameterValueLong1 (string name, string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetParameterValueLong1WithHttpInfo (string name, string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        PropertiesDto GetParameters1 (string projectLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        ApiResponse<PropertiesDto> GetParameters1WithHttpInfo (string projectLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectDto</returns>
        ProjectDto GetParentProject (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        ApiResponse<ProjectDto> GetParentProjectWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentPoolsDto</returns>
        AgentPoolsDto GetProjectAgentPools (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolsDto</returns>
        ApiResponse<AgentPoolsDto> GetProjectAgentPoolsWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>ProjectsDto</returns>
        ProjectsDto GetProjectsOrder (string projectLocator, string field = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of ProjectsDto</returns>
        ApiResponse<ProjectsDto> GetProjectsOrderWithHttpInfo (string projectLocator, string field = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="token"></param>
        /// <returns>string</returns>
        string GetSecureValue (string projectLocator, string token);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetSecureValueWithHttpInfo (string projectLocator, string token);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>string</returns>
        string GetSettingsFile1 (string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetSettingsFile1WithHttpInfo (string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Object</returns>
        Object GetSingle1 (string featureLocator, string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSingle1WithHttpInfo (string featureLocator, string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectDto</returns>
        ProjectDto ReloadSettingsFile (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        ApiResponse<ProjectDto> ReloadSettingsFileWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns></returns>
        void RemoveDefaultTemplate (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveDefaultTemplateWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Object</returns>
        Object Replace (string featureLocator, string projectLocator, ProjectFeatureDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ReplaceWithHttpInfo (string featureLocator, string projectLocator, ProjectFeatureDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Object</returns>
        Object ReplaceAll (string projectLocator, ProjectFeaturesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ReplaceAllWithHttpInfo (string projectLocator, ProjectFeaturesDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        string ServeBuildFieldWithProject (string projectLocator, string btLocator, string buildLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServeBuildFieldWithProjectWithHttpInfo (string projectLocator, string btLocator, string buildLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        BuildTypeDto ServeBuildType (string projectLocator, string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        ApiResponse<BuildTypeDto> ServeBuildTypeWithHttpInfo (string projectLocator, string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        string ServeBuildTypeFieldWithProject (string projectLocator, string btLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServeBuildTypeFieldWithProjectWithHttpInfo (string projectLocator, string btLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        BuildTypeDto ServeBuildTypeTemplates (string projectLocator, string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        ApiResponse<BuildTypeDto> ServeBuildTypeTemplatesWithHttpInfo (string projectLocator, string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        BuildTypesDto ServeBuildTypesInProject (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        ApiResponse<BuildTypesDto> ServeBuildTypesInProjectWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildDto</returns>
        BuildDto ServeBuildWithProject1 (string projectLocator, string btLocator, string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildDto</returns>
        ApiResponse<BuildDto> ServeBuildWithProject1WithHttpInfo (string projectLocator, string btLocator, string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildsDto</returns>
        BuildsDto ServeBuilds1 (string projectLocator, string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildsDto</returns>
        ApiResponse<BuildsDto> ServeBuilds1WithHttpInfo (string projectLocator, string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectDto</returns>
        ProjectDto ServeProject (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        ApiResponse<ProjectDto> ServeProjectWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        string ServeProjectField (string projectLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServeProjectFieldWithHttpInfo (string projectLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectsDto</returns>
        ProjectsDto ServeProjects (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectsDto</returns>
        ApiResponse<ProjectsDto> ServeProjectsWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        BuildTypesDto ServeTemplatesInProject (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        ApiResponse<BuildTypesDto> ServeTemplatesInProjectWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        BuildTypesDto SetBuildTypesOrder (string projectLocator, BuildTypesDto body = null, string field = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        ApiResponse<BuildTypesDto> SetBuildTypesOrderWithHttpInfo (string projectLocator, BuildTypesDto body = null, string field = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        BuildTypeDto SetDefaultTemplate (string projectLocator, BuildTypeDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        ApiResponse<BuildTypeDto> SetDefaultTemplateWithHttpInfo (string projectLocator, BuildTypeDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertyDto</returns>
        PropertyDto SetParameter2 (string name, string projectLocator, PropertyDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertyDto</returns>
        ApiResponse<PropertyDto> SetParameter2WithHttpInfo (string name, string projectLocator, PropertyDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertyDto</returns>
        PropertyDto SetParameter3 (string projectLocator, PropertyDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertyDto</returns>
        ApiResponse<PropertyDto> SetParameter3WithHttpInfo (string projectLocator, PropertyDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>TypeDto</returns>
        TypeDto SetParameterType1 (string name, string projectLocator, TypeDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TypeDto</returns>
        ApiResponse<TypeDto> SetParameterType1WithHttpInfo (string name, string projectLocator, TypeDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SetParameterTypeRawValue1 (string name, string projectLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetParameterTypeRawValue1WithHttpInfo (string name, string projectLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SetParameterValueLong1 (string name, string projectLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetParameterValueLong1WithHttpInfo (string name, string projectLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        PropertiesDto SetParameters1 (string projectLocator, PropertiesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        ApiResponse<PropertiesDto> SetParameters1WithHttpInfo (string projectLocator, PropertiesDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectDto</returns>
        ProjectDto SetParentProject (string projectLocator, ProjectDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        ApiResponse<ProjectDto> SetParentProjectWithHttpInfo (string projectLocator, ProjectDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AgentPoolDto</returns>
        AgentPoolDto SetProjectAgentPools (string projectLocator, AgentPoolDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolDto</returns>
        ApiResponse<AgentPoolDto> SetProjectAgentPoolsWithHttpInfo (string projectLocator, AgentPoolDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentPoolsDto</returns>
        AgentPoolsDto SetProjectAgentPools1 (string projectLocator, AgentPoolsDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolsDto</returns>
        ApiResponse<AgentPoolsDto> SetProjectAgentPools1WithHttpInfo (string projectLocator, AgentPoolsDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        string SetProjectField (string projectLocator, string field, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetProjectFieldWithHttpInfo (string projectLocator, string field, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>ProjectsDto</returns>
        ProjectsDto SetProjectsOrder (string projectLocator, ProjectsDto body = null, string field = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of ProjectsDto</returns>
        ApiResponse<ProjectsDto> SetProjectsOrderWithHttpInfo (string projectLocator, ProjectsDto body = null, string field = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddAsync (string projectLocator, ProjectFeatureDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddAsyncWithHttpInfo (string projectLocator, ProjectFeatureDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        System.Threading.Tasks.Task<BuildTypeDto> CreateBuildTypeAsync (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> CreateBuildTypeAsyncWithHttpInfo (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        System.Threading.Tasks.Task<BuildTypeDto> CreateBuildTypeTemplateAsync (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> CreateBuildTypeTemplateAsyncWithHttpInfo (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        System.Threading.Tasks.Task<ProjectDto> CreateProjectAsync (NewProjectDescriptionDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDto>> CreateProjectAsyncWithHttpInfo (NewProjectDescriptionDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateSecureTokenAsync (string projectLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateSecureTokenAsyncWithHttpInfo (string projectLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string featureLocator, string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string featureLocator, string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllParameters1Async (string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllParameters1AsyncWithHttpInfo (string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteParameter1Async (string name, string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteParameter1AsyncWithHttpInfo (string name, string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectAsync (string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectAsyncWithHttpInfo (string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="agentPoolLocator"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectAgentPoolsAsync (string projectLocator, string agentPoolLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="agentPoolLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectAgentPoolsAsyncWithHttpInfo (string projectLocator, string agentPoolLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> Get1Async (string projectLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Get1AsyncWithHttpInfo (string projectLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BranchesDto</returns>
        System.Threading.Tasks.Task<BranchesDto> GetBranchesAsync (string projectLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BranchesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BranchesDto>> GetBranchesAsyncWithHttpInfo (string projectLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        System.Threading.Tasks.Task<BuildTypesDto> GetBuildTypesOrderAsync (string projectLocator, string field = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> GetBuildTypesOrderAsyncWithHttpInfo (string projectLocator, string field = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        System.Threading.Tasks.Task<BuildTypeDto> GetDefaultTemplateAsync (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> GetDefaultTemplateAsyncWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertyDto</returns>
        System.Threading.Tasks.Task<PropertyDto> GetParameter2Async (string name, string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyDto>> GetParameter2AsyncWithHttpInfo (string name, string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of TypeDto</returns>
        System.Threading.Tasks.Task<TypeDto> GetParameterType1Async (string name, string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse (TypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TypeDto>> GetParameterType1AsyncWithHttpInfo (string name, string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetParameterTypeRawValue1Async (string name, string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetParameterTypeRawValue1AsyncWithHttpInfo (string name, string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetParameterValueLong1Async (string name, string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetParameterValueLong1AsyncWithHttpInfo (string name, string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        System.Threading.Tasks.Task<PropertiesDto> GetParameters1Async (string projectLocator, string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> GetParameters1AsyncWithHttpInfo (string projectLocator, string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        System.Threading.Tasks.Task<ProjectDto> GetParentProjectAsync (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDto>> GetParentProjectAsyncWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentPoolsDto</returns>
        System.Threading.Tasks.Task<AgentPoolsDto> GetProjectAgentPoolsAsync (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolsDto>> GetProjectAgentPoolsAsyncWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ProjectsDto</returns>
        System.Threading.Tasks.Task<ProjectsDto> GetProjectsOrderAsync (string projectLocator, string field = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectsDto>> GetProjectsOrderAsyncWithHttpInfo (string projectLocator, string field = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="token"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetSecureValueAsync (string projectLocator, string token);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetSecureValueAsyncWithHttpInfo (string projectLocator, string token);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetSettingsFile1Async (string projectLocator);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetSettingsFile1AsyncWithHttpInfo (string projectLocator);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSingle1Async (string featureLocator, string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSingle1AsyncWithHttpInfo (string featureLocator, string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        System.Threading.Tasks.Task<ProjectDto> ReloadSettingsFileAsync (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDto>> ReloadSettingsFileAsyncWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveDefaultTemplateAsync (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDefaultTemplateAsyncWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ReplaceAsync (string featureLocator, string projectLocator, ProjectFeatureDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceAsyncWithHttpInfo (string featureLocator, string projectLocator, ProjectFeatureDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ReplaceAllAsync (string projectLocator, ProjectFeaturesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceAllAsyncWithHttpInfo (string projectLocator, ProjectFeaturesDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServeBuildFieldWithProjectAsync (string projectLocator, string btLocator, string buildLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServeBuildFieldWithProjectAsyncWithHttpInfo (string projectLocator, string btLocator, string buildLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        System.Threading.Tasks.Task<BuildTypeDto> ServeBuildTypeAsync (string projectLocator, string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> ServeBuildTypeAsyncWithHttpInfo (string projectLocator, string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServeBuildTypeFieldWithProjectAsync (string projectLocator, string btLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServeBuildTypeFieldWithProjectAsyncWithHttpInfo (string projectLocator, string btLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        System.Threading.Tasks.Task<BuildTypeDto> ServeBuildTypeTemplatesAsync (string projectLocator, string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> ServeBuildTypeTemplatesAsyncWithHttpInfo (string projectLocator, string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        System.Threading.Tasks.Task<BuildTypesDto> ServeBuildTypesInProjectAsync (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> ServeBuildTypesInProjectAsyncWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildDto</returns>
        System.Threading.Tasks.Task<BuildDto> ServeBuildWithProject1Async (string projectLocator, string btLocator, string buildLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildDto>> ServeBuildWithProject1AsyncWithHttpInfo (string projectLocator, string btLocator, string buildLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildsDto</returns>
        System.Threading.Tasks.Task<BuildsDto> ServeBuilds1Async (string projectLocator, string btLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildsDto>> ServeBuilds1AsyncWithHttpInfo (string projectLocator, string btLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        System.Threading.Tasks.Task<ProjectDto> ServeProjectAsync (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDto>> ServeProjectAsyncWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServeProjectFieldAsync (string projectLocator, string field);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServeProjectFieldAsyncWithHttpInfo (string projectLocator, string field);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectsDto</returns>
        System.Threading.Tasks.Task<ProjectsDto> ServeProjectsAsync (string locator = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectsDto>> ServeProjectsAsyncWithHttpInfo (string locator = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        System.Threading.Tasks.Task<BuildTypesDto> ServeTemplatesInProjectAsync (string projectLocator, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> ServeTemplatesInProjectAsyncWithHttpInfo (string projectLocator, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        System.Threading.Tasks.Task<BuildTypesDto> SetBuildTypesOrderAsync (string projectLocator, BuildTypesDto body = null, string field = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> SetBuildTypesOrderAsyncWithHttpInfo (string projectLocator, BuildTypesDto body = null, string field = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        System.Threading.Tasks.Task<BuildTypeDto> SetDefaultTemplateAsync (string projectLocator, BuildTypeDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> SetDefaultTemplateAsyncWithHttpInfo (string projectLocator, BuildTypeDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertyDto</returns>
        System.Threading.Tasks.Task<PropertyDto> SetParameter2Async (string name, string projectLocator, PropertyDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyDto>> SetParameter2AsyncWithHttpInfo (string name, string projectLocator, PropertyDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertyDto</returns>
        System.Threading.Tasks.Task<PropertyDto> SetParameter3Async (string projectLocator, PropertyDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyDto>> SetParameter3AsyncWithHttpInfo (string projectLocator, PropertyDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TypeDto</returns>
        System.Threading.Tasks.Task<TypeDto> SetParameterType1Async (string name, string projectLocator, TypeDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TypeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TypeDto>> SetParameterType1AsyncWithHttpInfo (string name, string projectLocator, TypeDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetParameterTypeRawValue1Async (string name, string projectLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetParameterTypeRawValue1AsyncWithHttpInfo (string name, string projectLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetParameterValueLong1Async (string name, string projectLocator, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetParameterValueLong1AsyncWithHttpInfo (string name, string projectLocator, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        System.Threading.Tasks.Task<PropertiesDto> SetParameters1Async (string projectLocator, PropertiesDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> SetParameters1AsyncWithHttpInfo (string projectLocator, PropertiesDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        System.Threading.Tasks.Task<ProjectDto> SetParentProjectAsync (string projectLocator, ProjectDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDto>> SetParentProjectAsyncWithHttpInfo (string projectLocator, ProjectDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AgentPoolDto</returns>
        System.Threading.Tasks.Task<AgentPoolDto> SetProjectAgentPoolsAsync (string projectLocator, AgentPoolDto body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolDto>> SetProjectAgentPoolsAsyncWithHttpInfo (string projectLocator, AgentPoolDto body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentPoolsDto</returns>
        System.Threading.Tasks.Task<AgentPoolsDto> SetProjectAgentPools1Async (string projectLocator, AgentPoolsDto body = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgentPoolsDto>> SetProjectAgentPools1AsyncWithHttpInfo (string projectLocator, AgentPoolsDto body = null, string fields = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetProjectFieldAsync (string projectLocator, string field, string body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetProjectFieldAsyncWithHttpInfo (string projectLocator, string field, string body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ProjectsDto</returns>
        System.Threading.Tasks.Task<ProjectsDto> SetProjectsOrderAsync (string projectLocator, ProjectsDto body = null, string field = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectsDto>> SetProjectsOrderAsyncWithHttpInfo (string projectLocator, ProjectsDto body = null, string field = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectApi : IProjectApi
    {
        private TeamCity.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectApi(String basePath)
        {
            this.Configuration = new TeamCity.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectApi(TeamCity.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TeamCity.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TeamCity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TeamCity.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TeamCity.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Object</returns>
        public Object Add (string projectLocator, ProjectFeatureDto body = null, string fields = null)
        {
             ApiResponse<Object> localVarResponse = AddWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddWithHttpInfo (string projectLocator, ProjectFeatureDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->Add");

            var localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Add", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddAsync (string projectLocator, ProjectFeatureDto body = null, string fields = null)
        {
             ApiResponse<Object> localVarResponse = await AddAsyncWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddAsyncWithHttpInfo (string projectLocator, ProjectFeatureDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->Add");

            var localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Add", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        public BuildTypeDto CreateBuildType (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = CreateBuildTypeWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        public ApiResponse< BuildTypeDto > CreateBuildTypeWithHttpInfo (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->CreateBuildType");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBuildType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        public async System.Threading.Tasks.Task<BuildTypeDto> CreateBuildTypeAsync (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = await CreateBuildTypeAsyncWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> CreateBuildTypeAsyncWithHttpInfo (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->CreateBuildType");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBuildType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        public BuildTypeDto CreateBuildTypeTemplate (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = CreateBuildTypeTemplateWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        public ApiResponse< BuildTypeDto > CreateBuildTypeTemplateWithHttpInfo (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->CreateBuildTypeTemplate");

            var localVarPath = "/app/rest/projects/{projectLocator}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBuildTypeTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        public async System.Threading.Tasks.Task<BuildTypeDto> CreateBuildTypeTemplateAsync (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = await CreateBuildTypeTemplateAsyncWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> CreateBuildTypeTemplateAsyncWithHttpInfo (string projectLocator, NewBuildTypeDescriptionDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->CreateBuildTypeTemplate");

            var localVarPath = "/app/rest/projects/{projectLocator}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBuildTypeTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ProjectDto</returns>
        public ProjectDto CreateProject (NewProjectDescriptionDto body = null)
        {
             ApiResponse<ProjectDto> localVarResponse = CreateProjectWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        public ApiResponse< ProjectDto > CreateProjectWithHttpInfo (NewProjectDescriptionDto body = null)
        {

            var localVarPath = "/app/rest/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        public async System.Threading.Tasks.Task<ProjectDto> CreateProjectAsync (NewProjectDescriptionDto body = null)
        {
             ApiResponse<ProjectDto> localVarResponse = await CreateProjectAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDto>> CreateProjectAsyncWithHttpInfo (NewProjectDescriptionDto body = null)
        {

            var localVarPath = "/app/rest/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string CreateSecureToken (string projectLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = CreateSecureTokenWithHttpInfo(projectLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CreateSecureTokenWithHttpInfo (string projectLocator, string body = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->CreateSecureToken");

            var localVarPath = "/app/rest/projects/{projectLocator}/secure/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSecureToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateSecureTokenAsync (string projectLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = await CreateSecureTokenAsyncWithHttpInfo(projectLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CreateSecureTokenAsyncWithHttpInfo (string projectLocator, string body = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->CreateSecureToken");

            var localVarPath = "/app/rest/projects/{projectLocator}/secure/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSecureToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns></returns>
        public void Delete (string featureLocator, string projectLocator)
        {
             DeleteWithHttpInfo(featureLocator, projectLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string featureLocator, string projectLocator)
        {
            // verify the required parameter 'featureLocator' is set
            if (featureLocator == null)
                throw new ApiException(400, "Missing required parameter 'featureLocator' when calling ProjectApi->Delete");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->Delete");

            var localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureLocator != null) localVarPathParams.Add("featureLocator", this.Configuration.ApiClient.ParameterToString(featureLocator)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string featureLocator, string projectLocator)
        {
             await DeleteAsyncWithHttpInfo(featureLocator, projectLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string featureLocator, string projectLocator)
        {
            // verify the required parameter 'featureLocator' is set
            if (featureLocator == null)
                throw new ApiException(400, "Missing required parameter 'featureLocator' when calling ProjectApi->Delete");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->Delete");

            var localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureLocator != null) localVarPathParams.Add("featureLocator", this.Configuration.ApiClient.ParameterToString(featureLocator)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns></returns>
        public void DeleteAllParameters1 (string projectLocator)
        {
             DeleteAllParameters1WithHttpInfo(projectLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllParameters1WithHttpInfo (string projectLocator)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->DeleteAllParameters1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllParameters1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllParameters1Async (string projectLocator)
        {
             await DeleteAllParameters1AsyncWithHttpInfo(projectLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllParameters1AsyncWithHttpInfo (string projectLocator)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->DeleteAllParameters1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllParameters1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns></returns>
        public void DeleteParameter1 (string name, string projectLocator)
        {
             DeleteParameter1WithHttpInfo(name, projectLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteParameter1WithHttpInfo (string name, string projectLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->DeleteParameter1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->DeleteParameter1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteParameter1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteParameter1Async (string name, string projectLocator)
        {
             await DeleteParameter1AsyncWithHttpInfo(name, projectLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteParameter1AsyncWithHttpInfo (string name, string projectLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->DeleteParameter1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->DeleteParameter1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteParameter1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns></returns>
        public void DeleteProject (string projectLocator)
        {
             DeleteProjectWithHttpInfo(projectLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProjectWithHttpInfo (string projectLocator)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->DeleteProject");

            var localVarPath = "/app/rest/projects/{projectLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectAsync (string projectLocator)
        {
             await DeleteProjectAsyncWithHttpInfo(projectLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectAsyncWithHttpInfo (string projectLocator)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->DeleteProject");

            var localVarPath = "/app/rest/projects/{projectLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="agentPoolLocator"></param>
        /// <returns></returns>
        public void DeleteProjectAgentPools (string projectLocator, string agentPoolLocator)
        {
             DeleteProjectAgentPoolsWithHttpInfo(projectLocator, agentPoolLocator);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="agentPoolLocator"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProjectAgentPoolsWithHttpInfo (string projectLocator, string agentPoolLocator)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->DeleteProjectAgentPools");
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling ProjectApi->DeleteProjectAgentPools");

            var localVarPath = "/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProjectAgentPools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="agentPoolLocator"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectAgentPoolsAsync (string projectLocator, string agentPoolLocator)
        {
             await DeleteProjectAgentPoolsAsyncWithHttpInfo(projectLocator, agentPoolLocator);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="agentPoolLocator"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectAgentPoolsAsyncWithHttpInfo (string projectLocator, string agentPoolLocator)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->DeleteProjectAgentPools");
            // verify the required parameter 'agentPoolLocator' is set
            if (agentPoolLocator == null)
                throw new ApiException(400, "Missing required parameter 'agentPoolLocator' when calling ProjectApi->DeleteProjectAgentPools");

            var localVarPath = "/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (agentPoolLocator != null) localVarPathParams.Add("agentPoolLocator", this.Configuration.ApiClient.ParameterToString(agentPoolLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProjectAgentPools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Object</returns>
        public Object Get1 (string projectLocator, string locator = null, string fields = null)
        {
             ApiResponse<Object> localVarResponse = Get1WithHttpInfo(projectLocator, locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > Get1WithHttpInfo (string projectLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->Get1");

            var localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> Get1Async (string projectLocator, string locator = null, string fields = null)
        {
             ApiResponse<Object> localVarResponse = await Get1AsyncWithHttpInfo(projectLocator, locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Get1AsyncWithHttpInfo (string projectLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->Get1");

            var localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BranchesDto</returns>
        public BranchesDto GetBranches (string projectLocator, string locator = null, string fields = null)
        {
             ApiResponse<BranchesDto> localVarResponse = GetBranchesWithHttpInfo(projectLocator, locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BranchesDto</returns>
        public ApiResponse< BranchesDto > GetBranchesWithHttpInfo (string projectLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetBranches");

            var localVarPath = "/app/rest/projects/{projectLocator}/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBranches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BranchesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BranchesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BranchesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BranchesDto</returns>
        public async System.Threading.Tasks.Task<BranchesDto> GetBranchesAsync (string projectLocator, string locator = null, string fields = null)
        {
             ApiResponse<BranchesDto> localVarResponse = await GetBranchesAsyncWithHttpInfo(projectLocator, locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BranchesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BranchesDto>> GetBranchesAsyncWithHttpInfo (string projectLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetBranches");

            var localVarPath = "/app/rest/projects/{projectLocator}/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBranches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BranchesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BranchesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BranchesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        public BuildTypesDto GetBuildTypesOrder (string projectLocator, string field = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = GetBuildTypesOrderWithHttpInfo(projectLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        public ApiResponse< BuildTypesDto > GetBuildTypesOrderWithHttpInfo (string projectLocator, string field = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetBuildTypesOrder");

            var localVarPath = "/app/rest/projects/{projectLocator}/order/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildTypesOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        public async System.Threading.Tasks.Task<BuildTypesDto> GetBuildTypesOrderAsync (string projectLocator, string field = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = await GetBuildTypesOrderAsyncWithHttpInfo(projectLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> GetBuildTypesOrderAsyncWithHttpInfo (string projectLocator, string field = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetBuildTypesOrder");

            var localVarPath = "/app/rest/projects/{projectLocator}/order/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildTypesOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        public BuildTypeDto GetDefaultTemplate (string projectLocator, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = GetDefaultTemplateWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        public ApiResponse< BuildTypeDto > GetDefaultTemplateWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetDefaultTemplate");

            var localVarPath = "/app/rest/projects/{projectLocator}/defaultTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        public async System.Threading.Tasks.Task<BuildTypeDto> GetDefaultTemplateAsync (string projectLocator, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = await GetDefaultTemplateAsyncWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> GetDefaultTemplateAsyncWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetDefaultTemplate");

            var localVarPath = "/app/rest/projects/{projectLocator}/defaultTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertyDto</returns>
        public PropertyDto GetParameter2 (string name, string projectLocator, string fields = null)
        {
             ApiResponse<PropertyDto> localVarResponse = GetParameter2WithHttpInfo(name, projectLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertyDto</returns>
        public ApiResponse< PropertyDto > GetParameter2WithHttpInfo (string name, string projectLocator, string fields = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->GetParameter2");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetParameter2");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameter2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertyDto</returns>
        public async System.Threading.Tasks.Task<PropertyDto> GetParameter2Async (string name, string projectLocator, string fields = null)
        {
             ApiResponse<PropertyDto> localVarResponse = await GetParameter2AsyncWithHttpInfo(name, projectLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyDto>> GetParameter2AsyncWithHttpInfo (string name, string projectLocator, string fields = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->GetParameter2");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetParameter2");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameter2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>TypeDto</returns>
        public TypeDto GetParameterType1 (string name, string projectLocator)
        {
             ApiResponse<TypeDto> localVarResponse = GetParameterType1WithHttpInfo(name, projectLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of TypeDto</returns>
        public ApiResponse< TypeDto > GetParameterType1WithHttpInfo (string name, string projectLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->GetParameterType1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetParameterType1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of TypeDto</returns>
        public async System.Threading.Tasks.Task<TypeDto> GetParameterType1Async (string name, string projectLocator)
        {
             ApiResponse<TypeDto> localVarResponse = await GetParameterType1AsyncWithHttpInfo(name, projectLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse (TypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TypeDto>> GetParameterType1AsyncWithHttpInfo (string name, string projectLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->GetParameterType1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetParameterType1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>string</returns>
        public string GetParameterTypeRawValue1 (string name, string projectLocator)
        {
             ApiResponse<string> localVarResponse = GetParameterTypeRawValue1WithHttpInfo(name, projectLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetParameterTypeRawValue1WithHttpInfo (string name, string projectLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->GetParameterTypeRawValue1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetParameterTypeRawValue1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterTypeRawValue1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetParameterTypeRawValue1Async (string name, string projectLocator)
        {
             ApiResponse<string> localVarResponse = await GetParameterTypeRawValue1AsyncWithHttpInfo(name, projectLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetParameterTypeRawValue1AsyncWithHttpInfo (string name, string projectLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->GetParameterTypeRawValue1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetParameterTypeRawValue1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterTypeRawValue1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>string</returns>
        public string GetParameterValueLong1 (string name, string projectLocator)
        {
             ApiResponse<string> localVarResponse = GetParameterValueLong1WithHttpInfo(name, projectLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetParameterValueLong1WithHttpInfo (string name, string projectLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->GetParameterValueLong1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetParameterValueLong1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterValueLong1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetParameterValueLong1Async (string name, string projectLocator)
        {
             ApiResponse<string> localVarResponse = await GetParameterValueLong1AsyncWithHttpInfo(name, projectLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetParameterValueLong1AsyncWithHttpInfo (string name, string projectLocator)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->GetParameterValueLong1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetParameterValueLong1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameterValueLong1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        public PropertiesDto GetParameters1 (string projectLocator, string locator = null, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = GetParameters1WithHttpInfo(projectLocator, locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        public ApiResponse< PropertiesDto > GetParameters1WithHttpInfo (string projectLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetParameters1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameters1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        public async System.Threading.Tasks.Task<PropertiesDto> GetParameters1Async (string projectLocator, string locator = null, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = await GetParameters1AsyncWithHttpInfo(projectLocator, locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> GetParameters1AsyncWithHttpInfo (string projectLocator, string locator = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetParameters1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParameters1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectDto</returns>
        public ProjectDto GetParentProject (string projectLocator, string fields = null)
        {
             ApiResponse<ProjectDto> localVarResponse = GetParentProjectWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        public ApiResponse< ProjectDto > GetParentProjectWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetParentProject");

            var localVarPath = "/app/rest/projects/{projectLocator}/parentProject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParentProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        public async System.Threading.Tasks.Task<ProjectDto> GetParentProjectAsync (string projectLocator, string fields = null)
        {
             ApiResponse<ProjectDto> localVarResponse = await GetParentProjectAsyncWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDto>> GetParentProjectAsyncWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetParentProject");

            var localVarPath = "/app/rest/projects/{projectLocator}/parentProject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParentProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentPoolsDto</returns>
        public AgentPoolsDto GetProjectAgentPools (string projectLocator, string fields = null)
        {
             ApiResponse<AgentPoolsDto> localVarResponse = GetProjectAgentPoolsWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolsDto</returns>
        public ApiResponse< AgentPoolsDto > GetProjectAgentPoolsWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetProjectAgentPools");

            var localVarPath = "/app/rest/projects/{projectLocator}/agentPools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectAgentPools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentPoolsDto</returns>
        public async System.Threading.Tasks.Task<AgentPoolsDto> GetProjectAgentPoolsAsync (string projectLocator, string fields = null)
        {
             ApiResponse<AgentPoolsDto> localVarResponse = await GetProjectAgentPoolsAsyncWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentPoolsDto>> GetProjectAgentPoolsAsyncWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetProjectAgentPools");

            var localVarPath = "/app/rest/projects/{projectLocator}/agentPools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectAgentPools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>ProjectsDto</returns>
        public ProjectsDto GetProjectsOrder (string projectLocator, string field = null)
        {
             ApiResponse<ProjectsDto> localVarResponse = GetProjectsOrderWithHttpInfo(projectLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of ProjectsDto</returns>
        public ApiResponse< ProjectsDto > GetProjectsOrderWithHttpInfo (string projectLocator, string field = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetProjectsOrder");

            var localVarPath = "/app/rest/projects/{projectLocator}/order/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectsOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ProjectsDto</returns>
        public async System.Threading.Tasks.Task<ProjectsDto> GetProjectsOrderAsync (string projectLocator, string field = null)
        {
             ApiResponse<ProjectsDto> localVarResponse = await GetProjectsOrderAsyncWithHttpInfo(projectLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectsDto>> GetProjectsOrderAsyncWithHttpInfo (string projectLocator, string field = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetProjectsOrder");

            var localVarPath = "/app/rest/projects/{projectLocator}/order/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectsOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="token"></param>
        /// <returns>string</returns>
        public string GetSecureValue (string projectLocator, string token)
        {
             ApiResponse<string> localVarResponse = GetSecureValueWithHttpInfo(projectLocator, token);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetSecureValueWithHttpInfo (string projectLocator, string token)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetSecureValue");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling ProjectApi->GetSecureValue");

            var localVarPath = "/app/rest/projects/{projectLocator}/secure/values/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecureValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="token"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetSecureValueAsync (string projectLocator, string token)
        {
             ApiResponse<string> localVarResponse = await GetSecureValueAsyncWithHttpInfo(projectLocator, token);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetSecureValueAsyncWithHttpInfo (string projectLocator, string token)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetSecureValue");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling ProjectApi->GetSecureValue");

            var localVarPath = "/app/rest/projects/{projectLocator}/secure/values/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecureValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>string</returns>
        public string GetSettingsFile1 (string projectLocator)
        {
             ApiResponse<string> localVarResponse = GetSettingsFile1WithHttpInfo(projectLocator);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetSettingsFile1WithHttpInfo (string projectLocator)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetSettingsFile1");

            var localVarPath = "/app/rest/projects/{projectLocator}/settingsFile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettingsFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetSettingsFile1Async (string projectLocator)
        {
             ApiResponse<string> localVarResponse = await GetSettingsFile1AsyncWithHttpInfo(projectLocator);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetSettingsFile1AsyncWithHttpInfo (string projectLocator)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetSettingsFile1");

            var localVarPath = "/app/rest/projects/{projectLocator}/settingsFile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettingsFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Object</returns>
        public Object GetSingle1 (string featureLocator, string projectLocator, string fields = null)
        {
             ApiResponse<Object> localVarResponse = GetSingle1WithHttpInfo(featureLocator, projectLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetSingle1WithHttpInfo (string featureLocator, string projectLocator, string fields = null)
        {
            // verify the required parameter 'featureLocator' is set
            if (featureLocator == null)
                throw new ApiException(400, "Missing required parameter 'featureLocator' when calling ProjectApi->GetSingle1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetSingle1");

            var localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureLocator != null) localVarPathParams.Add("featureLocator", this.Configuration.ApiClient.ParameterToString(featureLocator)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSingle1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSingle1Async (string featureLocator, string projectLocator, string fields = null)
        {
             ApiResponse<Object> localVarResponse = await GetSingle1AsyncWithHttpInfo(featureLocator, projectLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSingle1AsyncWithHttpInfo (string featureLocator, string projectLocator, string fields = null)
        {
            // verify the required parameter 'featureLocator' is set
            if (featureLocator == null)
                throw new ApiException(400, "Missing required parameter 'featureLocator' when calling ProjectApi->GetSingle1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->GetSingle1");

            var localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureLocator != null) localVarPathParams.Add("featureLocator", this.Configuration.ApiClient.ParameterToString(featureLocator)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSingle1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectDto</returns>
        public ProjectDto ReloadSettingsFile (string projectLocator, string fields = null)
        {
             ApiResponse<ProjectDto> localVarResponse = ReloadSettingsFileWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        public ApiResponse< ProjectDto > ReloadSettingsFileWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ReloadSettingsFile");

            var localVarPath = "/app/rest/projects/{projectLocator}/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReloadSettingsFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        public async System.Threading.Tasks.Task<ProjectDto> ReloadSettingsFileAsync (string projectLocator, string fields = null)
        {
             ApiResponse<ProjectDto> localVarResponse = await ReloadSettingsFileAsyncWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDto>> ReloadSettingsFileAsyncWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ReloadSettingsFile");

            var localVarPath = "/app/rest/projects/{projectLocator}/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReloadSettingsFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns></returns>
        public void RemoveDefaultTemplate (string projectLocator, string fields = null)
        {
             RemoveDefaultTemplateWithHttpInfo(projectLocator, fields);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveDefaultTemplateWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->RemoveDefaultTemplate");

            var localVarPath = "/app/rest/projects/{projectLocator}/defaultTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDefaultTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveDefaultTemplateAsync (string projectLocator, string fields = null)
        {
             await RemoveDefaultTemplateAsyncWithHttpInfo(projectLocator, fields);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDefaultTemplateAsyncWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->RemoveDefaultTemplate");

            var localVarPath = "/app/rest/projects/{projectLocator}/defaultTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDefaultTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Object</returns>
        public Object Replace (string featureLocator, string projectLocator, ProjectFeatureDto body = null, string fields = null)
        {
             ApiResponse<Object> localVarResponse = ReplaceWithHttpInfo(featureLocator, projectLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ReplaceWithHttpInfo (string featureLocator, string projectLocator, ProjectFeatureDto body = null, string fields = null)
        {
            // verify the required parameter 'featureLocator' is set
            if (featureLocator == null)
                throw new ApiException(400, "Missing required parameter 'featureLocator' when calling ProjectApi->Replace");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->Replace");

            var localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureLocator != null) localVarPathParams.Add("featureLocator", this.Configuration.ApiClient.ParameterToString(featureLocator)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Replace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ReplaceAsync (string featureLocator, string projectLocator, ProjectFeatureDto body = null, string fields = null)
        {
             ApiResponse<Object> localVarResponse = await ReplaceAsyncWithHttpInfo(featureLocator, projectLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureLocator"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceAsyncWithHttpInfo (string featureLocator, string projectLocator, ProjectFeatureDto body = null, string fields = null)
        {
            // verify the required parameter 'featureLocator' is set
            if (featureLocator == null)
                throw new ApiException(400, "Missing required parameter 'featureLocator' when calling ProjectApi->Replace");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->Replace");

            var localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureLocator != null) localVarPathParams.Add("featureLocator", this.Configuration.ApiClient.ParameterToString(featureLocator)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Replace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Object</returns>
        public Object ReplaceAll (string projectLocator, ProjectFeaturesDto body = null, string fields = null)
        {
             ApiResponse<Object> localVarResponse = ReplaceAllWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ReplaceAllWithHttpInfo (string projectLocator, ProjectFeaturesDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ReplaceAll");

            var localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ReplaceAllAsync (string projectLocator, ProjectFeaturesDto body = null, string fields = null)
        {
             ApiResponse<Object> localVarResponse = await ReplaceAllAsyncWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceAllAsyncWithHttpInfo (string projectLocator, ProjectFeaturesDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ReplaceAll");

            var localVarPath = "/app/rest/projects/{projectLocator}/projectFeatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        public string ServeBuildFieldWithProject (string projectLocator, string btLocator, string buildLocator, string field)
        {
             ApiResponse<string> localVarResponse = ServeBuildFieldWithProjectWithHttpInfo(projectLocator, btLocator, buildLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServeBuildFieldWithProjectWithHttpInfo (string projectLocator, string btLocator, string buildLocator, string field)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuildFieldWithProject");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling ProjectApi->ServeBuildFieldWithProject");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling ProjectApi->ServeBuildFieldWithProject");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling ProjectApi->ServeBuildFieldWithProject");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds/{buildLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildFieldWithProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServeBuildFieldWithProjectAsync (string projectLocator, string btLocator, string buildLocator, string field)
        {
             ApiResponse<string> localVarResponse = await ServeBuildFieldWithProjectAsyncWithHttpInfo(projectLocator, btLocator, buildLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServeBuildFieldWithProjectAsyncWithHttpInfo (string projectLocator, string btLocator, string buildLocator, string field)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuildFieldWithProject");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling ProjectApi->ServeBuildFieldWithProject");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling ProjectApi->ServeBuildFieldWithProject");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling ProjectApi->ServeBuildFieldWithProject");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds/{buildLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildFieldWithProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        public BuildTypeDto ServeBuildType (string projectLocator, string btLocator, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = ServeBuildTypeWithHttpInfo(projectLocator, btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        public ApiResponse< BuildTypeDto > ServeBuildTypeWithHttpInfo (string projectLocator, string btLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuildType");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling ProjectApi->ServeBuildType");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        public async System.Threading.Tasks.Task<BuildTypeDto> ServeBuildTypeAsync (string projectLocator, string btLocator, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = await ServeBuildTypeAsyncWithHttpInfo(projectLocator, btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> ServeBuildTypeAsyncWithHttpInfo (string projectLocator, string btLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuildType");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling ProjectApi->ServeBuildType");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        public string ServeBuildTypeFieldWithProject (string projectLocator, string btLocator, string field)
        {
             ApiResponse<string> localVarResponse = ServeBuildTypeFieldWithProjectWithHttpInfo(projectLocator, btLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServeBuildTypeFieldWithProjectWithHttpInfo (string projectLocator, string btLocator, string field)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuildTypeFieldWithProject");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling ProjectApi->ServeBuildTypeFieldWithProject");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling ProjectApi->ServeBuildTypeFieldWithProject");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildTypeFieldWithProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServeBuildTypeFieldWithProjectAsync (string projectLocator, string btLocator, string field)
        {
             ApiResponse<string> localVarResponse = await ServeBuildTypeFieldWithProjectAsyncWithHttpInfo(projectLocator, btLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServeBuildTypeFieldWithProjectAsyncWithHttpInfo (string projectLocator, string btLocator, string field)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuildTypeFieldWithProject");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling ProjectApi->ServeBuildTypeFieldWithProject");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling ProjectApi->ServeBuildTypeFieldWithProject");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildTypeFieldWithProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        public BuildTypeDto ServeBuildTypeTemplates (string projectLocator, string btLocator, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = ServeBuildTypeTemplatesWithHttpInfo(projectLocator, btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        public ApiResponse< BuildTypeDto > ServeBuildTypeTemplatesWithHttpInfo (string projectLocator, string btLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuildTypeTemplates");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling ProjectApi->ServeBuildTypeTemplates");

            var localVarPath = "/app/rest/projects/{projectLocator}/templates/{btLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildTypeTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        public async System.Threading.Tasks.Task<BuildTypeDto> ServeBuildTypeTemplatesAsync (string projectLocator, string btLocator, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = await ServeBuildTypeTemplatesAsyncWithHttpInfo(projectLocator, btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> ServeBuildTypeTemplatesAsyncWithHttpInfo (string projectLocator, string btLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuildTypeTemplates");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling ProjectApi->ServeBuildTypeTemplates");

            var localVarPath = "/app/rest/projects/{projectLocator}/templates/{btLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildTypeTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        public BuildTypesDto ServeBuildTypesInProject (string projectLocator, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = ServeBuildTypesInProjectWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        public ApiResponse< BuildTypesDto > ServeBuildTypesInProjectWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuildTypesInProject");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildTypesInProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        public async System.Threading.Tasks.Task<BuildTypesDto> ServeBuildTypesInProjectAsync (string projectLocator, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = await ServeBuildTypesInProjectAsyncWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> ServeBuildTypesInProjectAsyncWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuildTypesInProject");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildTypesInProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildDto</returns>
        public BuildDto ServeBuildWithProject1 (string projectLocator, string btLocator, string buildLocator, string fields = null)
        {
             ApiResponse<BuildDto> localVarResponse = ServeBuildWithProject1WithHttpInfo(projectLocator, btLocator, buildLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildDto</returns>
        public ApiResponse< BuildDto > ServeBuildWithProject1WithHttpInfo (string projectLocator, string btLocator, string buildLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuildWithProject1");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling ProjectApi->ServeBuildWithProject1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling ProjectApi->ServeBuildWithProject1");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildWithProject1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildDto</returns>
        public async System.Threading.Tasks.Task<BuildDto> ServeBuildWithProject1Async (string projectLocator, string btLocator, string buildLocator, string fields = null)
        {
             ApiResponse<BuildDto> localVarResponse = await ServeBuildWithProject1AsyncWithHttpInfo(projectLocator, btLocator, buildLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="buildLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildDto>> ServeBuildWithProject1AsyncWithHttpInfo (string projectLocator, string btLocator, string buildLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuildWithProject1");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling ProjectApi->ServeBuildWithProject1");
            // verify the required parameter 'buildLocator' is set
            if (buildLocator == null)
                throw new ApiException(400, "Missing required parameter 'buildLocator' when calling ProjectApi->ServeBuildWithProject1");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds/{buildLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (buildLocator != null) localVarPathParams.Add("buildLocator", this.Configuration.ApiClient.ParameterToString(buildLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuildWithProject1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildsDto</returns>
        public BuildsDto ServeBuilds1 (string projectLocator, string btLocator, string fields = null)
        {
             ApiResponse<BuildsDto> localVarResponse = ServeBuilds1WithHttpInfo(projectLocator, btLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildsDto</returns>
        public ApiResponse< BuildsDto > ServeBuilds1WithHttpInfo (string projectLocator, string btLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuilds1");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling ProjectApi->ServeBuilds1");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuilds1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildsDto</returns>
        public async System.Threading.Tasks.Task<BuildsDto> ServeBuilds1Async (string projectLocator, string btLocator, string fields = null)
        {
             ApiResponse<BuildsDto> localVarResponse = await ServeBuilds1AsyncWithHttpInfo(projectLocator, btLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="btLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildsDto>> ServeBuilds1AsyncWithHttpInfo (string projectLocator, string btLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeBuilds1");
            // verify the required parameter 'btLocator' is set
            if (btLocator == null)
                throw new ApiException(400, "Missing required parameter 'btLocator' when calling ProjectApi->ServeBuilds1");

            var localVarPath = "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (btLocator != null) localVarPathParams.Add("btLocator", this.Configuration.ApiClient.ParameterToString(btLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeBuilds1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectDto</returns>
        public ProjectDto ServeProject (string projectLocator, string fields = null)
        {
             ApiResponse<ProjectDto> localVarResponse = ServeProjectWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        public ApiResponse< ProjectDto > ServeProjectWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeProject");

            var localVarPath = "/app/rest/projects/{projectLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        public async System.Threading.Tasks.Task<ProjectDto> ServeProjectAsync (string projectLocator, string fields = null)
        {
             ApiResponse<ProjectDto> localVarResponse = await ServeProjectAsyncWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDto>> ServeProjectAsyncWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeProject");

            var localVarPath = "/app/rest/projects/{projectLocator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <returns>string</returns>
        public string ServeProjectField (string projectLocator, string field)
        {
             ApiResponse<string> localVarResponse = ServeProjectFieldWithHttpInfo(projectLocator, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServeProjectFieldWithHttpInfo (string projectLocator, string field)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeProjectField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling ProjectApi->ServeProjectField");

            var localVarPath = "/app/rest/projects/{projectLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeProjectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServeProjectFieldAsync (string projectLocator, string field)
        {
             ApiResponse<string> localVarResponse = await ServeProjectFieldAsyncWithHttpInfo(projectLocator, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServeProjectFieldAsyncWithHttpInfo (string projectLocator, string field)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeProjectField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling ProjectApi->ServeProjectField");

            var localVarPath = "/app/rest/projects/{projectLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeProjectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectsDto</returns>
        public ProjectsDto ServeProjects (string locator = null, string fields = null)
        {
             ApiResponse<ProjectsDto> localVarResponse = ServeProjectsWithHttpInfo(locator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectsDto</returns>
        public ApiResponse< ProjectsDto > ServeProjectsWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectsDto</returns>
        public async System.Threading.Tasks.Task<ProjectsDto> ServeProjectsAsync (string locator = null, string fields = null)
        {
             ApiResponse<ProjectsDto> localVarResponse = await ServeProjectsAsyncWithHttpInfo(locator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locator"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectsDto>> ServeProjectsAsyncWithHttpInfo (string locator = null, string fields = null)
        {

            var localVarPath = "/app/rest/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locator", locator)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        public BuildTypesDto ServeTemplatesInProject (string projectLocator, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = ServeTemplatesInProjectWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        public ApiResponse< BuildTypesDto > ServeTemplatesInProjectWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeTemplatesInProject");

            var localVarPath = "/app/rest/projects/{projectLocator}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeTemplatesInProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        public async System.Threading.Tasks.Task<BuildTypesDto> ServeTemplatesInProjectAsync (string projectLocator, string fields = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = await ServeTemplatesInProjectAsyncWithHttpInfo(projectLocator, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> ServeTemplatesInProjectAsyncWithHttpInfo (string projectLocator, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->ServeTemplatesInProject");

            var localVarPath = "/app/rest/projects/{projectLocator}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServeTemplatesInProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>BuildTypesDto</returns>
        public BuildTypesDto SetBuildTypesOrder (string projectLocator, BuildTypesDto body = null, string field = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = SetBuildTypesOrderWithHttpInfo(projectLocator, body, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of BuildTypesDto</returns>
        public ApiResponse< BuildTypesDto > SetBuildTypesOrderWithHttpInfo (string projectLocator, BuildTypesDto body = null, string field = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetBuildTypesOrder");

            var localVarPath = "/app/rest/projects/{projectLocator}/order/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBuildTypesOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of BuildTypesDto</returns>
        public async System.Threading.Tasks.Task<BuildTypesDto> SetBuildTypesOrderAsync (string projectLocator, BuildTypesDto body = null, string field = null)
        {
             ApiResponse<BuildTypesDto> localVarResponse = await SetBuildTypesOrderAsyncWithHttpInfo(projectLocator, body, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypesDto>> SetBuildTypesOrderAsyncWithHttpInfo (string projectLocator, BuildTypesDto body = null, string field = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetBuildTypesOrder");

            var localVarPath = "/app/rest/projects/{projectLocator}/order/buildTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBuildTypesOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>BuildTypeDto</returns>
        public BuildTypeDto SetDefaultTemplate (string projectLocator, BuildTypeDto body = null, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = SetDefaultTemplateWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of BuildTypeDto</returns>
        public ApiResponse< BuildTypeDto > SetDefaultTemplateWithHttpInfo (string projectLocator, BuildTypeDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetDefaultTemplate");

            var localVarPath = "/app/rest/projects/{projectLocator}/defaultTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDefaultTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of BuildTypeDto</returns>
        public async System.Threading.Tasks.Task<BuildTypeDto> SetDefaultTemplateAsync (string projectLocator, BuildTypeDto body = null, string fields = null)
        {
             ApiResponse<BuildTypeDto> localVarResponse = await SetDefaultTemplateAsyncWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (BuildTypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildTypeDto>> SetDefaultTemplateAsyncWithHttpInfo (string projectLocator, BuildTypeDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetDefaultTemplate");

            var localVarPath = "/app/rest/projects/{projectLocator}/defaultTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDefaultTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildTypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildTypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildTypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertyDto</returns>
        public PropertyDto SetParameter2 (string name, string projectLocator, PropertyDto body = null, string fields = null)
        {
             ApiResponse<PropertyDto> localVarResponse = SetParameter2WithHttpInfo(name, projectLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertyDto</returns>
        public ApiResponse< PropertyDto > SetParameter2WithHttpInfo (string name, string projectLocator, PropertyDto body = null, string fields = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->SetParameter2");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParameter2");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameter2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertyDto</returns>
        public async System.Threading.Tasks.Task<PropertyDto> SetParameter2Async (string name, string projectLocator, PropertyDto body = null, string fields = null)
        {
             ApiResponse<PropertyDto> localVarResponse = await SetParameter2AsyncWithHttpInfo(name, projectLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyDto>> SetParameter2AsyncWithHttpInfo (string name, string projectLocator, PropertyDto body = null, string fields = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->SetParameter2");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParameter2");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameter2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertyDto</returns>
        public PropertyDto SetParameter3 (string projectLocator, PropertyDto body = null, string fields = null)
        {
             ApiResponse<PropertyDto> localVarResponse = SetParameter3WithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertyDto</returns>
        public ApiResponse< PropertyDto > SetParameter3WithHttpInfo (string projectLocator, PropertyDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParameter3");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameter3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertyDto</returns>
        public async System.Threading.Tasks.Task<PropertyDto> SetParameter3Async (string projectLocator, PropertyDto body = null, string fields = null)
        {
             ApiResponse<PropertyDto> localVarResponse = await SetParameter3AsyncWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyDto>> SetParameter3AsyncWithHttpInfo (string projectLocator, PropertyDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParameter3");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameter3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>TypeDto</returns>
        public TypeDto SetParameterType1 (string name, string projectLocator, TypeDto body = null)
        {
             ApiResponse<TypeDto> localVarResponse = SetParameterType1WithHttpInfo(name, projectLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TypeDto</returns>
        public ApiResponse< TypeDto > SetParameterType1WithHttpInfo (string name, string projectLocator, TypeDto body = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->SetParameterType1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParameterType1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameterType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TypeDto</returns>
        public async System.Threading.Tasks.Task<TypeDto> SetParameterType1Async (string name, string projectLocator, TypeDto body = null)
        {
             ApiResponse<TypeDto> localVarResponse = await SetParameterType1AsyncWithHttpInfo(name, projectLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TypeDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TypeDto>> SetParameterType1AsyncWithHttpInfo (string name, string projectLocator, TypeDto body = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->SetParameterType1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParameterType1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameterType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypeDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypeDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypeDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SetParameterTypeRawValue1 (string name, string projectLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = SetParameterTypeRawValue1WithHttpInfo(name, projectLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetParameterTypeRawValue1WithHttpInfo (string name, string projectLocator, string body = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->SetParameterTypeRawValue1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParameterTypeRawValue1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameterTypeRawValue1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetParameterTypeRawValue1Async (string name, string projectLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetParameterTypeRawValue1AsyncWithHttpInfo(name, projectLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetParameterTypeRawValue1AsyncWithHttpInfo (string name, string projectLocator, string body = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->SetParameterTypeRawValue1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParameterTypeRawValue1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameterTypeRawValue1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SetParameterValueLong1 (string name, string projectLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = SetParameterValueLong1WithHttpInfo(name, projectLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetParameterValueLong1WithHttpInfo (string name, string projectLocator, string body = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->SetParameterValueLong1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParameterValueLong1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameterValueLong1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetParameterValueLong1Async (string name, string projectLocator, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetParameterValueLong1AsyncWithHttpInfo(name, projectLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetParameterValueLong1AsyncWithHttpInfo (string name, string projectLocator, string body = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectApi->SetParameterValueLong1");
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParameterValueLong1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters/{name}/value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameterValueLong1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>PropertiesDto</returns>
        public PropertiesDto SetParameters1 (string projectLocator, PropertiesDto body = null, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = SetParameters1WithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of PropertiesDto</returns>
        public ApiResponse< PropertiesDto > SetParameters1WithHttpInfo (string projectLocator, PropertiesDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParameters1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameters1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of PropertiesDto</returns>
        public async System.Threading.Tasks.Task<PropertiesDto> SetParameters1Async (string projectLocator, PropertiesDto body = null, string fields = null)
        {
             ApiResponse<PropertiesDto> localVarResponse = await SetParameters1AsyncWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (PropertiesDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesDto>> SetParameters1AsyncWithHttpInfo (string projectLocator, PropertiesDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParameters1");

            var localVarPath = "/app/rest/projects/{projectLocator}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParameters1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertiesDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ProjectDto</returns>
        public ProjectDto SetParentProject (string projectLocator, ProjectDto body = null, string fields = null)
        {
             ApiResponse<ProjectDto> localVarResponse = SetParentProjectWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of ProjectDto</returns>
        public ApiResponse< ProjectDto > SetParentProjectWithHttpInfo (string projectLocator, ProjectDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParentProject");

            var localVarPath = "/app/rest/projects/{projectLocator}/parentProject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParentProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ProjectDto</returns>
        public async System.Threading.Tasks.Task<ProjectDto> SetParentProjectAsync (string projectLocator, ProjectDto body = null, string fields = null)
        {
             ApiResponse<ProjectDto> localVarResponse = await SetParentProjectAsyncWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDto>> SetParentProjectAsyncWithHttpInfo (string projectLocator, ProjectDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetParentProject");

            var localVarPath = "/app/rest/projects/{projectLocator}/parentProject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetParentProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AgentPoolDto</returns>
        public AgentPoolDto SetProjectAgentPools (string projectLocator, AgentPoolDto body = null)
        {
             ApiResponse<AgentPoolDto> localVarResponse = SetProjectAgentPoolsWithHttpInfo(projectLocator, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolDto</returns>
        public ApiResponse< AgentPoolDto > SetProjectAgentPoolsWithHttpInfo (string projectLocator, AgentPoolDto body = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetProjectAgentPools");

            var localVarPath = "/app/rest/projects/{projectLocator}/agentPools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetProjectAgentPools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AgentPoolDto</returns>
        public async System.Threading.Tasks.Task<AgentPoolDto> SetProjectAgentPoolsAsync (string projectLocator, AgentPoolDto body = null)
        {
             ApiResponse<AgentPoolDto> localVarResponse = await SetProjectAgentPoolsAsyncWithHttpInfo(projectLocator, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentPoolDto>> SetProjectAgentPoolsAsyncWithHttpInfo (string projectLocator, AgentPoolDto body = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetProjectAgentPools");

            var localVarPath = "/app/rest/projects/{projectLocator}/agentPools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetProjectAgentPools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>AgentPoolsDto</returns>
        public AgentPoolsDto SetProjectAgentPools1 (string projectLocator, AgentPoolsDto body = null, string fields = null)
        {
             ApiResponse<AgentPoolsDto> localVarResponse = SetProjectAgentPools1WithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of AgentPoolsDto</returns>
        public ApiResponse< AgentPoolsDto > SetProjectAgentPools1WithHttpInfo (string projectLocator, AgentPoolsDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetProjectAgentPools1");

            var localVarPath = "/app/rest/projects/{projectLocator}/agentPools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetProjectAgentPools1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of AgentPoolsDto</returns>
        public async System.Threading.Tasks.Task<AgentPoolsDto> SetProjectAgentPools1Async (string projectLocator, AgentPoolsDto body = null, string fields = null)
        {
             ApiResponse<AgentPoolsDto> localVarResponse = await SetProjectAgentPools1AsyncWithHttpInfo(projectLocator, body, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (AgentPoolsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgentPoolsDto>> SetProjectAgentPools1AsyncWithHttpInfo (string projectLocator, AgentPoolsDto body = null, string fields = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetProjectAgentPools1");

            var localVarPath = "/app/rest/projects/{projectLocator}/agentPools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetProjectAgentPools1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgentPoolsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AgentPoolsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgentPoolsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>string</returns>
        public string SetProjectField (string projectLocator, string field, string body = null)
        {
             ApiResponse<string> localVarResponse = SetProjectFieldWithHttpInfo(projectLocator, field, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetProjectFieldWithHttpInfo (string projectLocator, string field, string body = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetProjectField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling ProjectApi->SetProjectField");

            var localVarPath = "/app/rest/projects/{projectLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetProjectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetProjectFieldAsync (string projectLocator, string field, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetProjectFieldAsyncWithHttpInfo(projectLocator, field, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="field"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetProjectFieldAsyncWithHttpInfo (string projectLocator, string field, string body = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetProjectField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling ProjectApi->SetProjectField");

            var localVarPath = "/app/rest/projects/{projectLocator}/{field}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (field != null) localVarPathParams.Add("field", this.Configuration.ApiClient.ParameterToString(field)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetProjectField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>ProjectsDto</returns>
        public ProjectsDto SetProjectsOrder (string projectLocator, ProjectsDto body = null, string field = null)
        {
             ApiResponse<ProjectsDto> localVarResponse = SetProjectsOrderWithHttpInfo(projectLocator, body, field);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>ApiResponse of ProjectsDto</returns>
        public ApiResponse< ProjectsDto > SetProjectsOrderWithHttpInfo (string projectLocator, ProjectsDto body = null, string field = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetProjectsOrder");

            var localVarPath = "/app/rest/projects/{projectLocator}/order/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetProjectsOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ProjectsDto</returns>
        public async System.Threading.Tasks.Task<ProjectsDto> SetProjectsOrderAsync (string projectLocator, ProjectsDto body = null, string field = null)
        {
             ApiResponse<ProjectsDto> localVarResponse = await SetProjectsOrderAsyncWithHttpInfo(projectLocator, body, field);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TeamCity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectLocator"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="field"> (optional)</param>
        /// <returns>Task of ApiResponse (ProjectsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectsDto>> SetProjectsOrderAsyncWithHttpInfo (string projectLocator, ProjectsDto body = null, string field = null)
        {
            // verify the required parameter 'projectLocator' is set
            if (projectLocator == null)
                throw new ApiException(400, "Missing required parameter 'projectLocator' when calling ProjectApi->SetProjectsOrder");

            var localVarPath = "/app/rest/projects/{projectLocator}/order/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectLocator != null) localVarPathParams.Add("projectLocator", this.Configuration.ApiClient.ParameterToString(projectLocator)); // path parameter
            if (field != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "field", field)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetProjectsOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectsDto)));
        }

    }
}
